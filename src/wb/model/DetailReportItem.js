/**
 * API продавца
 * # Общее описание <style> .version {   border: 0.1rem #b3b3b3 solid;   background-color: #F9F9F9;   color: #32329FE6;   height: 25px;   width: 150px;   text-align: center }, </style> <style> .warning {   border: 1.6rem #b3b3b3 solid;   background-color: #F9F9F9;   color: #247706;   text-align: center } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной проверки API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul>  ## Поддержка <br> Техническая поддержка осуществляется через обращения в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> Также готовятся к публикации Release Notes по API на сайте.  После их выхода будет сделан соответствующий анонс.   ## Авторизация Авторизация осуществляется по ключам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к новому API](https://seller.wildberries.ru/supplier-settings/access-to-new-api). <br>Обратите внимание, что ключ отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный ключ следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br>Внимание! Изменился домен для методов статистики, актуальный: https://statistics-api.wildberries.ru ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> ## Release Notes #### 2022.12.21 v1.6 Добавлена инструкция по загрузке статистики в Excel #### 2022.12.15 v1.5  Новая авторизация для методов API статистики 2022.12.15 в v1.5: #### 2022.10.31 v1.4  Метод будет отключен 2022.10.31 в v1.4: <ul> <li> `/content/v1/cards/list` </ul>  #### 2022.09.20 v1.2  В связи с переходом на новое API Контента старые методы будут отключены. К их числу относятся: <ul> <li> `/card/_*` <li> `/api/v1/config/_*` <li> `/api/v1/directory/_*` </ul> Данные методы теперь возвращают код 404.  Новое API Контента описано в данном документе в разделах Контент / * 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../../ApiClient';

/**
 * The DetailReportItem model module.
 * @module model/DetailReportItem
 * @version 1.6
 */
class DetailReportItem {
    /**
     * Constructs a new <code>DetailReportItem</code>.
     * @alias module:model/DetailReportItem
     */
    constructor() { 
        
        DetailReportItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DetailReportItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DetailReportItem} obj Optional instance to populate.
     * @return {module:model/DetailReportItem} The populated <code>DetailReportItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DetailReportItem();

            if (data.hasOwnProperty('realizationreport_id')) {
                obj['realizationreport_id'] = ApiClient.convertToType(data['realizationreport_id'], 'Number');
            }
            if (data.hasOwnProperty('date_from')) {
                obj['date_from'] = ApiClient.convertToType(data['date_from'], 'Date');
            }
            if (data.hasOwnProperty('date_to')) {
                obj['date_to'] = ApiClient.convertToType(data['date_to'], 'Date');
            }
            if (data.hasOwnProperty('create_dt')) {
                obj['create_dt'] = ApiClient.convertToType(data['create_dt'], 'Date');
            }
            if (data.hasOwnProperty('suppliercontract_code')) {
                obj['suppliercontract_code'] = ApiClient.convertToType(data['suppliercontract_code'], Object);
            }
            if (data.hasOwnProperty('rrd_id')) {
                obj['rrd_id'] = ApiClient.convertToType(data['rrd_id'], 'Number');
            }
            if (data.hasOwnProperty('gi_id')) {
                obj['gi_id'] = ApiClient.convertToType(data['gi_id'], 'Number');
            }
            if (data.hasOwnProperty('subject_name')) {
                obj['subject_name'] = ApiClient.convertToType(data['subject_name'], 'String');
            }
            if (data.hasOwnProperty('nm_id')) {
                obj['nm_id'] = ApiClient.convertToType(data['nm_id'], 'Number');
            }
            if (data.hasOwnProperty('brand_name')) {
                obj['brand_name'] = ApiClient.convertToType(data['brand_name'], 'String');
            }
            if (data.hasOwnProperty('sa_name')) {
                obj['sa_name'] = ApiClient.convertToType(data['sa_name'], 'String');
            }
            if (data.hasOwnProperty('ts_name')) {
                obj['ts_name'] = ApiClient.convertToType(data['ts_name'], 'String');
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('doc_type_name')) {
                obj['doc_type_name'] = ApiClient.convertToType(data['doc_type_name'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('retail_price')) {
                obj['retail_price'] = ApiClient.convertToType(data['retail_price'], 'Number');
            }
            if (data.hasOwnProperty('retail_amount')) {
                obj['retail_amount'] = ApiClient.convertToType(data['retail_amount'], 'Number');
            }
            if (data.hasOwnProperty('sale_percent')) {
                obj['sale_percent'] = ApiClient.convertToType(data['sale_percent'], 'Number');
            }
            if (data.hasOwnProperty('commission_percent')) {
                obj['commission_percent'] = ApiClient.convertToType(data['commission_percent'], 'Number');
            }
            if (data.hasOwnProperty('office_name')) {
                obj['office_name'] = ApiClient.convertToType(data['office_name'], 'String');
            }
            if (data.hasOwnProperty('supplier_oper_name')) {
                obj['supplier_oper_name'] = ApiClient.convertToType(data['supplier_oper_name'], 'String');
            }
            if (data.hasOwnProperty('order_dt')) {
                obj['order_dt'] = ApiClient.convertToType(data['order_dt'], 'Date');
            }
            if (data.hasOwnProperty('sale_dt')) {
                obj['sale_dt'] = ApiClient.convertToType(data['sale_dt'], 'Date');
            }
            if (data.hasOwnProperty('rr_dt')) {
                obj['rr_dt'] = ApiClient.convertToType(data['rr_dt'], 'Date');
            }
            if (data.hasOwnProperty('shk_id')) {
                obj['shk_id'] = ApiClient.convertToType(data['shk_id'], 'Number');
            }
            if (data.hasOwnProperty('retail_price_withdisc_rub')) {
                obj['retail_price_withdisc_rub'] = ApiClient.convertToType(data['retail_price_withdisc_rub'], 'Number');
            }
            if (data.hasOwnProperty('delivery_amount')) {
                obj['delivery_amount'] = ApiClient.convertToType(data['delivery_amount'], 'Number');
            }
            if (data.hasOwnProperty('return_amount')) {
                obj['return_amount'] = ApiClient.convertToType(data['return_amount'], 'Number');
            }
            if (data.hasOwnProperty('delivery_rub')) {
                obj['delivery_rub'] = ApiClient.convertToType(data['delivery_rub'], 'Number');
            }
            if (data.hasOwnProperty('gi_box_type_name')) {
                obj['gi_box_type_name'] = ApiClient.convertToType(data['gi_box_type_name'], 'String');
            }
            if (data.hasOwnProperty('product_discount_for_report')) {
                obj['product_discount_for_report'] = ApiClient.convertToType(data['product_discount_for_report'], 'Number');
            }
            if (data.hasOwnProperty('supplier_promo')) {
                obj['supplier_promo'] = ApiClient.convertToType(data['supplier_promo'], 'Number');
            }
            if (data.hasOwnProperty('rid')) {
                obj['rid'] = ApiClient.convertToType(data['rid'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_spp_prc')) {
                obj['ppvz_spp_prc'] = ApiClient.convertToType(data['ppvz_spp_prc'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_kvw_prc_base')) {
                obj['ppvz_kvw_prc_base'] = ApiClient.convertToType(data['ppvz_kvw_prc_base'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_kvw_prc')) {
                obj['ppvz_kvw_prc'] = ApiClient.convertToType(data['ppvz_kvw_prc'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_sales_commission')) {
                obj['ppvz_sales_commission'] = ApiClient.convertToType(data['ppvz_sales_commission'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_for_pay')) {
                obj['ppvz_for_pay'] = ApiClient.convertToType(data['ppvz_for_pay'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_reward')) {
                obj['ppvz_reward'] = ApiClient.convertToType(data['ppvz_reward'], 'Number');
            }
            if (data.hasOwnProperty('acquiring_fee')) {
                obj['acquiring_fee'] = ApiClient.convertToType(data['acquiring_fee'], 'Number');
            }
            if (data.hasOwnProperty('acquiring_bank')) {
                obj['acquiring_bank'] = ApiClient.convertToType(data['acquiring_bank'], 'String');
            }
            if (data.hasOwnProperty('ppvz_vw')) {
                obj['ppvz_vw'] = ApiClient.convertToType(data['ppvz_vw'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_vw_nds')) {
                obj['ppvz_vw_nds'] = ApiClient.convertToType(data['ppvz_vw_nds'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_office_id')) {
                obj['ppvz_office_id'] = ApiClient.convertToType(data['ppvz_office_id'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_office_name')) {
                obj['ppvz_office_name'] = ApiClient.convertToType(data['ppvz_office_name'], 'String');
            }
            if (data.hasOwnProperty('ppvz_supplier_id')) {
                obj['ppvz_supplier_id'] = ApiClient.convertToType(data['ppvz_supplier_id'], 'Number');
            }
            if (data.hasOwnProperty('ppvz_supplier_name')) {
                obj['ppvz_supplier_name'] = ApiClient.convertToType(data['ppvz_supplier_name'], 'String');
            }
            if (data.hasOwnProperty('ppvz_inn')) {
                obj['ppvz_inn'] = ApiClient.convertToType(data['ppvz_inn'], 'String');
            }
            if (data.hasOwnProperty('declaration_number')) {
                obj['declaration_number'] = ApiClient.convertToType(data['declaration_number'], 'String');
            }
            if (data.hasOwnProperty('bonus_type_name')) {
                obj['bonus_type_name'] = ApiClient.convertToType(data['bonus_type_name'], 'String');
            }
            if (data.hasOwnProperty('sticker_id')) {
                obj['sticker_id'] = ApiClient.convertToType(data['sticker_id'], 'String');
            }
            if (data.hasOwnProperty('site_country')) {
                obj['site_country'] = ApiClient.convertToType(data['site_country'], 'String');
            }
            if (data.hasOwnProperty('penalty')) {
                obj['penalty'] = ApiClient.convertToType(data['penalty'], 'Number');
            }
            if (data.hasOwnProperty('additional_payment')) {
                obj['additional_payment'] = ApiClient.convertToType(data['additional_payment'], 'Number');
            }
            if (data.hasOwnProperty('srid')) {
                obj['srid'] = ApiClient.convertToType(data['srid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DetailReportItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DetailReportItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['subject_name'] && !(typeof data['subject_name'] === 'string' || data['subject_name'] instanceof String)) {
            throw new Error("Expected the field `subject_name` to be a primitive type in the JSON string but got " + data['subject_name']);
        }
        // ensure the json data is a string
        if (data['brand_name'] && !(typeof data['brand_name'] === 'string' || data['brand_name'] instanceof String)) {
            throw new Error("Expected the field `brand_name` to be a primitive type in the JSON string but got " + data['brand_name']);
        }
        // ensure the json data is a string
        if (data['sa_name'] && !(typeof data['sa_name'] === 'string' || data['sa_name'] instanceof String)) {
            throw new Error("Expected the field `sa_name` to be a primitive type in the JSON string but got " + data['sa_name']);
        }
        // ensure the json data is a string
        if (data['ts_name'] && !(typeof data['ts_name'] === 'string' || data['ts_name'] instanceof String)) {
            throw new Error("Expected the field `ts_name` to be a primitive type in the JSON string but got " + data['ts_name']);
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // ensure the json data is a string
        if (data['doc_type_name'] && !(typeof data['doc_type_name'] === 'string' || data['doc_type_name'] instanceof String)) {
            throw new Error("Expected the field `doc_type_name` to be a primitive type in the JSON string but got " + data['doc_type_name']);
        }
        // ensure the json data is a string
        if (data['office_name'] && !(typeof data['office_name'] === 'string' || data['office_name'] instanceof String)) {
            throw new Error("Expected the field `office_name` to be a primitive type in the JSON string but got " + data['office_name']);
        }
        // ensure the json data is a string
        if (data['supplier_oper_name'] && !(typeof data['supplier_oper_name'] === 'string' || data['supplier_oper_name'] instanceof String)) {
            throw new Error("Expected the field `supplier_oper_name` to be a primitive type in the JSON string but got " + data['supplier_oper_name']);
        }
        // ensure the json data is a string
        if (data['gi_box_type_name'] && !(typeof data['gi_box_type_name'] === 'string' || data['gi_box_type_name'] instanceof String)) {
            throw new Error("Expected the field `gi_box_type_name` to be a primitive type in the JSON string but got " + data['gi_box_type_name']);
        }
        // ensure the json data is a string
        if (data['acquiring_bank'] && !(typeof data['acquiring_bank'] === 'string' || data['acquiring_bank'] instanceof String)) {
            throw new Error("Expected the field `acquiring_bank` to be a primitive type in the JSON string but got " + data['acquiring_bank']);
        }
        // ensure the json data is a string
        if (data['ppvz_office_name'] && !(typeof data['ppvz_office_name'] === 'string' || data['ppvz_office_name'] instanceof String)) {
            throw new Error("Expected the field `ppvz_office_name` to be a primitive type in the JSON string but got " + data['ppvz_office_name']);
        }
        // ensure the json data is a string
        if (data['ppvz_supplier_name'] && !(typeof data['ppvz_supplier_name'] === 'string' || data['ppvz_supplier_name'] instanceof String)) {
            throw new Error("Expected the field `ppvz_supplier_name` to be a primitive type in the JSON string but got " + data['ppvz_supplier_name']);
        }
        // ensure the json data is a string
        if (data['ppvz_inn'] && !(typeof data['ppvz_inn'] === 'string' || data['ppvz_inn'] instanceof String)) {
            throw new Error("Expected the field `ppvz_inn` to be a primitive type in the JSON string but got " + data['ppvz_inn']);
        }
        // ensure the json data is a string
        if (data['declaration_number'] && !(typeof data['declaration_number'] === 'string' || data['declaration_number'] instanceof String)) {
            throw new Error("Expected the field `declaration_number` to be a primitive type in the JSON string but got " + data['declaration_number']);
        }
        // ensure the json data is a string
        if (data['bonus_type_name'] && !(typeof data['bonus_type_name'] === 'string' || data['bonus_type_name'] instanceof String)) {
            throw new Error("Expected the field `bonus_type_name` to be a primitive type in the JSON string but got " + data['bonus_type_name']);
        }
        // ensure the json data is a string
        if (data['sticker_id'] && !(typeof data['sticker_id'] === 'string' || data['sticker_id'] instanceof String)) {
            throw new Error("Expected the field `sticker_id` to be a primitive type in the JSON string but got " + data['sticker_id']);
        }
        // ensure the json data is a string
        if (data['site_country'] && !(typeof data['site_country'] === 'string' || data['site_country'] instanceof String)) {
            throw new Error("Expected the field `site_country` to be a primitive type in the JSON string but got " + data['site_country']);
        }
        // ensure the json data is a string
        if (data['srid'] && !(typeof data['srid'] === 'string' || data['srid'] instanceof String)) {
            throw new Error("Expected the field `srid` to be a primitive type in the JSON string but got " + data['srid']);
        }

        return true;
    }


}



/**
 * Номер отчета
 * @member {Number} realizationreport_id
 */
DetailReportItem.prototype['realizationreport_id'] = undefined;

/**
 * Дата начала отчетного периода <div class=\"version\">С версии 1.0.10</div>
 * @member {Date} date_from
 */
DetailReportItem.prototype['date_from'] = undefined;

/**
 * Дата конца отчетного периода <div class=\"version\">С версии 1.0.10</div>
 * @member {Date} date_to
 */
DetailReportItem.prototype['date_to'] = undefined;

/**
 * Дата формирования отчёта
 * @member {Date} create_dt
 */
DetailReportItem.prototype['create_dt'] = undefined;

/**
 * Договор
 * @member {Object} suppliercontract_code
 */
DetailReportItem.prototype['suppliercontract_code'] = undefined;

/**
 * Номер строки
 * @member {Number} rrd_id
 */
DetailReportItem.prototype['rrd_id'] = undefined;

/**
 * Номер поставки
 * @member {Number} gi_id
 */
DetailReportItem.prototype['gi_id'] = undefined;

/**
 * Предмет
 * @member {String} subject_name
 */
DetailReportItem.prototype['subject_name'] = undefined;

/**
 * Артикул
 * @member {Number} nm_id
 */
DetailReportItem.prototype['nm_id'] = undefined;

/**
 * Бренд
 * @member {String} brand_name
 */
DetailReportItem.prototype['brand_name'] = undefined;

/**
 * Артикул поставщика
 * @member {String} sa_name
 */
DetailReportItem.prototype['sa_name'] = undefined;

/**
 * Размер
 * @member {String} ts_name
 */
DetailReportItem.prototype['ts_name'] = undefined;

/**
 * Бар-код
 * @member {String} barcode
 */
DetailReportItem.prototype['barcode'] = undefined;

/**
 * Тип документа
 * @member {String} doc_type_name
 */
DetailReportItem.prototype['doc_type_name'] = undefined;

/**
 * Количество
 * @member {Number} quantity
 */
DetailReportItem.prototype['quantity'] = undefined;

/**
 * Цена розничная
 * @member {Number} retail_price
 */
DetailReportItem.prototype['retail_price'] = undefined;

/**
 * Сумма продаж (возвратов)
 * @member {Number} retail_amount
 */
DetailReportItem.prototype['retail_amount'] = undefined;

/**
 * Согласованная скидка
 * @member {Number} sale_percent
 */
DetailReportItem.prototype['sale_percent'] = undefined;

/**
 * Процент комиссии
 * @member {Number} commission_percent
 */
DetailReportItem.prototype['commission_percent'] = undefined;

/**
 * Склад
 * @member {String} office_name
 */
DetailReportItem.prototype['office_name'] = undefined;

/**
 * Обоснование для оплаты
 * @member {String} supplier_oper_name
 */
DetailReportItem.prototype['supplier_oper_name'] = undefined;

/**
 * Дата заказа. Присылается с явным указанием часового пояса.
 * @member {Date} order_dt
 */
DetailReportItem.prototype['order_dt'] = undefined;

/**
 * Дата продажи. Присылается с явным указанием часового пояса.
 * @member {Date} sale_dt
 */
DetailReportItem.prototype['sale_dt'] = undefined;

/**
 * Дата операции. Присылается с явным указанием часового пояса.
 * @member {Date} rr_dt
 */
DetailReportItem.prototype['rr_dt'] = undefined;

/**
 * Штрих-код
 * @member {Number} shk_id
 */
DetailReportItem.prototype['shk_id'] = undefined;

/**
 * Цена розничная с учетом согласованной скидки
 * @member {Number} retail_price_withdisc_rub
 */
DetailReportItem.prototype['retail_price_withdisc_rub'] = undefined;

/**
 * Количество доставок
 * @member {Number} delivery_amount
 */
DetailReportItem.prototype['delivery_amount'] = undefined;

/**
 * Количество возвратов
 * @member {Number} return_amount
 */
DetailReportItem.prototype['return_amount'] = undefined;

/**
 * Стоимость логистики
 * @member {Number} delivery_rub
 */
DetailReportItem.prototype['delivery_rub'] = undefined;

/**
 * Тип коробов
 * @member {String} gi_box_type_name
 */
DetailReportItem.prototype['gi_box_type_name'] = undefined;

/**
 * Согласованный продуктовый дисконт
 * @member {Number} product_discount_for_report
 */
DetailReportItem.prototype['product_discount_for_report'] = undefined;

/**
 * Промокод
 * @member {Number} supplier_promo
 */
DetailReportItem.prototype['supplier_promo'] = undefined;

/**
 * Уникальный идентификатор позиции заказа
 * @member {Number} rid
 */
DetailReportItem.prototype['rid'] = undefined;

/**
 * Скидка постоянного покупателя
 * @member {Number} ppvz_spp_prc
 */
DetailReportItem.prototype['ppvz_spp_prc'] = undefined;

/**
 * Размер кВВ без НДС, % базовый
 * @member {Number} ppvz_kvw_prc_base
 */
DetailReportItem.prototype['ppvz_kvw_prc_base'] = undefined;

/**
 * Итоговый кВВ без НДС, %
 * @member {Number} ppvz_kvw_prc
 */
DetailReportItem.prototype['ppvz_kvw_prc'] = undefined;

/**
 * Вознаграждение с продаж до вычета услуг поверенного, без НДС
 * @member {Number} ppvz_sales_commission
 */
DetailReportItem.prototype['ppvz_sales_commission'] = undefined;

/**
 * К перечислению продавцу за реализованный товар
 * @member {Number} ppvz_for_pay
 */
DetailReportItem.prototype['ppvz_for_pay'] = undefined;

/**
 * Возмещение за выдачу и возврат товаров на ПВЗ
 * @member {Number} ppvz_reward
 */
DetailReportItem.prototype['ppvz_reward'] = undefined;

/**
 * Возмещение расходов по эквайрингу. <br>Расходы WB на услуги эквайринга: вычитаются из вознаграждения WB и не влияют на доход продавца. 
 * @member {Number} acquiring_fee
 */
DetailReportItem.prototype['acquiring_fee'] = undefined;

/**
 * Наименование банка, предоставляющего услуги эквайринга
 * @member {String} acquiring_bank
 */
DetailReportItem.prototype['acquiring_bank'] = undefined;

/**
 * Вознаграждение WB без НДС
 * @member {Number} ppvz_vw
 */
DetailReportItem.prototype['ppvz_vw'] = undefined;

/**
 * НДС с вознаграждения WB
 * @member {Number} ppvz_vw_nds
 */
DetailReportItem.prototype['ppvz_vw_nds'] = undefined;

/**
 * Номер офиса
 * @member {Number} ppvz_office_id
 */
DetailReportItem.prototype['ppvz_office_id'] = undefined;

/**
 * Наименование офиса доставки
 * @member {String} ppvz_office_name
 */
DetailReportItem.prototype['ppvz_office_name'] = undefined;

/**
 * Номер партнера
 * @member {Number} ppvz_supplier_id
 */
DetailReportItem.prototype['ppvz_supplier_id'] = undefined;

/**
 * Партнер
 * @member {String} ppvz_supplier_name
 */
DetailReportItem.prototype['ppvz_supplier_name'] = undefined;

/**
 * ИНН партнера
 * @member {String} ppvz_inn
 */
DetailReportItem.prototype['ppvz_inn'] = undefined;

/**
 * Номер таможенной декларации
 * @member {String} declaration_number
 */
DetailReportItem.prototype['declaration_number'] = undefined;

/**
 * Обоснование штрафов и доплат. <br> Поле будет в ответе, если заполнены(о) поля `penalty` или `additional_payment`. 
 * @member {String} bonus_type_name
 */
DetailReportItem.prototype['bonus_type_name'] = undefined;

/**
 * Цифровое значение стикера, который клеится на товар в процессе сборки заказа по системе Маркетплейс.
 * @member {String} sticker_id
 */
DetailReportItem.prototype['sticker_id'] = undefined;

/**
 * Страна продажи
 * @member {String} site_country
 */
DetailReportItem.prototype['site_country'] = undefined;

/**
 * Штрафы
 * @member {Number} penalty
 */
DetailReportItem.prototype['penalty'] = undefined;

/**
 * Доплаты
 * @member {Number} additional_payment
 */
DetailReportItem.prototype['additional_payment'] = undefined;

/**
 * Уникальный идентификатор заказа, функционально аналогичный `odid`/`rid`.  Данный параметр введен в июле'22 и в течение переходного периода может быть заполнен не во всех ответах. Примечание для работающих по системе Маркетплейс: `srid` равен `rid` в ответе на метод `GET /api/v2/orders`. 
 * @member {String} srid
 */
DetailReportItem.prototype['srid'] = undefined;






export default DetailReportItem;

