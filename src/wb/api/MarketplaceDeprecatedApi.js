/**
 * API продавца
 * # Общее описание <style> .version {   border: 0.1rem #b3b3b3 solid;   background-color: #F9F9F9;   color: #32329FE6;   height: 25px;   width: 150px;   text-align: center }, </style> <style> .warning {   border: 1.6rem #b3b3b3 solid;   background-color: #F9F9F9;   color: #247706;   text-align: center } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной проверки API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul>  ## Поддержка <br> Техническая поддержка осуществляется через обращения в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> Также готовятся к публикации Release Notes по API на сайте.  После их выхода будет сделан соответствующий анонс.   ## Авторизация Авторизация осуществляется по ключам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к новому API](https://seller.wildberries.ru/supplier-settings/access-to-new-api). <br>Обратите внимание, что ключ отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный ключ следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br>Внимание! Изменился домен для методов статистики, актуальный: https://statistics-api.wildberries.ru ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> ## Release Notes #### 2022.12.21 v1.6 Добавлена инструкция по загрузке статистики в Excel #### 2022.12.15 v1.5  Новая авторизация для методов API статистики 2022.12.15 в v1.5: #### 2022.10.31 v1.4  Метод будет отключен 2022.10.31 в v1.4: <ul> <li> `/content/v1/cards/list` </ul>  #### 2022.09.20 v1.2  В связи с переходом на новое API Контента старые методы будут отключены. К их числу относятся: <ul> <li> `/card/_*` <li> `/api/v1/config/_*` <li> `/api/v1/directory/_*` </ul> Данные методы теперь возвращают код 404.  Новое API Контента описано в данном документе в разделах Контент / * 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../../ApiClient";
import ApiV2OrdersGet200Response from '../model/ApiV2OrdersGet200Response';
import ApiV2OrdersGet400Response from '../model/ApiV2OrdersGet400Response';
import ApiV2OrdersGetRequestInner from '../model/ApiV2OrdersGetRequestInner';
import ApiV2OrdersStickersPdfPost200Response from '../model/ApiV2OrdersStickersPdfPost200Response';
import ApiV2OrdersStickersPost200Response from '../model/ApiV2OrdersStickersPost200Response';
import ApiV2StocksDelete200Response from '../model/ApiV2StocksDelete200Response';
import ApiV2StocksDelete200Response1 from '../model/ApiV2StocksDelete200Response1';
import ApiV2StocksDelete200Response2 from '../model/ApiV2StocksDelete200Response2';
import ApiV2StocksDeleteRequestInner from '../model/ApiV2StocksDeleteRequestInner';
import ApiV2StocksDeleteRequestInner1 from '../model/ApiV2StocksDeleteRequestInner1';
import ApiV2SuppliesGet200Response from '../model/ApiV2SuppliesGet200Response';
import ApiV2SuppliesGet201Response from '../model/ApiV2SuppliesGet201Response';
import ApiV2SuppliesGet400Response from '../model/ApiV2SuppliesGet400Response';
import ApiV2SuppliesGet409Response from '../model/ApiV2SuppliesGet409Response';
import ApiV2SuppliesIdBarcodeGet200Response from '../model/ApiV2SuppliesIdBarcodeGet200Response';
import ApiV2SuppliesIdOrdersGet200Response from '../model/ApiV2SuppliesIdOrdersGet200Response';
import ApiV2SuppliesIdPutRequest from '../model/ApiV2SuppliesIdPutRequest';
import RequestBodyStickers from '../model/RequestBodyStickers';
import RespBodyStocks from '../model/RespBodyStocks';
import ResponseBodyStickersError from '../model/ResponseBodyStickersError';
import SuppliesIdRespBody from '../model/SuppliesIdRespBody';
import SuppliesIdRespBody2 from '../model/SuppliesIdRespBody2';

/**
* MarketplaceDeprecated service.
* @module api/MarketplaceDeprecatedApi
* @version 1.6
*/
export default class MarketplaceDeprecatedApi {

    /**
    * Constructs a new MarketplaceDeprecatedApi. 
    * @alias module:api/MarketplaceDeprecatedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2OrdersGet operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2OrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2OrdersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список сборочных заданий
     * Метод возвращает список сборочных заданий поставщика. <br> <br> При выборе промежутка времени заказы следует забирать с помощью параметров `skip` и `take`, не более чем 1000 за один запрос. Параметр `total` подсказывает, сколько всего заказов было сделано за текущий промежуток времени. <br> <br> При отправке параметров `date_start` и `date_end` обратите внимание, что часовой пояс в формате <b>RFC3339</b> передается как `2021-09-30T17:14:52+03:00`, а время в UTC как `2021-09-30T17:14:52Z`. В то же время, знак `+` является зарезервированным в стандарте <b>RFC3986</b>. Поэтому чтобы корректно передать часовой пояс, необходимо передавать дату после обработки методом urlencode (или его аналогом). <br> <br> Ответ содержит два разных поля о статусе заказа (см. описание в схеме ответа): <ul>   <li>`status` - это то что меняет поставщик (метод <b>PUT /api/v2/orders</b>). Он учитывается для расчета опозданий и используется для отображения движения заказа.</li>   <li>`userStatus` - используется только для чтения, менять его нельзя. Это статус со стороны клиента. По нему можно понять, делал ли клиент отмену или возврат по причине брака.</li> </ul> 
     * @param {String} dateStart С какой даты вернуть сборочные задания (заказы). <br>Дата в формате RFC3339. Нужно передать дату со временем. <br>Время можно указывать с точностью до секунд или миллисекунд. <br>Литера `Z` в конце строки означает, что время передается в UTC-часовом поясе. <br>Примеры: <ul> <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T00:00:00.12345Z` </ul> 
     * @param {Number} skip Сколько записей пропустить.
     * @param {Number} take Сколько записей вернуть за раз.
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateEnd По какую дату вернуть сборочные задания (заказы) (в формате `RFC3339`)
     * @param {Number} opts.status Статус заказа.
     * @param {Number} opts.id Идентификатор сборочного задания, если нужно получить данные по определенному заказу.
     * @param {module:api/MarketplaceDeprecatedApi~apiV2OrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2OrdersGet200Response}
     */
    apiV2OrdersGet(dateStart, skip, take, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dateStart' is set
      if (dateStart === undefined || dateStart === null) {
        throw new Error("Missing the required parameter 'dateStart' when calling apiV2OrdersGet");
      }
      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling apiV2OrdersGet");
      }
      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling apiV2OrdersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'date_start': dateStart,
        'date_end': opts['dateEnd'],
        'status': opts['status'],
        'skip': skip,
        'take': take,
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2OrdersGet200Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2OrdersPut operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2OrdersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление статуса сборочных заданий
     * Метод обновляет статус переданных сборочных заданий. <br> <br> <h2>Порядок работы со статусами для разного типа логистики</h2> Если заказ для любого типа логистики не может быть выполнен по любой причине, поставщик ставит статус <b>3 (\"Отклонено\")</b>.Переводить заказ в отмену можно из любого статуса, кроме конечного. Т.е. заказ в статусах <b>2 (\"Собрано\")</b>, <b>6 (\"Клиент получил товар\")</b>, <b>7 (\"Клиент не принял заказ\")</b> отменить уже нельзя. <h3>Доставка на склад WB.</h3>   <ul>     <li>Заказ приходит в статусе <b>0 (\"Новый\")</b>.</li>     <li>Поставщик принимает заказ и ставит статус <b>1 (\"В работе\")</b>.</li>     <li>Заказ собран, поставщик ставит статус <b>2 (\"Завершено\")</b>. После этого заказ должен быть доставлен на склад Wildberries в указанный срок.</li>   </ul> <h3>Доставка самостоятельно до клиента.</h3>    <ul>     <li>Заказ приходит в статусе <b>0 (\"Новый\")</b>.</li>     <li>Поставщик принимает заказ и ставит статус <b>1 (\"В работе\")</b>.</li>     <li>Если заказ собран и его передали курьеру, поставщик ставит статус <b>5 (\"Доставка курьером\")</b>.</li>     <li>Если заказ успешно доставлен клиенту, поставщик ставит статус <b>6 (\"Клиент принял заказ\")</b>.</li>     <li>Если клиент отказался от заказа, т.е. курьер не отдал его, поставщик ставит статус <b>7 (\"Клиент не принял заказ\")</b>.</li>   </ul> <h3>Самовывоз клиентом из магазина.</h3>   <ul>     <li>Заказ приходит в статусе <b>0 (\"Новый\")</b>.</li>     <li>Поставщик принимает заказ и ставит статус <b>1 (\"В работе\")</b>.</li>     <li>Когда заказ готов к выдаче, поставщик статус <b>9 (\"Готово к выдаче\")</b>.</li>     <li>Если клиент забрал заказ из точки самовывоза, поставщик ставит статус <b>6 (\"Клиент забрал заказ\")</b>.</li>     <li>Если клиент отказался от заказа, поставщик ставит статус <b> 7 (\"Клиент не принял заказ\")</b>.</li>   </ul> <h3>Отправка КИЗов товара.</h3>   <ul>     <li>Требуется только для фармацевтической продукции. При отправке КИЗов на заказы, где они не требуются, вернётся ошибка 400.</li>     <li>Отправлять КИЗЫ нужно при переводе заказов в статус <b>6 (\"Клиент забрал заказ\")</b>.</li>   </ul> 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ApiV2OrdersGetRequestInner>} opts.apiV2OrdersGetRequestInner 
     * @param {module:api/MarketplaceDeprecatedApi~apiV2OrdersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2OrdersPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV2OrdersGetRequestInner'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/orders', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2OrdersStickersPdfPost operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2OrdersStickersPdfPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2OrdersStickersPdfPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cписок QR стикеров в формате pdf
     * Ограничения при работе с методом. <ul>   <li>Нельзя запросить больше 1000 этикеток за раз (не более 1000 ID заказов в запросе).</li>   <li>Метод возвращает этикетки только для заказов, взятых в работу (в статусе 1 и дальше).</li> </ul> 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestBodyStickers} opts.requestBodyStickers 
     * @param {module:api/MarketplaceDeprecatedApi~apiV2OrdersStickersPdfPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2OrdersStickersPdfPost200Response}
     */
    apiV2OrdersStickersPdfPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBodyStickers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV2OrdersStickersPdfPost200Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/orders/stickers/pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2OrdersStickersPost operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2OrdersStickersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2OrdersStickersPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cписок этикеток сборочных заданий
     * Возвращает список QR этикеток по переданному массиву сборочных заданий. <h3>Ограничения при работе с методом.</h3> <ol>   <li>Нельзя запросить больше 1000 этикеток за раз (не более 1000 ID заказов в запросе).</li>   <li>Метод возвращает этикетки только для заказов, взятых в работу (в статусе 1 и дальше).</li> <ol> 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestBodyStickers} opts.requestBodyStickers 
     * @param {module:api/MarketplaceDeprecatedApi~apiV2OrdersStickersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2OrdersStickersPost200Response}
     */
    apiV2OrdersStickersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBodyStickers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV2OrdersStickersPost200Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/orders/stickers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2StocksDelete operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2StocksDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2StocksDelete200Response2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удаление остатков товара
     * Удаление остатков товара. <b>Внимание! Действие необратимо</b>. Удаленный остаток будет необходимо загрузить повторно для возобновления продаж. 
     * @param {Array.<module:model/ApiV2StocksDeleteRequestInner1>} apiV2StocksDeleteRequestInner1 
     * @param {module:api/MarketplaceDeprecatedApi~apiV2StocksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2StocksDelete200Response2}
     */
    apiV2StocksDelete(apiV2StocksDeleteRequestInner1, opts, callback) {
      opts = opts || {};
      let postBody = apiV2StocksDeleteRequestInner1;
      // verify the required parameter 'apiV2StocksDeleteRequestInner1' is set
      if (apiV2StocksDeleteRequestInner1 === undefined || apiV2StocksDeleteRequestInner1 === null) {
        throw new Error("Missing the required parameter 'apiV2StocksDeleteRequestInner1' when calling apiV2StocksDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV2StocksDelete200Response2;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/stocks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2StocksGet operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2StocksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2StocksDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список товаров с остатками
     * Возвращает список товаров поставщика с их остатками.
     * @param {Number} skip Сколько записей пропустить (для пагинации).
     * @param {Number} take Сколько записей выдать (для пагинации).
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Поиск по всем полям таблицы.
     * @param {module:api/MarketplaceDeprecatedApi~apiV2StocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2StocksDelete200Response}
     */
    apiV2StocksGet(skip, take, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling apiV2StocksGet");
      }
      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling apiV2StocksGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'skip': skip,
        'take': take
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2StocksDelete200Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/stocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2StocksPost operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2StocksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2StocksDelete200Response1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление остатков товара
     * Обновление остатков товара.  <br> За раз можно загрузить `1000` строк. 
     * @param {Array.<module:model/ApiV2StocksDeleteRequestInner>} apiV2StocksDeleteRequestInner 
     * @param {module:api/MarketplaceDeprecatedApi~apiV2StocksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2StocksDelete200Response1}
     */
    apiV2StocksPost(apiV2StocksDeleteRequestInner, opts, callback) {
      opts = opts || {};
      let postBody = apiV2StocksDeleteRequestInner;
      // verify the required parameter 'apiV2StocksDeleteRequestInner' is set
      if (apiV2StocksDeleteRequestInner === undefined || apiV2StocksDeleteRequestInner === null) {
        throw new Error("Missing the required parameter 'apiV2StocksDeleteRequestInner' when calling apiV2StocksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV2StocksDelete200Response1;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/stocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SuppliesGet operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2SuppliesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2SuppliesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список поставок
     * Список поставок.
     * @param {module:model/String} status `ACTIVE` - активные поставки, `ON_DELIVERY` - поставки в пути (которые ещё не приняты на складе).
     * @param {module:api/MarketplaceDeprecatedApi~apiV2SuppliesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2SuppliesGet200Response}
     */
    apiV2SuppliesGet(status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling apiV2SuppliesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'status': status
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2SuppliesGet200Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/supplies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SuppliesIdBarcodeGet operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdBarcodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2SuppliesIdBarcodeGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Штрихкод поставки в заданном формате
     * Возвращает штрихкод поставки в заданном формате: <b>pdf</b> или <b>svg</b>. <br> Штрихкод генерируется в формате <b>code-128</b>. <br> Массив байтов передаётся закодированным в <b>base64</b>. 
     * @param {module:model/String} type Формат штрихкода.
     * @param {String} id Идентификатор поставки.
     * @param {module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdBarcodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2SuppliesIdBarcodeGet200Response}
     */
    apiV2SuppliesIdBarcodeGet(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling apiV2SuppliesIdBarcodeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2SuppliesIdBarcodeGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2SuppliesIdBarcodeGet200Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/supplies/{id}/barcode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SuppliesIdClosePost operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdClosePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Закрытие поставки
     * Закрывает поставку. <br> Для закрытия поставки требуется хотя бы один закреплённый за ней заказ. <br> После закрытия к поставке нельзя будет добавить новые заказы. 
     * @param {String} id Идентификатор поставки.
     * @param {module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2SuppliesIdClosePost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2SuppliesIdClosePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/supplies/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SuppliesIdOrdersGet operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2SuppliesIdOrdersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список заказов, закреплённых за поставкой
     * Список заказов, закреплённых за поставкой.
     * @param {String} id Идентификатор поставки.
     * @param {module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2SuppliesIdOrdersGet200Response}
     */
    apiV2SuppliesIdOrdersGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2SuppliesIdOrdersGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2SuppliesIdOrdersGet200Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/supplies/{id}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SuppliesIdPut operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавление к поставке заказов
     * Добавляет к поставке заказы и переводит их в статус 1 (\"В сборке\"). 
     * @param {String} id Идентификатор поставки.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV2SuppliesIdPutRequest} opts.apiV2SuppliesIdPutRequest 
     * @param {module:api/MarketplaceDeprecatedApi~apiV2SuppliesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2SuppliesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV2SuppliesIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2SuppliesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/supplies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SuppliesPost operation.
     * @callback module:api/MarketplaceDeprecatedApi~apiV2SuppliesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2SuppliesGet201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Новая поставка
     * Создание новой поставки. <br> <br> Ограничения работы с поставками: <ul>   <li>При добавлении в поставку все заказы в статусе <b>0 (новый)</b> будут автоматически переведены в статус <b>1 (в работе)</b>.</li>   <li>Вы можете как обычно переводить статусы вручную отдельными вызовами на <b>PUT /api/v2/orders</b>.</li>   <li>Обратите внимание, что если вы переведёте заказ в статус <b>3 (\"Отмена\")</b>, то заказ автоматически удалится из поставки, если был прикреплён к ней.</li> </ul> Порядок работы: <ol>   <li>Создайте новую поставку с помощью метода <b>POST /api/v2/supplies</b>. В ответ вернется идентификатор созданной поставки в формате <b>\"WB-GI-1234567\"</b>.</li>   <li>Штрихкод поставки можно получить методом <b>GET /api/v2/supplies/{id поставки}/barcode</b> в формате <b>pdf</b> или <b>svg</b>. Штрихкод генерируется в формате code-128. Файл приходит в массиве байтов, закодированном в base64.</li>   <li>В текущую открытую поставку нужно добавить заказы, которые вы повезёте на склад, методом <b>PUT /api/v2/supplies/{id поставки}</b>. Обратите внимание, что при добавлении заказов к поставке они будут автоматически приняты в работу, т.е. переведены в статус 1.</li>   <li>После добавления заказов к поставке, вы можете получить этикетки с помощью метода <b>POST /api/v2/orders/stickers</b>. Обратите внимание, что стикеры для заказа можно получить только в промежуток между открытием и закрытием соответствующей поставки.</li>   <li>После того как поставка будет упомплектована нужными заказами, необходимо ее закрыть с помощью метода <b>POST /api/v2/supplies/{id поставки}/close</b>.</li>   <li>Заказы, добавленные к поставке, можно получить методом <b>GET /api/v2/supplies/{id поставки}/orders</b>.</li>   <li>Все активные поставки, а также поставки в пути, можно получить методом <b>GET /api/v2/supplies</b>.</li> </ol> 
     * @param {module:api/MarketplaceDeprecatedApi~apiV2SuppliesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2SuppliesGet201Response}
     */
    apiV2SuppliesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2SuppliesGet201Response;
      let basePaths = ['https://suppliers-api.wildberries.ru'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/supplies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
