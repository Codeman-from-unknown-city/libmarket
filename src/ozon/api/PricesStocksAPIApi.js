/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductImportProductsPricesRequest from '../model/ProductImportProductsPricesRequest';
import ProductImportProductsPricesResponse from '../model/ProductImportProductsPricesResponse';
import ProductImportProductsStocksRequest from '../model/ProductImportProductsStocksRequest';
import ProductImportProductsStocksResponse from '../model/ProductImportProductsStocksResponse';
import Productsv1GetProductInfoStocksByWarehouseFbsRequest from '../model/Productsv1GetProductInfoStocksByWarehouseFbsRequest';
import Productsv1GetProductInfoStocksByWarehouseFbsResponse from '../model/Productsv1GetProductInfoStocksByWarehouseFbsResponse';
import Productv2ProductsStocksRequest from '../model/Productv2ProductsStocksRequest';
import Productv2ProductsStocksResponse from '../model/Productv2ProductsStocksResponse';
import Productv3GetProductInfoStocksV3Request from '../model/Productv3GetProductInfoStocksV3Request';
import Productv3GetProductInfoStocksV3Response from '../model/Productv3GetProductInfoStocksV3Response';
import Productv4GetProductInfoPricesV4Request from '../model/Productv4GetProductInfoPricesV4Request';
import Productv4GetProductInfoPricesV4Response from '../model/Productv4GetProductInfoPricesV4Response';
import RpcStatus from '../model/RpcStatus';
import V1GetProductInfoDiscountedRequest from '../model/V1GetProductInfoDiscountedRequest';
import V1GetProductInfoDiscountedResponse from '../model/V1GetProductInfoDiscountedResponse';

/**
* PricesStocksAPI service.
* @module api/PricesStocksAPIApi
* @version 2.1
*/
export default class PricesStocksAPIApi {

    /**
    * Constructs a new PricesStocksAPIApi. 
    * @alias module:api/PricesStocksAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productAPIGetProductInfoDiscounted operation.
     * @callback module:api/PricesStocksAPIApi~productAPIGetProductInfoDiscountedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetProductInfoDiscountedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Узнать информацию об уценке и основном товаре по SKU уценённого товара
     * Метод для получения информации о состоянии и дефектах уценённого товара по его SKU. Также метод возвращает SKU основного товара.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1GetProductInfoDiscountedRequest} v1GetProductInfoDiscountedRequest 
     * @param {module:api/PricesStocksAPIApi~productAPIGetProductInfoDiscountedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetProductInfoDiscountedResponse}
     */
    productAPIGetProductInfoDiscounted(clientId, apiKey, v1GetProductInfoDiscountedRequest, callback) {
      let postBody = v1GetProductInfoDiscountedRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoDiscounted");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoDiscounted");
      }
      // verify the required parameter 'v1GetProductInfoDiscountedRequest' is set
      if (v1GetProductInfoDiscountedRequest === undefined || v1GetProductInfoDiscountedRequest === null) {
        throw new Error("Missing the required parameter 'v1GetProductInfoDiscountedRequest' when calling productAPIGetProductInfoDiscounted");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetProductInfoDiscountedResponse;
      return this.apiClient.callApi(
        '/v1/product/info/discounted', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductInfoPricesV4 operation.
     * @callback module:api/PricesStocksAPIApi~productAPIGetProductInfoPricesV4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv4GetProductInfoPricesV4Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию о цене товара
     * В запросе вы можете передать максимум 1000 товаров.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv4GetProductInfoPricesV4Request} productv4GetProductInfoPricesV4Request 
     * @param {module:api/PricesStocksAPIApi~productAPIGetProductInfoPricesV4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv4GetProductInfoPricesV4Response}
     */
    productAPIGetProductInfoPricesV4(clientId, apiKey, productv4GetProductInfoPricesV4Request, callback) {
      let postBody = productv4GetProductInfoPricesV4Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoPricesV4");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoPricesV4");
      }
      // verify the required parameter 'productv4GetProductInfoPricesV4Request' is set
      if (productv4GetProductInfoPricesV4Request === undefined || productv4GetProductInfoPricesV4Request === null) {
        throw new Error("Missing the required parameter 'productv4GetProductInfoPricesV4Request' when calling productAPIGetProductInfoPricesV4");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv4GetProductInfoPricesV4Response;
      return this.apiClient.callApi(
        '/v4/product/info/prices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductInfoStocksV3 operation.
     * @callback module:api/PricesStocksAPIApi~productAPIGetProductInfoStocksV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv3GetProductInfoStocksV3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация о количестве товаров
     * Возвращает информацию о ĸоличестве товаров на сĸладах:   - сĸольĸо единиц есть в наличии,   - сĸольĸо зарезервировано поĸупателями. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv3GetProductInfoStocksV3Request} productv3GetProductInfoStocksV3Request 
     * @param {module:api/PricesStocksAPIApi~productAPIGetProductInfoStocksV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv3GetProductInfoStocksV3Response}
     */
    productAPIGetProductInfoStocksV3(clientId, apiKey, productv3GetProductInfoStocksV3Request, callback) {
      let postBody = productv3GetProductInfoStocksV3Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoStocksV3");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoStocksV3");
      }
      // verify the required parameter 'productv3GetProductInfoStocksV3Request' is set
      if (productv3GetProductInfoStocksV3Request === undefined || productv3GetProductInfoStocksV3Request === null) {
        throw new Error("Missing the required parameter 'productv3GetProductInfoStocksV3Request' when calling productAPIGetProductInfoStocksV3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv3GetProductInfoStocksV3Response;
      return this.apiClient.callApi(
        '/v3/product/info/stocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIImportProductsPrices operation.
     * @callback module:api/PricesStocksAPIApi~productAPIImportProductsPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImportProductsPricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновить цену
     * Позволяет изменить цену одного или нескольких товаров. За один запрос можно изменить цены для 1000 товаров. Чтобы сбросить `old_price` или `premium_price` — поставьте `0` у этих параметров.  Новая цена должна отличаться от старой минимум на 5%. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductImportProductsPricesRequest} opts.productImportProductsPricesRequest 
     * @param {module:api/PricesStocksAPIApi~productAPIImportProductsPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImportProductsPricesResponse}
     */
    productAPIImportProductsPrices(clientId, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['productImportProductsPricesRequest'];
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIImportProductsPrices");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIImportProductsPrices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductImportProductsPricesResponse;
      return this.apiClient.callApi(
        '/v1/product/import/prices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIImportProductsStocks operation.
     * @callback module:api/PricesStocksAPIApi~productAPIImportProductsStocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImportProductsStocksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновить остатки
     * Позволяет изменить информацию о количестве товара в наличии. Метод используется только для FBS и rFBS складов.  За один запрос можно изменить наличие для 100 товаров. В минуту можно отправить до 80 запросов.   Задать наличие товара возможно только после того, как его статус сменится на `processed`. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductImportProductsStocksRequest} opts.productImportProductsStocksRequest 
     * @param {module:api/PricesStocksAPIApi~productAPIImportProductsStocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImportProductsStocksResponse}
     */
    productAPIImportProductsStocks(clientId, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['productImportProductsStocksRequest'];
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIImportProductsStocks");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIImportProductsStocks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductImportProductsStocksResponse;
      return this.apiClient.callApi(
        '/v1/product/import/stocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIProductStocksByWarehouseFbs operation.
     * @callback module:api/PricesStocksAPIApi~productAPIProductStocksByWarehouseFbsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Productsv1GetProductInfoStocksByWarehouseFbsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация об остатках на складах продавца (FBS и rFBS)
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productsv1GetProductInfoStocksByWarehouseFbsRequest} productsv1GetProductInfoStocksByWarehouseFbsRequest 
     * @param {module:api/PricesStocksAPIApi~productAPIProductStocksByWarehouseFbsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productsv1GetProductInfoStocksByWarehouseFbsResponse}
     */
    productAPIProductStocksByWarehouseFbs(clientId, apiKey, productsv1GetProductInfoStocksByWarehouseFbsRequest, callback) {
      let postBody = productsv1GetProductInfoStocksByWarehouseFbsRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIProductStocksByWarehouseFbs");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIProductStocksByWarehouseFbs");
      }
      // verify the required parameter 'productsv1GetProductInfoStocksByWarehouseFbsRequest' is set
      if (productsv1GetProductInfoStocksByWarehouseFbsRequest === undefined || productsv1GetProductInfoStocksByWarehouseFbsRequest === null) {
        throw new Error("Missing the required parameter 'productsv1GetProductInfoStocksByWarehouseFbsRequest' when calling productAPIProductStocksByWarehouseFbs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productsv1GetProductInfoStocksByWarehouseFbsResponse;
      return this.apiClient.callApi(
        '/v1/product/info/stocks-by-warehouse/fbs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIProductsStocksV2 operation.
     * @callback module:api/PricesStocksAPIApi~productAPIProductsStocksV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2ProductsStocksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновить количество товаров на складах
     * Позволяет изменить информацию о количестве товара в наличии.  За один запрос можно изменить наличие для 100 товаров. В минуту можно отправить до 80 запросов.  <aside class=\"warning\">Обновлять остатки товара на одном складе можно только 1 раз в 2 минуты, иначе в ответе будет ошибка <code>TOO_MANY_REQUESTS</code>.</aside>  Задать наличие товара возможно только после того, как его статус сменится на `processed`.  Остатки крупногабаритных товаров можно обновлять только на предназначенных для них складах. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv2ProductsStocksRequest} productv2ProductsStocksRequest 
     * @param {module:api/PricesStocksAPIApi~productAPIProductsStocksV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2ProductsStocksResponse}
     */
    productAPIProductsStocksV2(clientId, apiKey, productv2ProductsStocksRequest, callback) {
      let postBody = productv2ProductsStocksRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIProductsStocksV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIProductsStocksV2");
      }
      // verify the required parameter 'productv2ProductsStocksRequest' is set
      if (productv2ProductsStocksRequest === undefined || productv2ProductsStocksRequest === null) {
        throw new Error("Missing the required parameter 'productv2ProductsStocksRequest' when calling productAPIProductsStocksV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2ProductsStocksResponse;
      return this.apiClient.callApi(
        '/v2/products/stocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
