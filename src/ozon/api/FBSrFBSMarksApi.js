/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Fbsv4FbsPostingShipV4Request from '../model/Fbsv4FbsPostingShipV4Request';
import Fbsv4FbsPostingShipV4Response from '../model/Fbsv4FbsPostingShipV4Response';
import Fbsv4GetProductExemplarStatusRequest from '../model/Fbsv4GetProductExemplarStatusRequest';
import Fbsv4GetProductExemplarStatusResponse from '../model/Fbsv4GetProductExemplarStatusResponse';
import Fbsv4SetProductExemplarRequest from '../model/Fbsv4SetProductExemplarRequest';
import Fbsv4SetProductExemplarResponse from '../model/Fbsv4SetProductExemplarResponse';
import Postingv4FbsPostingProductExemplarValidateRequest from '../model/Postingv4FbsPostingProductExemplarValidateRequest';
import Postingv4FbsPostingProductExemplarValidateResponse from '../model/Postingv4FbsPostingProductExemplarValidateResponse';
import RpcStatus from '../model/RpcStatus';

/**
* FBSrFBSMarks service.
* @module api/FBSrFBSMarksApi
* @version 2.1
*/
export default class FBSrFBSMarksApi {

    /**
    * Constructs a new FBSrFBSMarksApi. 
    * @alias module:api/FBSrFBSMarksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postingAPIFbsPostingProductExemplarValidate operation.
     * @callback module:api/FBSrFBSMarksApi~postingAPIFbsPostingProductExemplarValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Postingv4FbsPostingProductExemplarValidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Валидация кодов маркировки
     * Метод для проверки кодов на соответствие требованиям системы «Честный ЗНАК» по количеству и составу символов.  Если у вас нет номера грузовой таможенной декларации (ГТД), вы можете его не указывать. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Postingv4FbsPostingProductExemplarValidateRequest} postingv4FbsPostingProductExemplarValidateRequest 
     * @param {module:api/FBSrFBSMarksApi~postingAPIFbsPostingProductExemplarValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Postingv4FbsPostingProductExemplarValidateResponse}
     */
    postingAPIFbsPostingProductExemplarValidate(clientId, apiKey, postingv4FbsPostingProductExemplarValidateRequest, callback) {
      let postBody = postingv4FbsPostingProductExemplarValidateRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIFbsPostingProductExemplarValidate");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIFbsPostingProductExemplarValidate");
      }
      // verify the required parameter 'postingv4FbsPostingProductExemplarValidateRequest' is set
      if (postingv4FbsPostingProductExemplarValidateRequest === undefined || postingv4FbsPostingProductExemplarValidateRequest === null) {
        throw new Error("Missing the required parameter 'postingv4FbsPostingProductExemplarValidateRequest' when calling postingAPIFbsPostingProductExemplarValidate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Postingv4FbsPostingProductExemplarValidateResponse;
      return this.apiClient.callApi(
        '/v4/fbs/posting/product/exemplar/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetProductExemplarStatus operation.
     * @callback module:api/FBSrFBSMarksApi~postingAPIGetProductExemplarStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fbsv4GetProductExemplarStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить статус проверки экземпляров
     * Метод для получения статусов проверки экземпляров, переданных в методе [/v4/fbs/posting/product/exemplar/set](#operation/PostingAPI_SetProductExemplar).  Также возвращает данные по этим экземплярам. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Fbsv4GetProductExemplarStatusRequest} fbsv4GetProductExemplarStatusRequest 
     * @param {module:api/FBSrFBSMarksApi~postingAPIGetProductExemplarStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fbsv4GetProductExemplarStatusResponse}
     */
    postingAPIGetProductExemplarStatus(clientId, apiKey, fbsv4GetProductExemplarStatusRequest, callback) {
      let postBody = fbsv4GetProductExemplarStatusRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetProductExemplarStatus");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetProductExemplarStatus");
      }
      // verify the required parameter 'fbsv4GetProductExemplarStatusRequest' is set
      if (fbsv4GetProductExemplarStatusRequest === undefined || fbsv4GetProductExemplarStatusRequest === null) {
        throw new Error("Missing the required parameter 'fbsv4GetProductExemplarStatusRequest' when calling postingAPIGetProductExemplarStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Fbsv4GetProductExemplarStatusResponse;
      return this.apiClient.callApi(
        '/v4/fbs/posting/product/exemplar/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPISetProductExemplar operation.
     * @callback module:api/FBSrFBSMarksApi~postingAPISetProductExemplarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fbsv4SetProductExemplarResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Проверить и сохранить данные экземпляров
     * Асинхронный метод: - для проверки наличия экземпляров в обороте в системе «Честный ЗНАК»; - для сохранения данных экземпляров.   Чтобы получить результаты проверок, используйте метод [/v4/fbs/posting/product/exemplar/status](#operation/PostingAPI_GetProductExemplarStatus).  При необходимости укажите номер грузовой таможенной декларации в параметре `gtd`. Если его нет, передайте значение `is_gtd_absent = true`.  Если у вас несколько одинаковых товаров в отправлении, укажите один `product_id` и массив `exemplars` для каждого товара из отправления.  Всегда передавайте полный набор данных по экземплярам и продуктам.   Например, в вашей системе 10 экземпляров. Вы передали их для проверки и сохранения. Потом добавили в своей системе ещё 60 экземпляров. При повторной передаче экземпляров для проверки и сохранения укажите все экземпляры: и старые, и только что добавленные. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Fbsv4SetProductExemplarRequest} fbsv4SetProductExemplarRequest 
     * @param {module:api/FBSrFBSMarksApi~postingAPISetProductExemplarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fbsv4SetProductExemplarResponse}
     */
    postingAPISetProductExemplar(clientId, apiKey, fbsv4SetProductExemplarRequest, callback) {
      let postBody = fbsv4SetProductExemplarRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPISetProductExemplar");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPISetProductExemplar");
      }
      // verify the required parameter 'fbsv4SetProductExemplarRequest' is set
      if (fbsv4SetProductExemplarRequest === undefined || fbsv4SetProductExemplarRequest === null) {
        throw new Error("Missing the required parameter 'fbsv4SetProductExemplarRequest' when calling postingAPISetProductExemplar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Fbsv4SetProductExemplarResponse;
      return this.apiClient.callApi(
        '/v4/fbs/posting/product/exemplar/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIShipFbsPostingV4 operation.
     * @callback module:api/FBSrFBSMarksApi~postingAPIShipFbsPostingV4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Fbsv4FbsPostingShipV4Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Собрать заказ (версия 4)
     * Делит заказ на отправления и переводит его в статус `awaiting_deliver`.  Каждый элемент в `packages` может содержать несколько элементов `products` или отправлений.  Каждый элемент в `products` — это товар, включённый в данное отправление.  Разделить заказ нужно, если:   - товары не помещаются в одну упаковку,   - товары нельзя сложить в одну упаковку.  Отличается от [/v3/posting/fbs/ship](#operation/PostingAPI_ShipFbsPostingV3) отсутствием передачи информации по экземплярам в запросе. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Fbsv4FbsPostingShipV4Request} fbsv4FbsPostingShipV4Request 
     * @param {module:api/FBSrFBSMarksApi~postingAPIShipFbsPostingV4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fbsv4FbsPostingShipV4Response}
     */
    postingAPIShipFbsPostingV4(clientId, apiKey, fbsv4FbsPostingShipV4Request, callback) {
      let postBody = fbsv4FbsPostingShipV4Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIShipFbsPostingV4");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIShipFbsPostingV4");
      }
      // verify the required parameter 'fbsv4FbsPostingShipV4Request' is set
      if (fbsv4FbsPostingShipV4Request === undefined || fbsv4FbsPostingShipV4Request === null) {
        throw new Error("Missing the required parameter 'fbsv4FbsPostingShipV4Request' when calling postingAPIShipFbsPostingV4");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Fbsv4FbsPostingShipV4Response;
      return this.apiClient.callApi(
        '/v4/posting/fbs/ship', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
