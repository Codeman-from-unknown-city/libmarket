/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductBooleanResponse from '../model/ProductBooleanResponse';
import ProductGetImportProductsInfoRequest from '../model/ProductGetImportProductsInfoRequest';
import ProductGetImportProductsInfoResponse from '../model/ProductGetImportProductsInfoResponse';
import ProductGetProductInfoDescriptionRequest from '../model/ProductGetProductInfoDescriptionRequest';
import ProductGetProductInfoDescriptionResponse from '../model/ProductGetProductInfoDescriptionResponse';
import ProductImportProductsBySKURequest from '../model/ProductImportProductsBySKURequest';
import ProductImportProductsBySKUResponse from '../model/ProductImportProductsBySKUResponse';
import ProductProductArchiveRequest from '../model/ProductProductArchiveRequest';
import ProductProductUnarchiveRequest from '../model/ProductProductUnarchiveRequest';
import Productv1ProductImportPicturesRequest from '../model/Productv1ProductImportPicturesRequest';
import Productv1ProductInfoPicturesRequest from '../model/Productv1ProductInfoPicturesRequest';
import Productv1ProductInfoPicturesResponse from '../model/Productv1ProductInfoPicturesResponse';
import Productv2DeleteProductsRequest from '../model/Productv2DeleteProductsRequest';
import Productv2DeleteProductsResponse from '../model/Productv2DeleteProductsResponse';
import Productv2GetGeoRestrictionsByFilterRequest from '../model/Productv2GetGeoRestrictionsByFilterRequest';
import Productv2GetGeoRestrictionsByFilterResponse from '../model/Productv2GetGeoRestrictionsByFilterResponse';
import Productv2GetProductInfoLimitV2Response from '../model/Productv2GetProductInfoLimitV2Response';
import Productv2GetProductInfoListRequest from '../model/Productv2GetProductInfoListRequest';
import Productv2GetProductInfoListResponse from '../model/Productv2GetProductInfoListResponse';
import Productv2GetProductInfoRequest from '../model/Productv2GetProductInfoRequest';
import Productv2GetProductInfoResponse from '../model/Productv2GetProductInfoResponse';
import Productv2GetProductListRequest from '../model/Productv2GetProductListRequest';
import Productv2GetProductListResponse from '../model/Productv2GetProductListResponse';
import Productv2ImportProductsRequest from '../model/Productv2ImportProductsRequest';
import Productv2ImportProductsResponse from '../model/Productv2ImportProductsResponse';
import Productv3GetProductAttributesV3Request from '../model/Productv3GetProductAttributesV3Request';
import Productv3GetProductAttributesV3Response from '../model/Productv3GetProductAttributesV3Response';
import RpcStatus from '../model/RpcStatus';
import V1GetProductRatingBySkuRequest from '../model/V1GetProductRatingBySkuRequest';
import V1GetProductRatingBySkuResponse from '../model/V1GetProductRatingBySkuResponse';
import V1ProductUpdateOfferIdRequest from '../model/V1ProductUpdateOfferIdRequest';
import V1ProductUpdateOfferIdResponse from '../model/V1ProductUpdateOfferIdResponse';
import V1ProductUploadDigitalCodesRequest from '../model/V1ProductUploadDigitalCodesRequest';
import V1ProductUploadDigitalCodesRequestInfo from '../model/V1ProductUploadDigitalCodesRequestInfo';
import V1ProductUploadDigitalCodesResponse from '../model/V1ProductUploadDigitalCodesResponse';
import V1ProductUploadDigitalCodesResponseInfo from '../model/V1ProductUploadDigitalCodesResponseInfo';
import V3GetProductInfoLimitResponse from '../model/V3GetProductInfoLimitResponse';

/**
* ProductAPI service.
* @module api/ProductAPIApi
* @version 2.1
*/
export default class ProductAPIApi {

    /**
    * Constructs a new ProductAPIApi. 
    * @alias module:api/ProductAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productAPIDeleteProducts operation.
     * @callback module:api/ProductAPIApi~productAPIDeleteProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2DeleteProductsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалить товар без SKU из архива
     * В одном запросе можно передать до 500 идентификаторов.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv2DeleteProductsRequest} productv2DeleteProductsRequest 
     * @param {module:api/ProductAPIApi~productAPIDeleteProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2DeleteProductsResponse}
     */
    productAPIDeleteProducts(clientId, apiKey, productv2DeleteProductsRequest, callback) {
      let postBody = productv2DeleteProductsRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIDeleteProducts");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIDeleteProducts");
      }
      // verify the required parameter 'productv2DeleteProductsRequest' is set
      if (productv2DeleteProductsRequest === undefined || productv2DeleteProductsRequest === null) {
        throw new Error("Missing the required parameter 'productv2DeleteProductsRequest' when calling productAPIDeleteProducts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2DeleteProductsResponse;
      return this.apiClient.callApi(
        '/v2/products/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetGeoRestrictionsV1 operation.
     * @callback module:api/ProductAPIApi~productAPIGetGeoRestrictionsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2GetGeoRestrictionsByFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список геоограничений для услуг
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv2GetGeoRestrictionsByFilterRequest} productv2GetGeoRestrictionsByFilterRequest 
     * @param {module:api/ProductAPIApi~productAPIGetGeoRestrictionsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2GetGeoRestrictionsByFilterResponse}
     */
    productAPIGetGeoRestrictionsV1(clientId, apiKey, productv2GetGeoRestrictionsByFilterRequest, callback) {
      let postBody = productv2GetGeoRestrictionsByFilterRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetGeoRestrictionsV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetGeoRestrictionsV1");
      }
      // verify the required parameter 'productv2GetGeoRestrictionsByFilterRequest' is set
      if (productv2GetGeoRestrictionsByFilterRequest === undefined || productv2GetGeoRestrictionsByFilterRequest === null) {
        throw new Error("Missing the required parameter 'productv2GetGeoRestrictionsByFilterRequest' when calling productAPIGetGeoRestrictionsV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2GetGeoRestrictionsByFilterResponse;
      return this.apiClient.callApi(
        '/v1/products/geo-restrictions-catalog-by-filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetImportProductsInfo operation.
     * @callback module:api/ProductAPIApi~productAPIGetImportProductsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductGetImportProductsInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Узнать статус добавления товара
     * Позволяет получить статус создания карточки товара.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ProductGetImportProductsInfoRequest} productGetImportProductsInfoRequest 
     * @param {module:api/ProductAPIApi~productAPIGetImportProductsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductGetImportProductsInfoResponse}
     */
    productAPIGetImportProductsInfo(clientId, apiKey, productGetImportProductsInfoRequest, callback) {
      let postBody = productGetImportProductsInfoRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetImportProductsInfo");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetImportProductsInfo");
      }
      // verify the required parameter 'productGetImportProductsInfoRequest' is set
      if (productGetImportProductsInfoRequest === undefined || productGetImportProductsInfoRequest === null) {
        throw new Error("Missing the required parameter 'productGetImportProductsInfoRequest' when calling productAPIGetImportProductsInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductGetImportProductsInfoResponse;
      return this.apiClient.callApi(
        '/v1/product/import/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductAttributesV3 operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductAttributesV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv3GetProductAttributesV3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить описание характеристик товара
     * Возвращает описание характеристик товара по его идентификатору. Товар можно искать по `offer_id` или `product_id`.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv3GetProductAttributesV3Request} productv3GetProductAttributesV3Request 
     * @param {module:api/ProductAPIApi~productAPIGetProductAttributesV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv3GetProductAttributesV3Response}
     */
    productAPIGetProductAttributesV3(clientId, apiKey, productv3GetProductAttributesV3Request, callback) {
      let postBody = productv3GetProductAttributesV3Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductAttributesV3");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductAttributesV3");
      }
      // verify the required parameter 'productv3GetProductAttributesV3Request' is set
      if (productv3GetProductAttributesV3Request === undefined || productv3GetProductAttributesV3Request === null) {
        throw new Error("Missing the required parameter 'productv3GetProductAttributesV3Request' when calling productAPIGetProductAttributesV3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv3GetProductAttributesV3Response;
      return this.apiClient.callApi(
        '/v3/products/info/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductInfoDescription operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductInfoDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductGetProductInfoDescriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить описание товара
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ProductGetProductInfoDescriptionRequest} productGetProductInfoDescriptionRequest 
     * @param {module:api/ProductAPIApi~productAPIGetProductInfoDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductGetProductInfoDescriptionResponse}
     */
    productAPIGetProductInfoDescription(clientId, apiKey, productGetProductInfoDescriptionRequest, callback) {
      let postBody = productGetProductInfoDescriptionRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoDescription");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoDescription");
      }
      // verify the required parameter 'productGetProductInfoDescriptionRequest' is set
      if (productGetProductInfoDescriptionRequest === undefined || productGetProductInfoDescriptionRequest === null) {
        throw new Error("Missing the required parameter 'productGetProductInfoDescriptionRequest' when calling productAPIGetProductInfoDescription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductGetProductInfoDescriptionResponse;
      return this.apiClient.callApi(
        '/v1/product/info/description', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductInfoLimit operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductInfoLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V3GetProductInfoLimitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию о лимитах на загрузку и обновление товаров
     * Метод для получения информации: - Об общем лимите — сколько всего товаров можно отредактировать и создать в сутки. - О лимите на создание товаров — сколько товаров можно создать в сутки в рамках общего лимита.  Общий лимит можно полностью потратить на редактирование товаров.  Создавать товары можно, если вы ещё не израсходовали лимит на создание товаров и общий лимит.  [Подробнее о лимитах в Базе знаний продавца](https://seller-edu.ozon.ru/work-with-goods/zagruzka-tovarov/creating-goods/limit/) 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object.<String, Object>} body 
     * @param {module:api/ProductAPIApi~productAPIGetProductInfoLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V3GetProductInfoLimitResponse}
     */
    productAPIGetProductInfoLimit(clientId, apiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoLimit");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoLimit");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productAPIGetProductInfoLimit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V3GetProductInfoLimitResponse;
      return this.apiClient.callApi(
        '/v3/product/info/limit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductInfoLimitV2 operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductInfoLimitV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2GetProductInfoLimitV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию о лимите на загрузку и обновление товаров
     * <aside class=\"warning\">Этот метод возвращает информацию только об общем лимите на загрузку и обновление товаров.  Чтобы узнать общий лимит и сколько всего товаров в рамках общего лимита можно создать, используйте метод  <a href=\"#operation/ProductAPI_GetProductInfoLimit\">/v3/product/info/limit</a>.</aside> 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object.<String, Object>} body 
     * @param {module:api/ProductAPIApi~productAPIGetProductInfoLimitV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2GetProductInfoLimitV2Response}
     */
    productAPIGetProductInfoLimitV2(clientId, apiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoLimitV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoLimitV2");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling productAPIGetProductInfoLimitV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2GetProductInfoLimitV2Response;
      return this.apiClient.callApi(
        '/v2/product/info/limit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductInfoListV2 operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductInfoListV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2GetProductInfoListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список товаров по идентификаторам
     * Метод для получения массива товаров по их идентификаторам.  В теле запроса должен быть массив однотипных идентификаторов, в ответе будет массив `items`.  Для каждого товара внутри массива `items` поля совпадают с полями из метода [/v2/product/info](#operation/ProductAPI_GetProductInfoV2). 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv2GetProductInfoListRequest} productv2GetProductInfoListRequest 
     * @param {module:api/ProductAPIApi~productAPIGetProductInfoListV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2GetProductInfoListResponse}
     */
    productAPIGetProductInfoListV2(clientId, apiKey, productv2GetProductInfoListRequest, callback) {
      let postBody = productv2GetProductInfoListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoListV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoListV2");
      }
      // verify the required parameter 'productv2GetProductInfoListRequest' is set
      if (productv2GetProductInfoListRequest === undefined || productv2GetProductInfoListRequest === null) {
        throw new Error("Missing the required parameter 'productv2GetProductInfoListRequest' when calling productAPIGetProductInfoListV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2GetProductInfoListResponse;
      return this.apiClient.callApi(
        '/v2/product/info/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductInfoV2 operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductInfoV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2GetProductInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация о товарах
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv2GetProductInfoRequest} productv2GetProductInfoRequest 
     * @param {module:api/ProductAPIApi~productAPIGetProductInfoV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2GetProductInfoResponse}
     */
    productAPIGetProductInfoV2(clientId, apiKey, productv2GetProductInfoRequest, callback) {
      let postBody = productv2GetProductInfoRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductInfoV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductInfoV2");
      }
      // verify the required parameter 'productv2GetProductInfoRequest' is set
      if (productv2GetProductInfoRequest === undefined || productv2GetProductInfoRequest === null) {
        throw new Error("Missing the required parameter 'productv2GetProductInfoRequest' when calling productAPIGetProductInfoV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2GetProductInfoResponse;
      return this.apiClient.callApi(
        '/v2/product/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductList operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2GetProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список товаров
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv2GetProductListRequest} productv2GetProductListRequest 
     * @param {module:api/ProductAPIApi~productAPIGetProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2GetProductListResponse}
     */
    productAPIGetProductList(clientId, apiKey, productv2GetProductListRequest, callback) {
      let postBody = productv2GetProductListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductList");
      }
      // verify the required parameter 'productv2GetProductListRequest' is set
      if (productv2GetProductListRequest === undefined || productv2GetProductListRequest === null) {
        throw new Error("Missing the required parameter 'productv2GetProductListRequest' when calling productAPIGetProductList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2GetProductListResponse;
      return this.apiClient.callApi(
        '/v2/product/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIGetProductRatingBySku operation.
     * @callback module:api/ProductAPIApi~productAPIGetProductRatingBySkuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetProductRatingBySkuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить контент-рейтинг товаров по SKU
     * Метод для получения контент-рейтинга товаров, а также рекомендаций по его увеличению.  [Подробнее о контент-рейтинге](https://seller-edu.ozon.ru/docs/work-with-goods/content-rating.html) 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1GetProductRatingBySkuRequest} v1GetProductRatingBySkuRequest 
     * @param {module:api/ProductAPIApi~productAPIGetProductRatingBySkuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetProductRatingBySkuResponse}
     */
    productAPIGetProductRatingBySku(clientId, apiKey, v1GetProductRatingBySkuRequest, callback) {
      let postBody = v1GetProductRatingBySkuRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIGetProductRatingBySku");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIGetProductRatingBySku");
      }
      // verify the required parameter 'v1GetProductRatingBySkuRequest' is set
      if (v1GetProductRatingBySkuRequest === undefined || v1GetProductRatingBySkuRequest === null) {
        throw new Error("Missing the required parameter 'v1GetProductRatingBySkuRequest' when calling productAPIGetProductRatingBySku");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetProductRatingBySkuResponse;
      return this.apiClient.callApi(
        '/v1/product/rating-by-sku', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIImportProductsBySKU operation.
     * @callback module:api/ProductAPIApi~productAPIImportProductsBySKUCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImportProductsBySKUResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создать товар по Ozon ID
     * Создаёт товар по указанному Ozon ID. Количество товаров не ограничено.   Обновить товар по Ozon ID нельзя. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ProductImportProductsBySKURequest} productImportProductsBySKURequest 
     * @param {module:api/ProductAPIApi~productAPIImportProductsBySKUCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImportProductsBySKUResponse}
     */
    productAPIImportProductsBySKU(clientId, apiKey, productImportProductsBySKURequest, callback) {
      let postBody = productImportProductsBySKURequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIImportProductsBySKU");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIImportProductsBySKU");
      }
      // verify the required parameter 'productImportProductsBySKURequest' is set
      if (productImportProductsBySKURequest === undefined || productImportProductsBySKURequest === null) {
        throw new Error("Missing the required parameter 'productImportProductsBySKURequest' when calling productAPIImportProductsBySKU");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductImportProductsBySKUResponse;
      return this.apiClient.callApi(
        '/v1/product/import-by-sku', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIImportProductsV2 operation.
     * @callback module:api/ProductAPIApi~productAPIImportProductsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv2ImportProductsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создать или обновить товар
     * Метод для создания товаров и обновления информации о них.  В сутки можно создать или обновить определённое количество товаров. Чтобы узнать лимит, используйте [/v2/product/info/limit](#operation/ProductAPI_GetProductInfoLimitV2). Если количество загрузок и обновлений товаров превысит лимит, появится ошибка `item_limit_exceeded`.  В одном запросе можно передать до 100 товаров. Каждый товар — это отдельный элемент в массиве `items`. Укажите всю информацию о товаре: его характеристики, штрихкод, изображения, габариты, цену и валюту цены.  Указанная валюта должна совпадать с той, которая установлена в настройках личного кабинета. По умолчанию передаётся `RUB` — российский рубль. Например, если у вас установлена валюта юань, передавайте значение `CNY`, иначе вернётся ошибка.  Товар не будет создан или обновлён, если вы заполните неправильно или не укажете:    - **Обязательные характеристики**: `images`, `name`, `offer_id`, `price`, `vat` и другие характеристики, которые зависят от категории товара. Вы можете узнать их в [Базе знаний продавца](https://seller-edu.ozon.ru/docs/work-with-goods/trebovaniya-k-kartochkam-tovarov/harakteristiki-tovara.html) или получить методом [/v3/category/attribute](#operation/CategoryAPI_GetCategoryAttributesV3).    - **Реальные объёмно-весовые характеристики**: `depth`, `width`, `height`, `dimension_unit`, `weight`, `weight_unit`. Не пропускайте эти параметры в запросе и не указывайте 0.  Для некоторых характеристик можно использовать HTML-теги.  [Подробнее о характеристиках в Базе знаний продавца](https://seller-edu.ozon.ru/docs/work-with-goods/trebovaniya-k-kartochkam-tovarov/harakteristiki-tovara.html)  После модерации товар появится в вашем личном кабинете, но не будет виден пользователям, пока вы не выставите его на продажу.  Каждый товар в запросе — отдельный элемент массива `items`.  Чтобы объединить две карточки, для каждой передайте `9048` в массиве `attributes`. Все атрибуты в этих карточках, кроме размера или цвета, должны совпадать.  ## Загрузка изображений  Для загрузки передайте в запросе ссылки на изображения в общедоступном облачном хранилище. Формат изображения по ссылке — JPG или PNG.  Изображения в массиве `images` располагайте в соответствии с желаемым порядком на сайте. Для загрузки главного изображения товара используйте параметр `primary_image`. Если не передать значение `primary_image`, главным будет первое изображение в массиве `images`.  Для каждого товара вы можете загрузить до 15 изображений, включая главное. Если передать значение `primary_image`, максимальное количество изображений в `images` — 14. Если параметр `primary_image` пустой, то в `images` можно передать до 15 изображений.  Для загрузки изображений 360 используйте поле `images360`, для загрузки маркетингового цвета — `color_image`.  Если вы хотите изменить состав или порядок изображений, получите информацию с помощью методов [/v2/product/info](#operation/ProductAPI_GetProductInfoV2) или [/v2/product/info/list](#operation/ProductAPI_GetProductInfoListV2) — в них отображается текущий порядок и состав изображений. Скопируйте данные полей `images`, `images360`, `color_image`, измените и дополните состав или порядок в соответствии с необходимостью.  ## Загрузка видео  Для загрузки передайте в запросе ссылки на видео.  Для этого в параметре `complex_attributes` передайте объект. В нём в массиве `attributes` передайте 2 объекта с `complex_id = 100001`:  - В первом передайте укажите `id = 21841` и в массиве `values` передайте объект с ссылкой на видео.    __Пример__:    ```   {     \"complex_id\": 100001,     \"id\": 21841,     \"values\": [       {         \"value\": \"https://www.youtube.com/watch?v=ZwM0iBn03dY\"       }     ]   }   ```  - Во втором укажите значение `id = 21837` и в массиве `values` передайте объект с названием видео.    __Пример__:    ```   {     \"complex_id\": 100001,     \"id\": 21837,     \"values\": [       {         \"value\": \"videoName_1\"       }     ]   }   ```  Если вы хотите загрузить несколько видео, передавайте значения для каждого видео в разных объектах массива `complex_attributes`.  ## Загрузка таблицы размеров Чтобы добавить в карточку товара таблицу размеров, созданную с помощью [конструктора](https://table-constructor.ozon.ru/visual-editor), передайте её в массиве `attributes` в формате JSON как Rich-контент `id = 13164`. <br><br> [Конструктор в формате JSON](https://table-constructor.ozon.ru/schema.json)<br> [Подробнее о конструкторе в Базе знаний продавца](https://docs.ozon.ru/global/products/requirements/size-table-constructor/) 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv2ImportProductsRequest} productv2ImportProductsRequest 
     * @param {module:api/ProductAPIApi~productAPIImportProductsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv2ImportProductsResponse}
     */
    productAPIImportProductsV2(clientId, apiKey, productv2ImportProductsRequest, callback) {
      let postBody = productv2ImportProductsRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIImportProductsV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIImportProductsV2");
      }
      // verify the required parameter 'productv2ImportProductsRequest' is set
      if (productv2ImportProductsRequest === undefined || productv2ImportProductsRequest === null) {
        throw new Error("Missing the required parameter 'productv2ImportProductsRequest' when calling productAPIImportProductsV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv2ImportProductsResponse;
      return this.apiClient.callApi(
        '/v2/product/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIProductArchive operation.
     * @callback module:api/ProductAPIApi~productAPIProductArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductBooleanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Перенести товар в архив
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ProductProductArchiveRequest} productProductArchiveRequest 
     * @param {module:api/ProductAPIApi~productAPIProductArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductBooleanResponse}
     */
    productAPIProductArchive(clientId, apiKey, productProductArchiveRequest, callback) {
      let postBody = productProductArchiveRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIProductArchive");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIProductArchive");
      }
      // verify the required parameter 'productProductArchiveRequest' is set
      if (productProductArchiveRequest === undefined || productProductArchiveRequest === null) {
        throw new Error("Missing the required parameter 'productProductArchiveRequest' when calling productAPIProductArchive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductBooleanResponse;
      return this.apiClient.callApi(
        '/v1/product/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIProductImportPictures operation.
     * @callback module:api/ProductAPIApi~productAPIProductImportPicturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv1ProductInfoPicturesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Загрузить или обновить изображения товара
     * Метод для загрузки или обновления изображений товара.  При каждом вызове метода передавайте все изображения, которые должны быть на карточке товара. Например, если вы вызвали метод и загрузили 10 изображений, а затем вызвали метод второй раз и загрузили ещё одно, то все 10 предыдущих сотрутся.  Для загрузки передайте адрес ссылки на изображение в общедоступном облачном хранилище. Формат изображения по ссылке — JPG или PNG.  Изображения в массиве `images` располагайте в соответствии с желаемым порядком на сайте. Главным будет первое изображение в массиве.  Для каждого товара вы можете загрузить до 15 изображений.  Для загрузки изображений 360 используйте поле `images360`, для загрузки маркетингового цвета — `color_image`.  Если вы хотите изменить состав или порядок изображений, получите информацию с помощью методов [/v2/product/info](#operation/ProductAPI_GetProductInfoV2) или [/v2/product/info/list](#operation/ProductAPI_GetProductInfoListV2) — в них отображается текущий порядок и состав изображений. Скопируйте данные полей `images`, `images360`, `color_image`, измените и дополните состав или порядок в соответствии с необходимостью. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv1ProductImportPicturesRequest} productv1ProductImportPicturesRequest 
     * @param {module:api/ProductAPIApi~productAPIProductImportPicturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv1ProductInfoPicturesResponse}
     */
    productAPIProductImportPictures(clientId, apiKey, productv1ProductImportPicturesRequest, callback) {
      let postBody = productv1ProductImportPicturesRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIProductImportPictures");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIProductImportPictures");
      }
      // verify the required parameter 'productv1ProductImportPicturesRequest' is set
      if (productv1ProductImportPicturesRequest === undefined || productv1ProductImportPicturesRequest === null) {
        throw new Error("Missing the required parameter 'productv1ProductImportPicturesRequest' when calling productAPIProductImportPictures");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv1ProductInfoPicturesResponse;
      return this.apiClient.callApi(
        '/v1/product/pictures/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIProductInfoPictures operation.
     * @callback module:api/ProductAPIApi~productAPIProductInfoPicturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Productv1ProductInfoPicturesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Проверить статус загрузки изображений товара
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Productv1ProductInfoPicturesRequest} productv1ProductInfoPicturesRequest 
     * @param {module:api/ProductAPIApi~productAPIProductInfoPicturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Productv1ProductInfoPicturesResponse}
     */
    productAPIProductInfoPictures(clientId, apiKey, productv1ProductInfoPicturesRequest, callback) {
      let postBody = productv1ProductInfoPicturesRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIProductInfoPictures");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIProductInfoPictures");
      }
      // verify the required parameter 'productv1ProductInfoPicturesRequest' is set
      if (productv1ProductInfoPicturesRequest === undefined || productv1ProductInfoPicturesRequest === null) {
        throw new Error("Missing the required parameter 'productv1ProductInfoPicturesRequest' when calling productAPIProductInfoPictures");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Productv1ProductInfoPicturesResponse;
      return this.apiClient.callApi(
        '/v1/product/pictures/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIProductUnarchive operation.
     * @callback module:api/ProductAPIApi~productAPIProductUnarchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductBooleanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Вернуть товар из архива
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ProductProductUnarchiveRequest} productProductUnarchiveRequest 
     * @param {module:api/ProductAPIApi~productAPIProductUnarchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductBooleanResponse}
     */
    productAPIProductUnarchive(clientId, apiKey, productProductUnarchiveRequest, callback) {
      let postBody = productProductUnarchiveRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIProductUnarchive");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIProductUnarchive");
      }
      // verify the required parameter 'productProductUnarchiveRequest' is set
      if (productProductUnarchiveRequest === undefined || productProductUnarchiveRequest === null) {
        throw new Error("Missing the required parameter 'productProductUnarchiveRequest' when calling productAPIProductUnarchive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductBooleanResponse;
      return this.apiClient.callApi(
        '/v1/product/unarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIProductUpdateOfferID operation.
     * @callback module:api/ProductAPIApi~productAPIProductUpdateOfferIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProductUpdateOfferIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить артикулы товаров из системы продавца
     * Метод для изменения `offer_id`, привязанных к товарам. Вы можете изменить несколько `offer_id`.  Рекомендуем передавать до 250 значений в массиве. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1ProductUpdateOfferIdRequest} v1ProductUpdateOfferIdRequest 
     * @param {module:api/ProductAPIApi~productAPIProductUpdateOfferIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProductUpdateOfferIdResponse}
     */
    productAPIProductUpdateOfferID(clientId, apiKey, v1ProductUpdateOfferIdRequest, callback) {
      let postBody = v1ProductUpdateOfferIdRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIProductUpdateOfferID");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIProductUpdateOfferID");
      }
      // verify the required parameter 'v1ProductUpdateOfferIdRequest' is set
      if (v1ProductUpdateOfferIdRequest === undefined || v1ProductUpdateOfferIdRequest === null) {
        throw new Error("Missing the required parameter 'v1ProductUpdateOfferIdRequest' when calling productAPIProductUpdateOfferID");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProductUpdateOfferIdResponse;
      return this.apiClient.callApi(
        '/v1/product/update/offer-id', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIUploadDigitalCode operation.
     * @callback module:api/ProductAPIApi~productAPIUploadDigitalCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProductUploadDigitalCodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Загрузить коды активации для услуг и цифровых товаров
     * Загрузите коды активации, если вы загружаете цифровые товары или услуги. Код активации привязывается к карточке цифрового товара. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1ProductUploadDigitalCodesRequest} v1ProductUploadDigitalCodesRequest 
     * @param {module:api/ProductAPIApi~productAPIUploadDigitalCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProductUploadDigitalCodesResponse}
     */
    productAPIUploadDigitalCode(clientId, apiKey, v1ProductUploadDigitalCodesRequest, callback) {
      let postBody = v1ProductUploadDigitalCodesRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIUploadDigitalCode");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIUploadDigitalCode");
      }
      // verify the required parameter 'v1ProductUploadDigitalCodesRequest' is set
      if (v1ProductUploadDigitalCodesRequest === undefined || v1ProductUploadDigitalCodesRequest === null) {
        throw new Error("Missing the required parameter 'v1ProductUploadDigitalCodesRequest' when calling productAPIUploadDigitalCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProductUploadDigitalCodesResponse;
      return this.apiClient.callApi(
        '/v1/product/upload_digital_codes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAPIUploadDigitalCodeInfo operation.
     * @callback module:api/ProductAPIApi~productAPIUploadDigitalCodeInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProductUploadDigitalCodesResponseInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Статус загрузки кодов активации
     * Метод для получения статуса загрузки кодов активации для услуг и цифровых товаров.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1ProductUploadDigitalCodesRequestInfo} v1ProductUploadDigitalCodesRequestInfo 
     * @param {module:api/ProductAPIApi~productAPIUploadDigitalCodeInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProductUploadDigitalCodesResponseInfo}
     */
    productAPIUploadDigitalCodeInfo(clientId, apiKey, v1ProductUploadDigitalCodesRequestInfo, callback) {
      let postBody = v1ProductUploadDigitalCodesRequestInfo;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling productAPIUploadDigitalCodeInfo");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling productAPIUploadDigitalCodeInfo");
      }
      // verify the required parameter 'v1ProductUploadDigitalCodesRequestInfo' is set
      if (v1ProductUploadDigitalCodesRequestInfo === undefined || v1ProductUploadDigitalCodesRequestInfo === null) {
        throw new Error("Missing the required parameter 'v1ProductUploadDigitalCodesRequestInfo' when calling productAPIUploadDigitalCodeInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProductUploadDigitalCodesResponseInfo;
      return this.apiClient.callApi(
        '/v1/product/upload_digital_codes/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
