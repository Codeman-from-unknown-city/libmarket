/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import V1AutoBookingsGetV1Request from '../model/V1AutoBookingsGetV1Request';
import V1AutoBookingsGetV1Response from '../model/V1AutoBookingsGetV1Response';
import V1AutoBookingsListV1Request from '../model/V1AutoBookingsListV1Request';
import V1AutoBookingsListV1Response from '../model/V1AutoBookingsListV1Response';
import V1AutoCBOsListV1Request from '../model/V1AutoCBOsListV1Request';
import V1AutoCBOsListV1Response from '../model/V1AutoCBOsListV1Response';
import V1AutoModificationsListV1Request from '../model/V1AutoModificationsListV1Request';
import V1AutoModificationsListV1Response from '../model/V1AutoModificationsListV1Response';
import V1AutoOffersCreateV1Request from '../model/V1AutoOffersCreateV1Request';
import V1AutoOffersCreateV1Response from '../model/V1AutoOffersCreateV1Response';
import V1AutoOffersListV1Request from '../model/V1AutoOffersListV1Request';
import V1AutoOffersListV1Response from '../model/V1AutoOffersListV1Response';
import V1AutoOffersUpdateV1Request from '../model/V1AutoOffersUpdateV1Request';
import V1AutoOffersUpdateV1Response from '../model/V1AutoOffersUpdateV1Response';

/**
* AutoAPI service.
* @module api/AutoAPIApi
* @version 2.1
*/
export default class AutoAPIApi {

    /**
    * Constructs a new AutoAPIApi. 
    * @alias module:api/AutoAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autoAPIAutoBookingsGetV1 operation.
     * @callback module:api/AutoAPIApi~autoAPIAutoBookingsGetV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AutoBookingsGetV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию о бронировании
     * Метод для получения информации о бронировании по его идентификатору.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AutoBookingsGetV1Request} v1AutoBookingsGetV1Request 
     * @param {module:api/AutoAPIApi~autoAPIAutoBookingsGetV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AutoBookingsGetV1Response}
     */
    autoAPIAutoBookingsGetV1(clientId, apiKey, v1AutoBookingsGetV1Request, callback) {
      let postBody = v1AutoBookingsGetV1Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling autoAPIAutoBookingsGetV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling autoAPIAutoBookingsGetV1");
      }
      // verify the required parameter 'v1AutoBookingsGetV1Request' is set
      if (v1AutoBookingsGetV1Request === undefined || v1AutoBookingsGetV1Request === null) {
        throw new Error("Missing the required parameter 'v1AutoBookingsGetV1Request' when calling autoAPIAutoBookingsGetV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AutoBookingsGetV1Response;
      return this.apiClient.callApi(
        '/v1/auto/bookings/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoAPIAutoBookingsListV1 operation.
     * @callback module:api/AutoAPIApi~autoAPIAutoBookingsListV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AutoBookingsListV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список бронирований
     * Метод для получения списка бронирований.  Бронирования сортируются по идентификатору бронирования в порядке возрастания.   Для получения первой страницы списка передайте `1` в парметре `booking_id_gt_or_eq`.   Для получения следующей страницы добавьте к максимальному идентификатору бронирования текущего ответа единицу  и передайте это число в следующем запросе в параметре `booking_id_gt_or_eq`. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AutoBookingsListV1Request} v1AutoBookingsListV1Request 
     * @param {module:api/AutoAPIApi~autoAPIAutoBookingsListV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AutoBookingsListV1Response}
     */
    autoAPIAutoBookingsListV1(clientId, apiKey, v1AutoBookingsListV1Request, callback) {
      let postBody = v1AutoBookingsListV1Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling autoAPIAutoBookingsListV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling autoAPIAutoBookingsListV1");
      }
      // verify the required parameter 'v1AutoBookingsListV1Request' is set
      if (v1AutoBookingsListV1Request === undefined || v1AutoBookingsListV1Request === null) {
        throw new Error("Missing the required parameter 'v1AutoBookingsListV1Request' when calling autoAPIAutoBookingsListV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AutoBookingsListV1Response;
      return this.apiClient.callApi(
        '/v1/auto/bookings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoAPIAutoCBOsListV1 operation.
     * @callback module:api/AutoAPIApi~autoAPIAutoCBOsListV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AutoCBOsListV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список автосалонов
     * Метод для получения списка автосалонов.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AutoCBOsListV1Request} v1AutoCBOsListV1Request 
     * @param {module:api/AutoAPIApi~autoAPIAutoCBOsListV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AutoCBOsListV1Response}
     */
    autoAPIAutoCBOsListV1(clientId, apiKey, v1AutoCBOsListV1Request, callback) {
      let postBody = v1AutoCBOsListV1Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling autoAPIAutoCBOsListV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling autoAPIAutoCBOsListV1");
      }
      // verify the required parameter 'v1AutoCBOsListV1Request' is set
      if (v1AutoCBOsListV1Request === undefined || v1AutoCBOsListV1Request === null) {
        throw new Error("Missing the required parameter 'v1AutoCBOsListV1Request' when calling autoAPIAutoCBOsListV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AutoCBOsListV1Response;
      return this.apiClient.callApi(
        '/v1/auto/cbos/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoAPIAutoModificationsListV1 operation.
     * @callback module:api/AutoAPIApi~autoAPIAutoModificationsListV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AutoModificationsListV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список модификаций
     * Метод для получения списка модификаций.  Модификации сортируются по идентификатору модификации в порядке возрастания.   Для получения первой страницы списка передайте `1` в парметре `modification_id_gt_or_eq`.   Для получения следующей страницы добавьте к максимальному идентификатору бронирования текущего ответа единицу  и передайте это число в следующем запросе в параметре `modification_id_gt_or_eq`. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AutoModificationsListV1Request} v1AutoModificationsListV1Request 
     * @param {module:api/AutoAPIApi~autoAPIAutoModificationsListV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AutoModificationsListV1Response}
     */
    autoAPIAutoModificationsListV1(clientId, apiKey, v1AutoModificationsListV1Request, callback) {
      let postBody = v1AutoModificationsListV1Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling autoAPIAutoModificationsListV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling autoAPIAutoModificationsListV1");
      }
      // verify the required parameter 'v1AutoModificationsListV1Request' is set
      if (v1AutoModificationsListV1Request === undefined || v1AutoModificationsListV1Request === null) {
        throw new Error("Missing the required parameter 'v1AutoModificationsListV1Request' when calling autoAPIAutoModificationsListV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AutoModificationsListV1Response;
      return this.apiClient.callApi(
        '/v1/auto/modifications/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoAPIAutoOffersCreateV1 operation.
     * @callback module:api/AutoAPIApi~autoAPIAutoOffersCreateV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AutoOffersCreateV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создать предложения о продаже автомобилей
     * Метод для создания предложений о продаже автомобилей.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AutoOffersCreateV1Request} v1AutoOffersCreateV1Request 
     * @param {module:api/AutoAPIApi~autoAPIAutoOffersCreateV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AutoOffersCreateV1Response}
     */
    autoAPIAutoOffersCreateV1(clientId, apiKey, v1AutoOffersCreateV1Request, callback) {
      let postBody = v1AutoOffersCreateV1Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling autoAPIAutoOffersCreateV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling autoAPIAutoOffersCreateV1");
      }
      // verify the required parameter 'v1AutoOffersCreateV1Request' is set
      if (v1AutoOffersCreateV1Request === undefined || v1AutoOffersCreateV1Request === null) {
        throw new Error("Missing the required parameter 'v1AutoOffersCreateV1Request' when calling autoAPIAutoOffersCreateV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AutoOffersCreateV1Response;
      return this.apiClient.callApi(
        '/v1/auto/offers/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoAPIAutoOffersListV1 operation.
     * @callback module:api/AutoAPIApi~autoAPIAutoOffersListV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AutoOffersListV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список предложений
     * Метод для получения списка предложений о продаже автомобилей.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AutoOffersListV1Request} v1AutoOffersListV1Request 
     * @param {module:api/AutoAPIApi~autoAPIAutoOffersListV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AutoOffersListV1Response}
     */
    autoAPIAutoOffersListV1(clientId, apiKey, v1AutoOffersListV1Request, callback) {
      let postBody = v1AutoOffersListV1Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling autoAPIAutoOffersListV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling autoAPIAutoOffersListV1");
      }
      // verify the required parameter 'v1AutoOffersListV1Request' is set
      if (v1AutoOffersListV1Request === undefined || v1AutoOffersListV1Request === null) {
        throw new Error("Missing the required parameter 'v1AutoOffersListV1Request' when calling autoAPIAutoOffersListV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AutoOffersListV1Response;
      return this.apiClient.callApi(
        '/v1/auto/offers/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoAPIAutoOffersUpdateV1 operation.
     * @callback module:api/AutoAPIApi~autoAPIAutoOffersUpdateV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AutoOffersUpdateV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновить предложения
     * Метод для обновления предложений о продаже автомобилей.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AutoOffersUpdateV1Request} v1AutoOffersUpdateV1Request 
     * @param {module:api/AutoAPIApi~autoAPIAutoOffersUpdateV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AutoOffersUpdateV1Response}
     */
    autoAPIAutoOffersUpdateV1(clientId, apiKey, v1AutoOffersUpdateV1Request, callback) {
      let postBody = v1AutoOffersUpdateV1Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling autoAPIAutoOffersUpdateV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling autoAPIAutoOffersUpdateV1");
      }
      // verify the required parameter 'v1AutoOffersUpdateV1Request' is set
      if (v1AutoOffersUpdateV1Request === undefined || v1AutoOffersUpdateV1Request === null) {
        throw new Error("Missing the required parameter 'v1AutoOffersUpdateV1Request' when calling autoAPIAutoOffersUpdateV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AutoOffersUpdateV1Response;
      return this.apiClient.callApi(
        '/v1/auto/offers/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
