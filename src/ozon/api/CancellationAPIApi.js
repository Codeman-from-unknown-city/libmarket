/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import V1ConditionalCancellationMoveRequest from '../model/V1ConditionalCancellationMoveRequest';
import V1GetConditionalCancellationListRequest from '../model/V1GetConditionalCancellationListRequest';
import V1GetConditionalCancellationListResponse from '../model/V1GetConditionalCancellationListResponse';
import V1GetConditionalCancellationRequest from '../model/V1GetConditionalCancellationRequest';
import V1GetConditionalCancellationResponse from '../model/V1GetConditionalCancellationResponse';

/**
* CancellationAPI service.
* @module api/CancellationAPIApi
* @version 2.1
*/
export default class CancellationAPIApi {

    /**
    * Constructs a new CancellationAPIApi. 
    * @alias module:api/CancellationAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancellationAPIConditionalCancellationApprove operation.
     * @callback module:api/CancellationAPIApi~cancellationAPIConditionalCancellationApproveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Подтвердить заявку на отмену rFBS
     * Метод позволяет согласовать заявку на отмену в статусе `ON_APPROVAL`. Метод применим для rFBS-заказов. Заказ будет отменён, а деньги вернутся покупателю.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1ConditionalCancellationMoveRequest} v1ConditionalCancellationMoveRequest 
     * @param {module:api/CancellationAPIApi~cancellationAPIConditionalCancellationApproveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancellationAPIConditionalCancellationApprove(clientId, apiKey, v1ConditionalCancellationMoveRequest, callback) {
      let postBody = v1ConditionalCancellationMoveRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling cancellationAPIConditionalCancellationApprove");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling cancellationAPIConditionalCancellationApprove");
      }
      // verify the required parameter 'v1ConditionalCancellationMoveRequest' is set
      if (v1ConditionalCancellationMoveRequest === undefined || v1ConditionalCancellationMoveRequest === null) {
        throw new Error("Missing the required parameter 'v1ConditionalCancellationMoveRequest' when calling cancellationAPIConditionalCancellationApprove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/conditional-cancellation/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancellationAPIConditionalCancellationReject operation.
     * @callback module:api/CancellationAPIApi~cancellationAPIConditionalCancellationRejectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отклонить заявку на отмену rFBS
     * Метод позволяет отклонить заявку на отмену в статусе `ON_APPROVAL`. Метод применим для rFBS-заказов. Объясните своё решение в параметре `comment`.   Заказ останется в том же статусе, и его нужно будет доставить покупателю. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1ConditionalCancellationMoveRequest} v1ConditionalCancellationMoveRequest 
     * @param {module:api/CancellationAPIApi~cancellationAPIConditionalCancellationRejectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancellationAPIConditionalCancellationReject(clientId, apiKey, v1ConditionalCancellationMoveRequest, callback) {
      let postBody = v1ConditionalCancellationMoveRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling cancellationAPIConditionalCancellationReject");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling cancellationAPIConditionalCancellationReject");
      }
      // verify the required parameter 'v1ConditionalCancellationMoveRequest' is set
      if (v1ConditionalCancellationMoveRequest === undefined || v1ConditionalCancellationMoveRequest === null) {
        throw new Error("Missing the required parameter 'v1ConditionalCancellationMoveRequest' when calling cancellationAPIConditionalCancellationReject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/conditional-cancellation/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancellationAPIGetConditionalCancellation operation.
     * @callback module:api/CancellationAPIApi~cancellationAPIGetConditionalCancellationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetConditionalCancellationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию о заявке на отмену rFBS
     * Метод для получения информации о заявке на отмену rFBS-заказа.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1GetConditionalCancellationRequest} v1GetConditionalCancellationRequest 
     * @param {module:api/CancellationAPIApi~cancellationAPIGetConditionalCancellationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetConditionalCancellationResponse}
     */
    cancellationAPIGetConditionalCancellation(clientId, apiKey, v1GetConditionalCancellationRequest, callback) {
      let postBody = v1GetConditionalCancellationRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling cancellationAPIGetConditionalCancellation");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling cancellationAPIGetConditionalCancellation");
      }
      // verify the required parameter 'v1GetConditionalCancellationRequest' is set
      if (v1GetConditionalCancellationRequest === undefined || v1GetConditionalCancellationRequest === null) {
        throw new Error("Missing the required parameter 'v1GetConditionalCancellationRequest' when calling cancellationAPIGetConditionalCancellation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetConditionalCancellationResponse;
      return this.apiClient.callApi(
        '/v1/conditional-cancellation/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancellationAPIGetConditionalCancellationList operation.
     * @callback module:api/CancellationAPIApi~cancellationAPIGetConditionalCancellationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetConditionalCancellationListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список заявок на отмену rFBS
     * Метод для получения списка заявок на отмену rFBS-заказов.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1GetConditionalCancellationListRequest} v1GetConditionalCancellationListRequest 
     * @param {module:api/CancellationAPIApi~cancellationAPIGetConditionalCancellationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetConditionalCancellationListResponse}
     */
    cancellationAPIGetConditionalCancellationList(clientId, apiKey, v1GetConditionalCancellationListRequest, callback) {
      let postBody = v1GetConditionalCancellationListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling cancellationAPIGetConditionalCancellationList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling cancellationAPIGetConditionalCancellationList");
      }
      // verify the required parameter 'v1GetConditionalCancellationListRequest' is set
      if (v1GetConditionalCancellationListRequest === undefined || v1GetConditionalCancellationListRequest === null) {
        throw new Error("Missing the required parameter 'v1GetConditionalCancellationListRequest' when calling cancellationAPIGetConditionalCancellationList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetConditionalCancellationListResponse;
      return this.apiClient.callApi(
        '/v1/conditional-cancellation/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
