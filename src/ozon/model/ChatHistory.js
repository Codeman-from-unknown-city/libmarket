/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatHistory model module.
 * @module model/ChatHistory
 * @version 2.1
 */
class ChatHistory {
    /**
     * Constructs a new <code>ChatHistory</code>.
     * @alias module:model/ChatHistory
     * @param chatId {String} Идентификатор чата.
     */
    constructor(chatId) { 
        
        ChatHistory.initialize(this, chatId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chatId) { 
        obj['chat_id'] = chatId;
    }

    /**
     * Constructs a <code>ChatHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatHistory} obj Optional instance to populate.
     * @return {module:model/ChatHistory} The populated <code>ChatHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatHistory();

            if (data.hasOwnProperty('chat_id')) {
                obj['chat_id'] = ApiClient.convertToType(data['chat_id'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('from_message_id')) {
                obj['from_message_id'] = ApiClient.convertToType(data['from_message_id'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatHistory.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chat_id'] && !(typeof data['chat_id'] === 'string' || data['chat_id'] instanceof String)) {
            throw new Error("Expected the field `chat_id` to be a primitive type in the JSON string but got " + data['chat_id']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }

        return true;
    }


}

ChatHistory.RequiredProperties = ["chat_id"];

/**
 * Идентификатор чата.
 * @member {String} chat_id
 */
ChatHistory.prototype['chat_id'] = undefined;

/**
 * Направление сортировки сообщений: - `Forward` — от старых к новым. - `Backward` — от новых к старым.  Значение по умолчанию — `Backward`. Количество сообщений можно установить в параметре `limit`. 
 * @member {String} direction
 */
ChatHistory.prototype['direction'] = undefined;

/**
 * Идентификатор сообщения, с которого начать вывод истории чата. По умолчанию — последнее видимое сообщение.
 * @member {Number} from_message_id
 */
ChatHistory.prototype['from_message_id'] = undefined;

/**
 * Количество сообщений в ответе. По умолчанию — 50.
 * @member {Number} limit
 */
ChatHistory.prototype['limit'] = undefined;






export default ChatHistory;

