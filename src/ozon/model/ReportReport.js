/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportReport model module.
 * @module model/ReportReport
 * @version 2.1
 */
class ReportReport {
    /**
     * Constructs a new <code>ReportReport</code>.
     * Информация об отчёте.
     * @alias module:model/ReportReport
     */
    constructor() { 
        
        ReportReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportReport} obj Optional instance to populate.
     * @return {module:model/ReportReport} The populated <code>ReportReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportReport();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': 'String'});
            }
            if (data.hasOwnProperty('report_type')) {
                obj['report_type'] = ApiClient.convertToType(data['report_type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['report_type'] && !(typeof data['report_type'] === 'string' || data['report_type'] instanceof String)) {
            throw new Error("Expected the field `report_type` to be a primitive type in the JSON string but got " + data['report_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Уникальный идентификатор отчёта.
 * @member {String} code
 */
ReportReport.prototype['code'] = undefined;

/**
 * Дата создания отчёта.
 * @member {Date} created_at
 */
ReportReport.prototype['created_at'] = undefined;

/**
 * Код ошибки при генерации отчёта.
 * @member {String} error
 */
ReportReport.prototype['error'] = undefined;

/**
 * Ссылка на CSV-файл.
 * @member {String} file
 */
ReportReport.prototype['file'] = undefined;

/**
 * Массив с фильтрами, указанными при создании отчёта продавцом.
 * @member {Object.<String, String>} params
 */
ReportReport.prototype['params'] = undefined;

/**
 * Тип отчёта:   - `SELLER_PRODUCTS` — отчёт по товарам,   - `SELLER_TRANSACTIONS` — отчёт по транзакциям,   - `SELLER_PRODUCT_PRICES` — отчёт по ценам товаров,   - `SELLER_STOCK` — отчёт об остатках товаров,   - `SELLER_PRODUCT_MOVEMENT` — отчёт о перемещении товаров,   - `SELLER_RETURNS` — отчёт о возвратах,   - `SELLER_POSTINGS` — отчёт об отправлениях,   - `SELLER_FINANCE` — отчёт о финансах. 
 * @member {String} report_type
 */
ReportReport.prototype['report_type'] = undefined;

/**
 * Статус генерации отчёта:   - `success` — отчёт успешно создан,   - `failed` — ошибка при создании отчёта. 
 * @member {String} status
 */
ReportReport.prototype['status'] = undefined;






export default ReportReport;

