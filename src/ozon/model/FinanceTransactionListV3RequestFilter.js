/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterPeriod from './FilterPeriod';

/**
 * The FinanceTransactionListV3RequestFilter model module.
 * @module model/FinanceTransactionListV3RequestFilter
 * @version 2.1
 */
class FinanceTransactionListV3RequestFilter {
    /**
     * Constructs a new <code>FinanceTransactionListV3RequestFilter</code>.
     * Фильтр.
     * @alias module:model/FinanceTransactionListV3RequestFilter
     */
    constructor() { 
        
        FinanceTransactionListV3RequestFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FinanceTransactionListV3RequestFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FinanceTransactionListV3RequestFilter} obj Optional instance to populate.
     * @return {module:model/FinanceTransactionListV3RequestFilter} The populated <code>FinanceTransactionListV3RequestFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FinanceTransactionListV3RequestFilter();

            if (data.hasOwnProperty('date')) {
                obj['date'] = FilterPeriod.constructFromObject(data['date']);
            }
            if (data.hasOwnProperty('operation_type')) {
                obj['operation_type'] = ApiClient.convertToType(data['operation_type'], ['String']);
            }
            if (data.hasOwnProperty('posting_number')) {
                obj['posting_number'] = ApiClient.convertToType(data['posting_number'], 'String');
            }
            if (data.hasOwnProperty('transaction_type')) {
                obj['transaction_type'] = ApiClient.convertToType(data['transaction_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FinanceTransactionListV3RequestFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FinanceTransactionListV3RequestFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `date`
        if (data['date']) { // data not null
          FilterPeriod.validateJSON(data['date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['operation_type'])) {
            throw new Error("Expected the field `operation_type` to be an array in the JSON data but got " + data['operation_type']);
        }
        // ensure the json data is a string
        if (data['posting_number'] && !(typeof data['posting_number'] === 'string' || data['posting_number'] instanceof String)) {
            throw new Error("Expected the field `posting_number` to be a primitive type in the JSON string but got " + data['posting_number']);
        }
        // ensure the json data is a string
        if (data['transaction_type'] && !(typeof data['transaction_type'] === 'string' || data['transaction_type'] instanceof String)) {
            throw new Error("Expected the field `transaction_type` to be a primitive type in the JSON string but got " + data['transaction_type']);
        }

        return true;
    }


}



/**
 * @member {module:model/FilterPeriod} date
 */
FinanceTransactionListV3RequestFilter.prototype['date'] = undefined;

/**
 * Тип операции:   - `ClientReturnAgentOperation` — получение возврата, отмены, невыкупа от покупателя;   - `MarketplaceMarketingActionCostOperation` — услуги продвижения товаров;   - `MarketplaceSaleReviewsOperation` — приобретение отзывов на платформе;   - `MarketplaceSellerCompensationOperation` — прочие компенсации;   - `OperationAgentDeliveredToCustomer` — доставка покупателю;   - `OperationAgentDeliveredToCustomerCanceled` — доставка покупателю — исправленное начисление;   - `OperationAgentStornoDeliveredToCustomer` — доставка покупателю — отмена начисления;   - `OperationClaim` — начисление по претензии;   - `OperationCorrectionSeller` — инвентаризация взаиморасчетов;   - `OperationDefectiveWriteOff` — компенсация за повреждённый на складе товар;   - `OperationItemReturn` — доставка и обработка возврата, отмены, невыкупа;   - `OperationLackWriteOff` — компенсация за утерянный на складе товар;   - `OperationMarketplaceCrossDockServiceWriteOff` — доставка товаров на склад Ozon (кросс-докинг);   - `OperationMarketplaceServiceStorage` — услуга размещения товаров на складе;   - `OperationSetOff` — взаимозачёт с другими договорами контрагента;   - `MarketplaceSellerReexposureDeliveryReturnOperation` — перечисление за доставку от покупателя;   - `OperationReturnGoodsFBSofRMS` — доставка и обработка возврата, отмены, невыкупа;   - `ReturnAgentOperationRFBS` — возврат перечисления за доставку покупателю;   - `MarketplaceSellerShippingCompensationReturnOperation` — компенсация перечисления за доставку;   - `OperationMarketplaceServicePremiumCashback` — услуга продвижения Premium. 
 * @member {Array.<String>} operation_type
 */
FinanceTransactionListV3RequestFilter.prototype['operation_type'] = undefined;

/**
 * Номер отправления.
 * @member {String} posting_number
 */
FinanceTransactionListV3RequestFilter.prototype['posting_number'] = undefined;

/**
 * Тип начисления:   - `all` — все,   - `orders` — заказы,   - `returns` — возвраты и отмены,   - `services` — сервисные сборы,   - `compensation` — компенсация,   - `transferDelivery` — стоимость доставки,   - `other` — прочее.  Некоторые операции могут быть разделены во времени. Например, при приёме возврата от покупателя списывается стоимость товара и возвращается комиссия, а когда товар возвращается на склад, взимается стоимость услуга по обработке возврата. 
 * @member {String} transaction_type
 */
FinanceTransactionListV3RequestFilter.prototype['transaction_type'] = undefined;






export default FinanceTransactionListV3RequestFilter;

