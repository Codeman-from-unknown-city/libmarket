/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatExternalUser from './ChatExternalUser';
import ChatFile from './ChatFile';
import MessageContext from './MessageContext';

/**
 * The ChatMessage model module.
 * @module model/ChatMessage
 * @version 2.1
 */
class ChatMessage {
    /**
     * Constructs a new <code>ChatMessage</code>.
     * @alias module:model/ChatMessage
     */
    constructor() { 
        
        ChatMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChatMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatMessage} obj Optional instance to populate.
     * @return {module:model/ChatMessage} The populated <code>ChatMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatMessage();

            if (data.hasOwnProperty('context')) {
                obj['context'] = MessageContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ChatFile.constructFromObject(data['file']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ChatExternalUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatMessage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `context`
        if (data['context']) { // data not null
          MessageContext.validateJSON(data['context']);
        }
        // validate the optional field `file`
        if (data['file']) { // data not null
          ChatFile.validateJSON(data['file']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          ChatExternalUser.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/MessageContext} context
 */
ChatMessage.prototype['context'] = undefined;

/**
 * Дата и время создания.
 * @member {Date} created_at
 */
ChatMessage.prototype['created_at'] = undefined;

/**
 * @member {module:model/ChatFile} file
 */
ChatMessage.prototype['file'] = undefined;

/**
 * Идентификатор файла.
 * @member {String} id
 */
ChatMessage.prototype['id'] = undefined;

/**
 * Сообщение, только для `type = text`.
 * @member {String} text
 */
ChatMessage.prototype['text'] = undefined;

/**
 * Тип сообщения:   - `text` — текст,   - `file` — файл. 
 * @member {String} type
 */
ChatMessage.prototype['type'] = undefined;

/**
 * @member {module:model/ChatExternalUser} user
 */
ChatMessage.prototype['user'] = undefined;






export default ChatMessage;

