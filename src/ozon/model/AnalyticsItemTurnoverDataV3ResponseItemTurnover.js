/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnalyticsItemTurnoverDataV3ResponseItemTurnover model module.
 * @module model/AnalyticsItemTurnoverDataV3ResponseItemTurnover
 * @version 2.1
 */
class AnalyticsItemTurnoverDataV3ResponseItemTurnover {
    /**
     * Constructs a new <code>AnalyticsItemTurnoverDataV3ResponseItemTurnover</code>.
     * @alias module:model/AnalyticsItemTurnoverDataV3ResponseItemTurnover
     */
    constructor() { 
        
        AnalyticsItemTurnoverDataV3ResponseItemTurnover.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyticsItemTurnoverDataV3ResponseItemTurnover</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyticsItemTurnoverDataV3ResponseItemTurnover} obj Optional instance to populate.
     * @return {module:model/AnalyticsItemTurnoverDataV3ResponseItemTurnover} The populated <code>AnalyticsItemTurnoverDataV3ResponseItemTurnover</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyticsItemTurnoverDataV3ResponseItemTurnover();

            if (data.hasOwnProperty('avg_sold_items')) {
                obj['avg_sold_items'] = ApiClient.convertToType(data['avg_sold_items'], 'Number');
            }
            if (data.hasOwnProperty('avg_sold_litres')) {
                obj['avg_sold_litres'] = ApiClient.convertToType(data['avg_sold_litres'], 'Number');
            }
            if (data.hasOwnProperty('avg_stock_items')) {
                obj['avg_stock_items'] = ApiClient.convertToType(data['avg_stock_items'], 'Number');
            }
            if (data.hasOwnProperty('avg_stock_items_free')) {
                obj['avg_stock_items_free'] = ApiClient.convertToType(data['avg_stock_items_free'], 'Number');
            }
            if (data.hasOwnProperty('avg_stock_litres')) {
                obj['avg_stock_litres'] = ApiClient.convertToType(data['avg_stock_litres'], 'Number');
            }
            if (data.hasOwnProperty('discounted')) {
                obj['discounted'] = ApiClient.convertToType(data['discounted'], 'Boolean');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('item_commission_part')) {
                obj['item_commission_part'] = ApiClient.convertToType(data['item_commission_part'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('min_daily_sales')) {
                obj['min_daily_sales'] = ApiClient.convertToType(data['min_daily_sales'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offer_id')) {
                obj['offer_id'] = ApiClient.convertToType(data['offer_id'], 'String');
            }
            if (data.hasOwnProperty('recommendation')) {
                obj['recommendation'] = ApiClient.convertToType(data['recommendation'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'Number');
            }
            if (data.hasOwnProperty('stock_items_total')) {
                obj['stock_items_total'] = ApiClient.convertToType(data['stock_items_total'], 'Number');
            }
            if (data.hasOwnProperty('threshold_free')) {
                obj['threshold_free'] = ApiClient.convertToType(data['threshold_free'], 'Number');
            }
            if (data.hasOwnProperty('turnover')) {
                obj['turnover'] = ApiClient.convertToType(data['turnover'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyticsItemTurnoverDataV3ResponseItemTurnover</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyticsItemTurnoverDataV3ResponseItemTurnover</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['offer_id'] && !(typeof data['offer_id'] === 'string' || data['offer_id'] instanceof String)) {
            throw new Error("Expected the field `offer_id` to be a primitive type in the JSON string but got " + data['offer_id']);
        }
        // ensure the json data is a string
        if (data['recommendation'] && !(typeof data['recommendation'] === 'string' || data['recommendation'] instanceof String)) {
            throw new Error("Expected the field `recommendation` to be a primitive type in the JSON string but got " + data['recommendation']);
        }
        // ensure the json data is a string
        if (data['turnover'] && !(typeof data['turnover'] === 'string' || data['turnover'] instanceof String)) {
            throw new Error("Expected the field `turnover` to be a primitive type in the JSON string but got " + data['turnover']);
        }

        return true;
    }


}



/**
 * Среднесуточные продажи за определённый период. Указывается в штуках.
 * @member {Number} avg_sold_items
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['avg_sold_items'] = undefined;

/**
 * Среднесуточные продажи за определённый период. Измеряется в литрах.
 * @member {Number} avg_sold_litres
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['avg_sold_litres'] = undefined;

/**
 * Среднесуточный объём товара на складе в литрах.
 * @member {Number} avg_stock_items
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['avg_stock_items'] = undefined;

/**
 * Сколько единиц товара можно размещать на складе бесплатно. Рассчитывается по формуле: Среднесуточные продажи товара (л/дн) × Пороговая оборачиваемость (дн) ÷ Объём (л). 
 * @member {Number} avg_stock_items_free
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['avg_stock_items_free'] = undefined;

/**
 * Среднесуточный остаток на складах Ozon в литрах.
 * @member {Number} avg_stock_litres
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['avg_stock_litres'] = undefined;

/**
 * Уценённый товар.
 * @member {Boolean} discounted
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['discounted'] = undefined;

/**
 * Высота товара.
 * @member {Number} height
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['height'] = undefined;

/**
 * Часть от стоимости размещения категории в рублях.
 * @member {Number} item_commission_part
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['item_commission_part'] = undefined;

/**
 * Длина товара.
 * @member {Number} length
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['length'] = undefined;

/**
 * Сколько нужно продавать в день, чтобы размещение товара было бесплатным. Рассчитывается по формуле: Среднесуточный остаток товара (л) ÷ Пороговая оборачиваемость (дн) ÷ Объем (л). 
 * @member {Number} min_daily_sales
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['min_daily_sales'] = undefined;

/**
 * Название товара.
 * @member {String} name
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['name'] = undefined;

/**
 * Артикул.
 * @member {String} offer_id
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['offer_id'] = undefined;

/**
 * Рекомендация, что нужно сделать с товаром по данным об оборачиваемости этого товара.
 * @member {String} recommendation
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['recommendation'] = undefined;

/**
 * Идентификатор товара в системе Ozon — SKU.
 * @member {Number} sku
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['sku'] = undefined;

/**
 * Доступно к продаже всего в штуках.
 * @member {Number} stock_items_total
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['stock_items_total'] = undefined;

/**
 * Пороговая оборачиваемость в днях.
 * @member {Number} threshold_free
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['threshold_free'] = undefined;

/**
 * Фактическая оборачиваемость в днях.
 * @member {String} turnover
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['turnover'] = undefined;

/**
 * Объём товара.
 * @member {Number} volume
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['volume'] = undefined;

/**
 * Ширина товара.
 * @member {Number} width
 */
AnalyticsItemTurnoverDataV3ResponseItemTurnover.prototype['width'] = undefined;






export default AnalyticsItemTurnoverDataV3ResponseItemTurnover;

