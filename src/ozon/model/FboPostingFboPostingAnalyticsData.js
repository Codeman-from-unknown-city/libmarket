/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FboPostingFboPostingAnalyticsData model module.
 * @module model/FboPostingFboPostingAnalyticsData
 * @version 2.1
 */
class FboPostingFboPostingAnalyticsData {
    /**
     * Constructs a new <code>FboPostingFboPostingAnalyticsData</code>.
     * Данные аналитики.
     * @alias module:model/FboPostingFboPostingAnalyticsData
     */
    constructor() { 
        
        FboPostingFboPostingAnalyticsData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FboPostingFboPostingAnalyticsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FboPostingFboPostingAnalyticsData} obj Optional instance to populate.
     * @return {module:model/FboPostingFboPostingAnalyticsData} The populated <code>FboPostingFboPostingAnalyticsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FboPostingFboPostingAnalyticsData();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('delivery_type')) {
                obj['delivery_type'] = ApiClient.convertToType(data['delivery_type'], 'String');
            }
            if (data.hasOwnProperty('is_legal')) {
                obj['is_legal'] = ApiClient.convertToType(data['is_legal'], 'Boolean');
            }
            if (data.hasOwnProperty('is_premium')) {
                obj['is_premium'] = ApiClient.convertToType(data['is_premium'], 'Boolean');
            }
            if (data.hasOwnProperty('payment_type_group_name')) {
                obj['payment_type_group_name'] = ApiClient.convertToType(data['payment_type_group_name'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('warehouse_id')) {
                obj['warehouse_id'] = ApiClient.convertToType(data['warehouse_id'], 'Number');
            }
            if (data.hasOwnProperty('warehouse_name')) {
                obj['warehouse_name'] = ApiClient.convertToType(data['warehouse_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FboPostingFboPostingAnalyticsData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FboPostingFboPostingAnalyticsData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['delivery_type'] && !(typeof data['delivery_type'] === 'string' || data['delivery_type'] instanceof String)) {
            throw new Error("Expected the field `delivery_type` to be a primitive type in the JSON string but got " + data['delivery_type']);
        }
        // ensure the json data is a string
        if (data['payment_type_group_name'] && !(typeof data['payment_type_group_name'] === 'string' || data['payment_type_group_name'] instanceof String)) {
            throw new Error("Expected the field `payment_type_group_name` to be a primitive type in the JSON string but got " + data['payment_type_group_name']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['warehouse_name'] && !(typeof data['warehouse_name'] === 'string' || data['warehouse_name'] instanceof String)) {
            throw new Error("Expected the field `warehouse_name` to be a primitive type in the JSON string but got " + data['warehouse_name']);
        }

        return true;
    }


}



/**
 * Город доставки.
 * @member {String} city
 */
FboPostingFboPostingAnalyticsData.prototype['city'] = undefined;

/**
 * Способ доставки.
 * @member {String} delivery_type
 */
FboPostingFboPostingAnalyticsData.prototype['delivery_type'] = undefined;

/**
 * Получатель юридическое лицо:   - `true` — юридическое лицо,   - `false` — физическое лицо. 
 * @member {Boolean} is_legal
 */
FboPostingFboPostingAnalyticsData.prototype['is_legal'] = undefined;

/**
 * Наличие подписки Premium.
 * @member {Boolean} is_premium
 */
FboPostingFboPostingAnalyticsData.prototype['is_premium'] = undefined;

/**
 * Способ оплаты.
 * @member {String} payment_type_group_name
 */
FboPostingFboPostingAnalyticsData.prototype['payment_type_group_name'] = undefined;

/**
 * Регион доставки.
 * @member {String} region
 */
FboPostingFboPostingAnalyticsData.prototype['region'] = undefined;

/**
 * Идентификатор склада.
 * @member {Number} warehouse_id
 */
FboPostingFboPostingAnalyticsData.prototype['warehouse_id'] = undefined;

/**
 * Название склада отправки заказа.
 * @member {String} warehouse_name
 */
FboPostingFboPostingAnalyticsData.prototype['warehouse_name'] = undefined;






export default FboPostingFboPostingAnalyticsData;

