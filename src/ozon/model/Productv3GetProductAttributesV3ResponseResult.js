/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetProductAttributesResponseImage from './GetProductAttributesResponseImage';
import GetProductAttributesResponseImage360 from './GetProductAttributesResponseImage360';
import GetProductAttributesResponsePdf from './GetProductAttributesResponsePdf';
import ProductGetProductAttributesV3ResponseAttribute from './ProductGetProductAttributesV3ResponseAttribute';
import ProductGetProductAttributesV3ResponseComplexAttribute from './ProductGetProductAttributesV3ResponseComplexAttribute';

/**
 * The Productv3GetProductAttributesV3ResponseResult model module.
 * @module model/Productv3GetProductAttributesV3ResponseResult
 * @version 2.1
 */
class Productv3GetProductAttributesV3ResponseResult {
    /**
     * Constructs a new <code>Productv3GetProductAttributesV3ResponseResult</code>.
     * @alias module:model/Productv3GetProductAttributesV3ResponseResult
     */
    constructor() { 
        
        Productv3GetProductAttributesV3ResponseResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Productv3GetProductAttributesV3ResponseResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Productv3GetProductAttributesV3ResponseResult} obj Optional instance to populate.
     * @return {module:model/Productv3GetProductAttributesV3ResponseResult} The populated <code>Productv3GetProductAttributesV3ResponseResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Productv3GetProductAttributesV3ResponseResult();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [ProductGetProductAttributesV3ResponseAttribute]);
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'Number');
            }
            if (data.hasOwnProperty('color_image')) {
                obj['color_image'] = ApiClient.convertToType(data['color_image'], 'String');
            }
            if (data.hasOwnProperty('complex_attributes')) {
                obj['complex_attributes'] = ApiClient.convertToType(data['complex_attributes'], [ProductGetProductAttributesV3ResponseComplexAttribute]);
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('dimension_unit')) {
                obj['dimension_unit'] = ApiClient.convertToType(data['dimension_unit'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('image_group_id')) {
                obj['image_group_id'] = ApiClient.convertToType(data['image_group_id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [GetProductAttributesResponseImage]);
            }
            if (data.hasOwnProperty('images360')) {
                obj['images360'] = ApiClient.convertToType(data['images360'], [GetProductAttributesResponseImage360]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offer_id')) {
                obj['offer_id'] = ApiClient.convertToType(data['offer_id'], 'String');
            }
            if (data.hasOwnProperty('pdf_list')) {
                obj['pdf_list'] = ApiClient.convertToType(data['pdf_list'], [GetProductAttributesResponsePdf]);
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('weight_unit')) {
                obj['weight_unit'] = ApiClient.convertToType(data['weight_unit'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Productv3GetProductAttributesV3ResponseResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Productv3GetProductAttributesV3ResponseResult</code>.
     */
    static validateJSON(data) {
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                ProductGetProductAttributesV3ResponseAttribute.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // ensure the json data is a string
        if (data['color_image'] && !(typeof data['color_image'] === 'string' || data['color_image'] instanceof String)) {
            throw new Error("Expected the field `color_image` to be a primitive type in the JSON string but got " + data['color_image']);
        }
        if (data['complex_attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['complex_attributes'])) {
                throw new Error("Expected the field `complex_attributes` to be an array in the JSON data but got " + data['complex_attributes']);
            }
            // validate the optional field `complex_attributes` (array)
            for (const item of data['complex_attributes']) {
                ProductGetProductAttributesV3ResponseComplexAttribute.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['dimension_unit'] && !(typeof data['dimension_unit'] === 'string' || data['dimension_unit'] instanceof String)) {
            throw new Error("Expected the field `dimension_unit` to be a primitive type in the JSON string but got " + data['dimension_unit']);
        }
        // ensure the json data is a string
        if (data['image_group_id'] && !(typeof data['image_group_id'] === 'string' || data['image_group_id'] instanceof String)) {
            throw new Error("Expected the field `image_group_id` to be a primitive type in the JSON string but got " + data['image_group_id']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                GetProductAttributesResponseImage.validateJsonObject(item);
            };
        }
        if (data['images360']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images360'])) {
                throw new Error("Expected the field `images360` to be an array in the JSON data but got " + data['images360']);
            }
            // validate the optional field `images360` (array)
            for (const item of data['images360']) {
                GetProductAttributesResponseImage360.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['offer_id'] && !(typeof data['offer_id'] === 'string' || data['offer_id'] instanceof String)) {
            throw new Error("Expected the field `offer_id` to be a primitive type in the JSON string but got " + data['offer_id']);
        }
        if (data['pdf_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pdf_list'])) {
                throw new Error("Expected the field `pdf_list` to be an array in the JSON data but got " + data['pdf_list']);
            }
            // validate the optional field `pdf_list` (array)
            for (const item of data['pdf_list']) {
                GetProductAttributesResponsePdf.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['weight_unit'] && !(typeof data['weight_unit'] === 'string' || data['weight_unit'] instanceof String)) {
            throw new Error("Expected the field `weight_unit` to be a primitive type in the JSON string but got " + data['weight_unit']);
        }

        return true;
    }


}



/**
 * Массив характеристик товара.
 * @member {Array.<module:model/ProductGetProductAttributesV3ResponseAttribute>} attributes
 */
Productv3GetProductAttributesV3ResponseResult.prototype['attributes'] = undefined;

/**
 * Штрихкод.
 * @member {String} barcode
 */
Productv3GetProductAttributesV3ResponseResult.prototype['barcode'] = undefined;

/**
 * Идентификатор категории.
 * @member {Number} category_id
 */
Productv3GetProductAttributesV3ResponseResult.prototype['category_id'] = undefined;

/**
 * Маркетинговый цвет.
 * @member {String} color_image
 */
Productv3GetProductAttributesV3ResponseResult.prototype['color_image'] = undefined;

/**
 * Массив вложенных характеристик.
 * @member {Array.<module:model/ProductGetProductAttributesV3ResponseComplexAttribute>} complex_attributes
 */
Productv3GetProductAttributesV3ResponseResult.prototype['complex_attributes'] = undefined;

/**
 * Глубина.
 * @member {Number} depth
 */
Productv3GetProductAttributesV3ResponseResult.prototype['depth'] = undefined;

/**
 * Единица измерения габаритов:   - `mm` — миллиметры,   - `cm` — сантиметры,   - `in` — дюймы. 
 * @member {String} dimension_unit
 */
Productv3GetProductAttributesV3ResponseResult.prototype['dimension_unit'] = undefined;

/**
 * Высота упаковки.
 * @member {Number} height
 */
Productv3GetProductAttributesV3ResponseResult.prototype['height'] = undefined;

/**
 * Идентификатор характеристики товара.
 * @member {Number} id
 */
Productv3GetProductAttributesV3ResponseResult.prototype['id'] = undefined;

/**
 * Идентификатор для последующей пакетной загрузки изображений.
 * @member {String} image_group_id
 */
Productv3GetProductAttributesV3ResponseResult.prototype['image_group_id'] = undefined;

/**
 * Массив ссылок на изображения товара.
 * @member {Array.<module:model/GetProductAttributesResponseImage>} images
 */
Productv3GetProductAttributesV3ResponseResult.prototype['images'] = undefined;

/**
 * Массив изображений 360.
 * @member {Array.<module:model/GetProductAttributesResponseImage360>} images360
 */
Productv3GetProductAttributesV3ResponseResult.prototype['images360'] = undefined;

/**
 * Название товара. До 500 символов.
 * @member {String} name
 */
Productv3GetProductAttributesV3ResponseResult.prototype['name'] = undefined;

/**
 * Идентификатор товара в системе продавца — артикул.
 * @member {String} offer_id
 */
Productv3GetProductAttributesV3ResponseResult.prototype['offer_id'] = undefined;

/**
 * Массив PDF-файлов.
 * @member {Array.<module:model/GetProductAttributesResponsePdf>} pdf_list
 */
Productv3GetProductAttributesV3ResponseResult.prototype['pdf_list'] = undefined;

/**
 * Вес товара в упаковке.
 * @member {Number} weight
 */
Productv3GetProductAttributesV3ResponseResult.prototype['weight'] = undefined;

/**
 * Единица измерения веса.
 * @member {String} weight_unit
 */
Productv3GetProductAttributesV3ResponseResult.prototype['weight_unit'] = undefined;

/**
 * Ширина упаковки.
 * @member {Number} width
 */
Productv3GetProductAttributesV3ResponseResult.prototype['width'] = undefined;






export default Productv3GetProductAttributesV3ResponseResult;

