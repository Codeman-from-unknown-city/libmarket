/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1AutoBookingsListV1ResponseBookingCBO from './V1AutoBookingsListV1ResponseBookingCBO';
import V1AutoBookingsListV1ResponseBookingOffer from './V1AutoBookingsListV1ResponseBookingOffer';
import V1AutoBookingsListV1ResponseBookingUser from './V1AutoBookingsListV1ResponseBookingUser';

/**
 * The V1AutoBookingsListV1ResponseBooking model module.
 * @module model/V1AutoBookingsListV1ResponseBooking
 * @version 2.1
 */
class V1AutoBookingsListV1ResponseBooking {
    /**
     * Constructs a new <code>V1AutoBookingsListV1ResponseBooking</code>.
     * Бронирование.
     * @alias module:model/V1AutoBookingsListV1ResponseBooking
     */
    constructor() { 
        
        V1AutoBookingsListV1ResponseBooking.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1AutoBookingsListV1ResponseBooking</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1AutoBookingsListV1ResponseBooking} obj Optional instance to populate.
     * @return {module:model/V1AutoBookingsListV1ResponseBooking} The populated <code>V1AutoBookingsListV1ResponseBooking</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1AutoBookingsListV1ResponseBooking();

            if (data.hasOwnProperty('booking_id')) {
                obj['booking_id'] = ApiClient.convertToType(data['booking_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = V1AutoBookingsListV1ResponseBookingUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('offer')) {
                obj['offer'] = V1AutoBookingsListV1ResponseBookingOffer.constructFromObject(data['offer']);
            }
            if (data.hasOwnProperty('cbo')) {
                obj['cbo'] = V1AutoBookingsListV1ResponseBookingCBO.constructFromObject(data['cbo']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1AutoBookingsListV1ResponseBooking</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1AutoBookingsListV1ResponseBooking</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['booking_id'] && !(typeof data['booking_id'] === 'string' || data['booking_id'] instanceof String)) {
            throw new Error("Expected the field `booking_id` to be a primitive type in the JSON string but got " + data['booking_id']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          V1AutoBookingsListV1ResponseBookingUser.validateJSON(data['user']);
        }
        // validate the optional field `offer`
        if (data['offer']) { // data not null
          V1AutoBookingsListV1ResponseBookingOffer.validateJSON(data['offer']);
        }
        // validate the optional field `cbo`
        if (data['cbo']) { // data not null
          V1AutoBookingsListV1ResponseBookingCBO.validateJSON(data['cbo']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}



/**
 * Идентификатор бронирования.
 * @member {String} booking_id
 */
V1AutoBookingsListV1ResponseBooking.prototype['booking_id'] = undefined;

/**
 * Время создания бронирования.
 * @member {Date} created_at
 */
V1AutoBookingsListV1ResponseBooking.prototype['created_at'] = undefined;

/**
 * @member {module:model/V1AutoBookingsListV1ResponseBookingUser} user
 */
V1AutoBookingsListV1ResponseBooking.prototype['user'] = undefined;

/**
 * @member {module:model/V1AutoBookingsListV1ResponseBookingOffer} offer
 */
V1AutoBookingsListV1ResponseBooking.prototype['offer'] = undefined;

/**
 * @member {module:model/V1AutoBookingsListV1ResponseBookingCBO} cbo
 */
V1AutoBookingsListV1ResponseBooking.prototype['cbo'] = undefined;

/**
 * Комментарий клиента.
 * @member {String} comment
 */
V1AutoBookingsListV1ResponseBooking.prototype['comment'] = undefined;






export default V1AutoBookingsListV1ResponseBooking;

