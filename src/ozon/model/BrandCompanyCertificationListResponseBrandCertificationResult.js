/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BrandCompanyCertificationListResponseBrandCertification from './BrandCompanyCertificationListResponseBrandCertification';

/**
 * The BrandCompanyCertificationListResponseBrandCertificationResult model module.
 * @module model/BrandCompanyCertificationListResponseBrandCertificationResult
 * @version 2.1
 */
class BrandCompanyCertificationListResponseBrandCertificationResult {
    /**
     * Constructs a new <code>BrandCompanyCertificationListResponseBrandCertificationResult</code>.
     * Результат запроса.
     * @alias module:model/BrandCompanyCertificationListResponseBrandCertificationResult
     */
    constructor() { 
        
        BrandCompanyCertificationListResponseBrandCertificationResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BrandCompanyCertificationListResponseBrandCertificationResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrandCompanyCertificationListResponseBrandCertificationResult} obj Optional instance to populate.
     * @return {module:model/BrandCompanyCertificationListResponseBrandCertificationResult} The populated <code>BrandCompanyCertificationListResponseBrandCertificationResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrandCompanyCertificationListResponseBrandCertificationResult();

            if (data.hasOwnProperty('brand_certification')) {
                obj['brand_certification'] = ApiClient.convertToType(data['brand_certification'], [BrandCompanyCertificationListResponseBrandCertification]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrandCompanyCertificationListResponseBrandCertificationResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrandCompanyCertificationListResponseBrandCertificationResult</code>.
     */
    static validateJSON(data) {
        if (data['brand_certification']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['brand_certification'])) {
                throw new Error("Expected the field `brand_certification` to be an array in the JSON data but got " + data['brand_certification']);
            }
            // validate the optional field `brand_certification` (array)
            for (const item of data['brand_certification']) {
                BrandCompanyCertificationListResponseBrandCertification.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * Информация о сертифицируемых брендах.
 * @member {Array.<module:model/BrandCompanyCertificationListResponseBrandCertification>} brand_certification
 */
BrandCompanyCertificationListResponseBrandCertificationResult.prototype['brand_certification'] = undefined;

/**
 * Общее количество брендов.
 * @member {Number} total
 */
BrandCompanyCertificationListResponseBrandCertificationResult.prototype['total'] = undefined;






export default BrandCompanyCertificationListResponseBrandCertificationResult;

