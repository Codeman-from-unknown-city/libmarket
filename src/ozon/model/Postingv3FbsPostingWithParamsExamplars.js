/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Postingv3FbsPostingWithParamsExamplars model module.
 * @module model/Postingv3FbsPostingWithParamsExamplars
 * @version 2.1
 */
class Postingv3FbsPostingWithParamsExamplars {
    /**
     * Constructs a new <code>Postingv3FbsPostingWithParamsExamplars</code>.
     * Дополнительные поля, которые нужно добавить в ответ.
     * @alias module:model/Postingv3FbsPostingWithParamsExamplars
     */
    constructor() { 
        
        Postingv3FbsPostingWithParamsExamplars.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Postingv3FbsPostingWithParamsExamplars</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Postingv3FbsPostingWithParamsExamplars} obj Optional instance to populate.
     * @return {module:model/Postingv3FbsPostingWithParamsExamplars} The populated <code>Postingv3FbsPostingWithParamsExamplars</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Postingv3FbsPostingWithParamsExamplars();

            if (data.hasOwnProperty('analytics_data')) {
                obj['analytics_data'] = ApiClient.convertToType(data['analytics_data'], 'Boolean');
            }
            if (data.hasOwnProperty('barcodes')) {
                obj['barcodes'] = ApiClient.convertToType(data['barcodes'], 'Boolean');
            }
            if (data.hasOwnProperty('financial_data')) {
                obj['financial_data'] = ApiClient.convertToType(data['financial_data'], 'Boolean');
            }
            if (data.hasOwnProperty('product_exemplars')) {
                obj['product_exemplars'] = ApiClient.convertToType(data['product_exemplars'], 'Boolean');
            }
            if (data.hasOwnProperty('related_postings')) {
                obj['related_postings'] = ApiClient.convertToType(data['related_postings'], 'Boolean');
            }
            if (data.hasOwnProperty('translit')) {
                obj['translit'] = ApiClient.convertToType(data['translit'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Postingv3FbsPostingWithParamsExamplars</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Postingv3FbsPostingWithParamsExamplars</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Добавить в ответ данные аналитики.
 * @member {Boolean} analytics_data
 */
Postingv3FbsPostingWithParamsExamplars.prototype['analytics_data'] = undefined;

/**
 * Добавить в ответ штрихкоды отправления.
 * @member {Boolean} barcodes
 */
Postingv3FbsPostingWithParamsExamplars.prototype['barcodes'] = undefined;

/**
 * Добавить в ответ финансовые данные.
 * @member {Boolean} financial_data
 */
Postingv3FbsPostingWithParamsExamplars.prototype['financial_data'] = undefined;

/**
 * Добавить в ответ данные о продуктах и их экземплярах.
 * @member {Boolean} product_exemplars
 */
Postingv3FbsPostingWithParamsExamplars.prototype['product_exemplars'] = undefined;

/**
 * Добавить в ответ номера связанных отправлений. Связанные отправления — те, на которое было разделено родительское отправление при сборке. 
 * @member {Boolean} related_postings
 */
Postingv3FbsPostingWithParamsExamplars.prototype['related_postings'] = undefined;

/**
 * Выполнить транслитерацию возвращаемых значений.
 * @member {Boolean} translit
 */
Postingv3FbsPostingWithParamsExamplars.prototype['translit'] = undefined;






export default Postingv3FbsPostingWithParamsExamplars;

