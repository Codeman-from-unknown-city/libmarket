/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V2ItemError model module.
 * @module model/V2ItemError
 * @version 2.1
 */
class V2ItemError {
    /**
     * Constructs a new <code>V2ItemError</code>.
     * @alias module:model/V2ItemError
     */
    constructor() { 
        
        V2ItemError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V2ItemError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V2ItemError} obj Optional instance to populate.
     * @return {module:model/V2ItemError} The populated <code>V2ItemError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2ItemError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('attribute_id')) {
                obj['attribute_id'] = ApiClient.convertToType(data['attribute_id'], 'Number');
            }
            if (data.hasOwnProperty('attribute_name')) {
                obj['attribute_name'] = ApiClient.convertToType(data['attribute_name'], 'String');
            }
            if (data.hasOwnProperty('optional_description_elements')) {
                obj['optional_description_elements'] = ApiClient.convertToType(data['optional_description_elements'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V2ItemError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V2ItemError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['attribute_name'] && !(typeof data['attribute_name'] === 'string' || data['attribute_name'] instanceof String)) {
            throw new Error("Expected the field `attribute_name` to be a primitive type in the JSON string but got " + data['attribute_name']);
        }

        return true;
    }


}



/**
 * Код ошибки.
 * @member {String} code
 */
V2ItemError.prototype['code'] = undefined;

/**
 * Состояние товара, в котором произошла ошибка.
 * @member {String} state
 */
V2ItemError.prototype['state'] = undefined;

/**
 * Уровень ошибки.
 * @member {String} level
 */
V2ItemError.prototype['level'] = undefined;

/**
 * Описание ошибки.
 * @member {String} description
 */
V2ItemError.prototype['description'] = undefined;

/**
 * Поле, в котором произошла ошибка.
 * @member {String} field
 */
V2ItemError.prototype['field'] = undefined;

/**
 * Атрибут, в котором произошла ошибка.
 * @member {Number} attribute_id
 */
V2ItemError.prototype['attribute_id'] = undefined;

/**
 * Название атрибута, в котором произошла ошибка.
 * @member {String} attribute_name
 */
V2ItemError.prototype['attribute_name'] = undefined;

/**
 * Дополнительные поля для описания ошибки.
 * @member {Object.<String, String>} optional_description_elements
 */
V2ItemError.prototype['optional_description_elements'] = undefined;






export default V2ItemError;

