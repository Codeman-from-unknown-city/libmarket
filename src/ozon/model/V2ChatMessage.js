/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V2User from './V2User';

/**
 * The V2ChatMessage model module.
 * @module model/V2ChatMessage
 * @version 2.1
 */
class V2ChatMessage {
    /**
     * Constructs a new <code>V2ChatMessage</code>.
     * @alias module:model/V2ChatMessage
     */
    constructor() { 
        
        V2ChatMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V2ChatMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V2ChatMessage} obj Optional instance to populate.
     * @return {module:model/V2ChatMessage} The populated <code>V2ChatMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2ChatMessage();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], ['String']);
            }
            if (data.hasOwnProperty('is_read')) {
                obj['is_read'] = ApiClient.convertToType(data['is_read'], 'Boolean');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = V2User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V2ChatMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V2ChatMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['data'])) {
            throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          V2User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Дата создания сообщения.
 * @member {Date} created_at
 */
V2ChatMessage.prototype['created_at'] = undefined;

/**
 * Массив с содержимым сообщения в формате Markdown.
 * @member {Array.<String>} data
 */
V2ChatMessage.prototype['data'] = undefined;

/**
 * Признак, что сообщение прочитано.
 * @member {Boolean} is_read
 */
V2ChatMessage.prototype['is_read'] = undefined;

/**
 * Идентификатор сообщения.
 * @member {Number} messageId
 */
V2ChatMessage.prototype['messageId'] = undefined;

/**
 * @member {module:model/V2User} user
 */
V2ChatMessage.prototype['user'] = undefined;






export default V2ChatMessage;

