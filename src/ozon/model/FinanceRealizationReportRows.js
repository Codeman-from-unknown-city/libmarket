/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FinanceRealizationReportRows model module.
 * @module model/FinanceRealizationReportRows
 * @version 2.1
 */
class FinanceRealizationReportRows {
    /**
     * Constructs a new <code>FinanceRealizationReportRows</code>.
     * @alias module:model/FinanceRealizationReportRows
     */
    constructor() { 
        
        FinanceRealizationReportRows.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FinanceRealizationReportRows</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FinanceRealizationReportRows} obj Optional instance to populate.
     * @return {module:model/FinanceRealizationReportRows} The populated <code>FinanceRealizationReportRows</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FinanceRealizationReportRows();

            if (data.hasOwnProperty('row_number')) {
                obj['row_number'] = ApiClient.convertToType(data['row_number'], 'Number');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
            }
            if (data.hasOwnProperty('product_name')) {
                obj['product_name'] = ApiClient.convertToType(data['product_name'], 'String');
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('offer_id')) {
                obj['offer_id'] = ApiClient.convertToType(data['offer_id'], 'String');
            }
            if (data.hasOwnProperty('commission_percent')) {
                obj['commission_percent'] = ApiClient.convertToType(data['commission_percent'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('price_sale')) {
                obj['price_sale'] = ApiClient.convertToType(data['price_sale'], 'Number');
            }
            if (data.hasOwnProperty('sale_amount')) {
                obj['sale_amount'] = ApiClient.convertToType(data['sale_amount'], 'Number');
            }
            if (data.hasOwnProperty('sale_commission')) {
                obj['sale_commission'] = ApiClient.convertToType(data['sale_commission'], 'Number');
            }
            if (data.hasOwnProperty('sale_discount')) {
                obj['sale_discount'] = ApiClient.convertToType(data['sale_discount'], 'Number');
            }
            if (data.hasOwnProperty('sale_price_seller')) {
                obj['sale_price_seller'] = ApiClient.convertToType(data['sale_price_seller'], 'Number');
            }
            if (data.hasOwnProperty('sale_qty')) {
                obj['sale_qty'] = ApiClient.convertToType(data['sale_qty'], 'Number');
            }
            if (data.hasOwnProperty('return_sale')) {
                obj['return_sale'] = ApiClient.convertToType(data['return_sale'], 'Number');
            }
            if (data.hasOwnProperty('return_amount')) {
                obj['return_amount'] = ApiClient.convertToType(data['return_amount'], 'Number');
            }
            if (data.hasOwnProperty('return_commission')) {
                obj['return_commission'] = ApiClient.convertToType(data['return_commission'], 'Number');
            }
            if (data.hasOwnProperty('return_discount')) {
                obj['return_discount'] = ApiClient.convertToType(data['return_discount'], 'Number');
            }
            if (data.hasOwnProperty('return_price_seller')) {
                obj['return_price_seller'] = ApiClient.convertToType(data['return_price_seller'], 'Number');
            }
            if (data.hasOwnProperty('return_qty')) {
                obj['return_qty'] = ApiClient.convertToType(data['return_qty'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FinanceRealizationReportRows</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FinanceRealizationReportRows</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['product_name'] && !(typeof data['product_name'] === 'string' || data['product_name'] instanceof String)) {
            throw new Error("Expected the field `product_name` to be a primitive type in the JSON string but got " + data['product_name']);
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // ensure the json data is a string
        if (data['offer_id'] && !(typeof data['offer_id'] === 'string' || data['offer_id'] instanceof String)) {
            throw new Error("Expected the field `offer_id` to be a primitive type in the JSON string but got " + data['offer_id']);
        }

        return true;
    }


}



/**
 * Номер строки в отчёте.
 * @member {Number} row_number
 */
FinanceRealizationReportRows.prototype['row_number'] = undefined;

/**
 * Идентификатор товара.
 * @member {Number} product_id
 */
FinanceRealizationReportRows.prototype['product_id'] = undefined;

/**
 * Наименование товара.
 * @member {String} product_name
 */
FinanceRealizationReportRows.prototype['product_name'] = undefined;

/**
 * Штрихкод товара.
 * @member {String} barcode
 */
FinanceRealizationReportRows.prototype['barcode'] = undefined;

/**
 * Код товара продавца — артикул.
 * @member {String} offer_id
 */
FinanceRealizationReportRows.prototype['offer_id'] = undefined;

/**
 * Комиссия за продажу по категории.
 * @member {Number} commission_percent
 */
FinanceRealizationReportRows.prototype['commission_percent'] = undefined;

/**
 * Цена продавца с учётом его скидки.
 * @member {Number} price
 */
FinanceRealizationReportRows.prototype['price'] = undefined;

/**
 * Цена реализации — цена, по которой покупатель приобрёл товар.   Для реализованных товаров. 
 * @member {Number} price_sale
 */
FinanceRealizationReportRows.prototype['price_sale'] = undefined;

/**
 * Реализовано на сумму.  Стоимость реализованного товара с учётом количества и региональных коэффициентов. Расчёт осуществляется по цене `sale_amount`. 
 * @member {Number} sale_amount
 */
FinanceRealizationReportRows.prototype['sale_amount'] = undefined;

/**
 * Комиссия за реализованный товар с учётом скидок и наценки.
 * @member {Number} sale_commission
 */
FinanceRealizationReportRows.prototype['sale_commission'] = undefined;

/**
 * Доплата за счёт Ozon.  Сумма, которую Ozon компенсирует продавцу, если скидка Ozon больше или равна комиссии за продажу. 
 * @member {Number} sale_discount
 */
FinanceRealizationReportRows.prototype['sale_discount'] = undefined;

/**
 * Итого к начислению за реализованный товар.   Сумма после вычета комиссии за продажу, применения скидок и установленных наценок. 
 * @member {Number} sale_price_seller
 */
FinanceRealizationReportRows.prototype['sale_price_seller'] = undefined;

/**
 * Количество товара, реализованного по цене `price_sale`.
 * @member {Number} sale_qty
 */
FinanceRealizationReportRows.prototype['sale_qty'] = undefined;

/**
 * Цена реализации — цена, по которой покупатель приобрёл товар.   Для возвращённых товаров. 
 * @member {Number} return_sale
 */
FinanceRealizationReportRows.prototype['return_sale'] = undefined;

/**
 * Возвращено на сумму.   Стоимость возвращённого товара с учётом количества и региональных коэффициентов. Расчёт осуществляется по цене `return_sale`. 
 * @member {Number} return_amount
 */
FinanceRealizationReportRows.prototype['return_amount'] = undefined;

/**
 * Комиссия с учётом количества товара, предоставленных скидок и установленных наценок. Ozon компенсирует её в случае возврата товара.
 * @member {Number} return_commission
 */
FinanceRealizationReportRows.prototype['return_commission'] = undefined;

/**
 * Доплата за счёт Ozon.  Сумма скидки за счёт Ozon по возвращённому товару, которую Ozon компенсирует продавцу, если скидка Ozon больше или равна комиссии за продажу. 
 * @member {Number} return_discount
 */
FinanceRealizationReportRows.prototype['return_discount'] = undefined;

/**
 * Итого возвращено.   Сумма, начисляемая продавцу за возвращённый товар после вычета комиссии за продажу, применения скидок и установленных наценок. 
 * @member {Number} return_price_seller
 */
FinanceRealizationReportRows.prototype['return_price_seller'] = undefined;

/**
 * Количество возвращённого товара.
 * @member {Number} return_qty
 */
FinanceRealizationReportRows.prototype['return_qty'] = undefined;






export default FinanceRealizationReportRows;

