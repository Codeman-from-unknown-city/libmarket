/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsItemTurnoverDataV3ResponseItemTurnover from './AnalyticsItemTurnoverDataV3ResponseItemTurnover';

/**
 * The AnalyticsItemTurnoverDataV3ResponseCategory model module.
 * @module model/AnalyticsItemTurnoverDataV3ResponseCategory
 * @version 2.1
 */
class AnalyticsItemTurnoverDataV3ResponseCategory {
    /**
     * Constructs a new <code>AnalyticsItemTurnoverDataV3ResponseCategory</code>.
     * @alias module:model/AnalyticsItemTurnoverDataV3ResponseCategory
     */
    constructor() { 
        
        AnalyticsItemTurnoverDataV3ResponseCategory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyticsItemTurnoverDataV3ResponseCategory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyticsItemTurnoverDataV3ResponseCategory} obj Optional instance to populate.
     * @return {module:model/AnalyticsItemTurnoverDataV3ResponseCategory} The populated <code>AnalyticsItemTurnoverDataV3ResponseCategory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyticsItemTurnoverDataV3ResponseCategory();

            if (data.hasOwnProperty('avg_sold_litres')) {
                obj['avg_sold_litres'] = ApiClient.convertToType(data['avg_sold_litres'], 'Number');
            }
            if (data.hasOwnProperty('avg_stock_litres')) {
                obj['avg_stock_litres'] = ApiClient.convertToType(data['avg_stock_litres'], 'Number');
            }
            if (data.hasOwnProperty('billed_days')) {
                obj['billed_days'] = ApiClient.convertToType(data['billed_days'], 'Number');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'Number');
            }
            if (data.hasOwnProperty('commission')) {
                obj['commission'] = ApiClient.convertToType(data['commission'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('threshold_free')) {
                obj['threshold_free'] = ApiClient.convertToType(data['threshold_free'], 'Number');
            }
            if (data.hasOwnProperty('threshold_used')) {
                obj['threshold_used'] = ApiClient.convertToType(data['threshold_used'], 'Number');
            }
            if (data.hasOwnProperty('turnover')) {
                obj['turnover'] = ApiClient.convertToType(data['turnover'], 'String');
            }
            if (data.hasOwnProperty('turnover_items')) {
                obj['turnover_items'] = ApiClient.convertToType(data['turnover_items'], [AnalyticsItemTurnoverDataV3ResponseItemTurnover]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyticsItemTurnoverDataV3ResponseCategory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyticsItemTurnoverDataV3ResponseCategory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['turnover'] && !(typeof data['turnover'] === 'string' || data['turnover'] instanceof String)) {
            throw new Error("Expected the field `turnover` to be a primitive type in the JSON string but got " + data['turnover']);
        }
        if (data['turnover_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['turnover_items'])) {
                throw new Error("Expected the field `turnover_items` to be an array in the JSON data but got " + data['turnover_items']);
            }
            // validate the optional field `turnover_items` (array)
            for (const item of data['turnover_items']) {
                AnalyticsItemTurnoverDataV3ResponseItemTurnover.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * Среднесуточные продажи за определённый период. Измеряется в литрах.
 * @member {Number} avg_sold_litres
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['avg_sold_litres'] = undefined;

/**
 * Среднесуточный остаток на складах Ozon в литрах.
 * @member {Number} avg_stock_litres
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['avg_stock_litres'] = undefined;

/**
 * Количество прошедших дней с платным размещением.
 * @member {Number} billed_days
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['billed_days'] = undefined;

/**
 * Идентификатор категории.
 * @member {Number} category_id
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['category_id'] = undefined;

/**
 * Стоимость размещения одного литра товара в рублях.
 * @member {Number} commission
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['commission'] = undefined;

/**
 * Тариф за размещение в рублях. Зависит от объёма и количества дней размещения.
 * @member {Number} fee
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['fee'] = undefined;

/**
 * Пороговая оборачиваемость для бесплатного размещения. Измеряется в днях.
 * @member {Number} threshold_free
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['threshold_free'] = undefined;

/**
 * Превышенный порог оборачиваемости, по которому определили тариф. Измеряется в днях.
 * @member {Number} threshold_used
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['threshold_used'] = undefined;

/**
 * Фактическая оборачиваемость в днях.
 * @member {String} turnover
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['turnover'] = undefined;

/**
 * Данные по товарам категории.
 * @member {Array.<module:model/AnalyticsItemTurnoverDataV3ResponseItemTurnover>} turnover_items
 */
AnalyticsItemTurnoverDataV3ResponseCategory.prototype['turnover_items'] = undefined;






export default AnalyticsItemTurnoverDataV3ResponseCategory;

