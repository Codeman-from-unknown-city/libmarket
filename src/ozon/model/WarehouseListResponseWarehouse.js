/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WarehouseFirstMileType from './WarehouseFirstMileType';

/**
 * The WarehouseListResponseWarehouse model module.
 * @module model/WarehouseListResponseWarehouse
 * @version 2.1
 */
class WarehouseListResponseWarehouse {
    /**
     * Constructs a new <code>WarehouseListResponseWarehouse</code>.
     * @alias module:model/WarehouseListResponseWarehouse
     */
    constructor() { 
        
        WarehouseListResponseWarehouse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WarehouseListResponseWarehouse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WarehouseListResponseWarehouse} obj Optional instance to populate.
     * @return {module:model/WarehouseListResponseWarehouse} The populated <code>WarehouseListResponseWarehouse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WarehouseListResponseWarehouse();

            if (data.hasOwnProperty('has_entrusted_acceptance')) {
                obj['has_entrusted_acceptance'] = ApiClient.convertToType(data['has_entrusted_acceptance'], 'Boolean');
            }
            if (data.hasOwnProperty('is_rfbs')) {
                obj['is_rfbs'] = ApiClient.convertToType(data['is_rfbs'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('warehouse_id')) {
                obj['warehouse_id'] = ApiClient.convertToType(data['warehouse_id'], 'Number');
            }
            if (data.hasOwnProperty('can_print_act_in_advance')) {
                obj['can_print_act_in_advance'] = ApiClient.convertToType(data['can_print_act_in_advance'], 'Boolean');
            }
            if (data.hasOwnProperty('first_mile_type')) {
                obj['first_mile_type'] = WarehouseFirstMileType.constructFromObject(data['first_mile_type']);
            }
            if (data.hasOwnProperty('has_postings_limit')) {
                obj['has_postings_limit'] = ApiClient.convertToType(data['has_postings_limit'], 'Boolean');
            }
            if (data.hasOwnProperty('is_karantin')) {
                obj['is_karantin'] = ApiClient.convertToType(data['is_karantin'], 'Boolean');
            }
            if (data.hasOwnProperty('is_kgt')) {
                obj['is_kgt'] = ApiClient.convertToType(data['is_kgt'], 'Boolean');
            }
            if (data.hasOwnProperty('is_timetable_editable')) {
                obj['is_timetable_editable'] = ApiClient.convertToType(data['is_timetable_editable'], 'Boolean');
            }
            if (data.hasOwnProperty('min_postings_limit')) {
                obj['min_postings_limit'] = ApiClient.convertToType(data['min_postings_limit'], 'Number');
            }
            if (data.hasOwnProperty('postings_limit')) {
                obj['postings_limit'] = ApiClient.convertToType(data['postings_limit'], 'Number');
            }
            if (data.hasOwnProperty('min_working_days')) {
                obj['min_working_days'] = ApiClient.convertToType(data['min_working_days'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('working_days')) {
                obj['working_days'] = ApiClient.convertToType(data['working_days'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WarehouseListResponseWarehouse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WarehouseListResponseWarehouse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `first_mile_type`
        if (data['first_mile_type']) { // data not null
          WarehouseFirstMileType.validateJSON(data['first_mile_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['working_days'])) {
            throw new Error("Expected the field `working_days` to be an array in the JSON data but got " + data['working_days']);
        }

        return true;
    }


}



/**
 * Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.
 * @member {Boolean} has_entrusted_acceptance
 */
WarehouseListResponseWarehouse.prototype['has_entrusted_acceptance'] = undefined;

/**
 * Признак работы склада по схеме rFBS: - `true` — склад работает по схеме rFBS; - `false` — не работает по схеме rFBS. 
 * @member {Boolean} is_rfbs
 */
WarehouseListResponseWarehouse.prototype['is_rfbs'] = undefined;

/**
 * Название склада.
 * @member {String} name
 */
WarehouseListResponseWarehouse.prototype['name'] = undefined;

/**
 * Идентификатор склада.
 * @member {Number} warehouse_id
 */
WarehouseListResponseWarehouse.prototype['warehouse_id'] = undefined;

/**
 * Возможность печати акта приёма-передачи заранее. `true`, если печатать заранее возможно.
 * @member {Boolean} can_print_act_in_advance
 */
WarehouseListResponseWarehouse.prototype['can_print_act_in_advance'] = undefined;

/**
 * @member {module:model/WarehouseFirstMileType} first_mile_type
 */
WarehouseListResponseWarehouse.prototype['first_mile_type'] = undefined;

/**
 * Признак наличия лимита минимального количества заказов. `true`, если лимит есть.
 * @member {Boolean} has_postings_limit
 */
WarehouseListResponseWarehouse.prototype['has_postings_limit'] = undefined;

/**
 * Признак, что склад не работает из-за карантина.
 * @member {Boolean} is_karantin
 */
WarehouseListResponseWarehouse.prototype['is_karantin'] = undefined;

/**
 * Признак, что склад принимает крупногабаритные товары.
 * @member {Boolean} is_kgt
 */
WarehouseListResponseWarehouse.prototype['is_kgt'] = undefined;

/**
 * Признак, что можно менять расписание работы складов.
 * @member {Boolean} is_timetable_editable
 */
WarehouseListResponseWarehouse.prototype['is_timetable_editable'] = undefined;

/**
 * Минимальное значение лимита — количество заказов, которые можно привезти в одной поставке.
 * @member {Number} min_postings_limit
 */
WarehouseListResponseWarehouse.prototype['min_postings_limit'] = undefined;

/**
 * Значение лимита. `-1`, если лимита нет.
 * @member {Number} postings_limit
 */
WarehouseListResponseWarehouse.prototype['postings_limit'] = undefined;

/**
 * Количество рабочих дней склада.
 * @member {Number} min_working_days
 */
WarehouseListResponseWarehouse.prototype['min_working_days'] = undefined;

/**
 * Статус склада.  Соответствие статусов склада со статусами с личном кабинете:  | Статус Seller&nbsp;API | Статус в личном кабинете | |---|---| | `new` | Активируется | | `created` | Активный | | `disabled` | В архиве | | `blocked` | Заблокирован | | `disabled_due_to_limit` | На паузе | | `error` | Ошибка | 
 * @member {String} status
 */
WarehouseListResponseWarehouse.prototype['status'] = undefined;

/**
 * Рабочие дни склада.
 * @member {Array.<module:model/WarehouseListResponseWarehouse.WorkingDaysEnum>} working_days
 */
WarehouseListResponseWarehouse.prototype['working_days'] = undefined;





/**
 * Allowed values for the <code>workingDays</code> property.
 * @enum {String}
 * @readonly
 */
WarehouseListResponseWarehouse['WorkingDaysEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "7"
     * @const
     */
    "7": "7"
};



export default WarehouseListResponseWarehouse;

