/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V3Dimensions from './V3Dimensions';

/**
 * The V3PostingProductDetail model module.
 * @module model/V3PostingProductDetail
 * @version 2.1
 */
class V3PostingProductDetail {
    /**
     * Constructs a new <code>V3PostingProductDetail</code>.
     * Размеры товара.
     * @alias module:model/V3PostingProductDetail
     */
    constructor() { 
        
        V3PostingProductDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V3PostingProductDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V3PostingProductDetail} obj Optional instance to populate.
     * @return {module:model/V3PostingProductDetail} The populated <code>V3PostingProductDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V3PostingProductDetail();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = V3Dimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('mandatory_mark')) {
                obj['mandatory_mark'] = ApiClient.convertToType(data['mandatory_mark'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offer_id')) {
                obj['offer_id'] = ApiClient.convertToType(data['offer_id'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V3PostingProductDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V3PostingProductDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          V3Dimensions.validateJSON(data['dimensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mandatory_mark'])) {
            throw new Error("Expected the field `mandatory_mark` to be an array in the JSON data but got " + data['mandatory_mark']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['offer_id'] && !(typeof data['offer_id'] === 'string' || data['offer_id'] instanceof String)) {
            throw new Error("Expected the field `offer_id` to be a primitive type in the JSON string but got " + data['offer_id']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }

        return true;
    }


}



/**
 * @member {module:model/V3Dimensions} dimensions
 */
V3PostingProductDetail.prototype['dimensions'] = undefined;

/**
 * Обязательная маркировка товара.
 * @member {Array.<String>} mandatory_mark
 */
V3PostingProductDetail.prototype['mandatory_mark'] = undefined;

/**
 * Название.
 * @member {String} name
 */
V3PostingProductDetail.prototype['name'] = undefined;

/**
 * Идентификатор товара в системе продавца — артикул.
 * @member {String} offer_id
 */
V3PostingProductDetail.prototype['offer_id'] = undefined;

/**
 * Цена товара с учётом скидок — это значение показывается на карточке товара.
 * @member {String} price
 */
V3PostingProductDetail.prototype['price'] = undefined;

/**
 * Валюта ваших цен. Совпадает с валютой, которая установлена в настройках личного кабинета.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань. 
 * @member {String} currency_code
 */
V3PostingProductDetail.prototype['currency_code'] = undefined;

/**
 * Количество товара.
 * @member {Number} quantity
 */
V3PostingProductDetail.prototype['quantity'] = undefined;

/**
 * Идентификатор товара на Ozon.
 * @member {Number} sku
 */
V3PostingProductDetail.prototype['sku'] = undefined;






export default V3PostingProductDetail;

