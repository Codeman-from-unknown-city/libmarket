/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReportCreateCompanyFinanceReportRequest from '../model/ReportCreateCompanyFinanceReportRequest';
import ReportCreateCompanyPostingsReportRequest from '../model/ReportCreateCompanyPostingsReportRequest';
import ReportCreateCompanyProductsPricesReportRequest from '../model/ReportCreateCompanyProductsPricesReportRequest';
import ReportCreateCompanyProductsReportRequest from '../model/ReportCreateCompanyProductsReportRequest';
import ReportCreateCompanyReturnsReportRequest from '../model/ReportCreateCompanyReturnsReportRequest';
import ReportCreateCompanyStockReportRequest from '../model/ReportCreateCompanyStockReportRequest';
import ReportCreateCompanyTransactionsReportRequest from '../model/ReportCreateCompanyTransactionsReportRequest';
import ReportCreateDiscountedResponse from '../model/ReportCreateDiscountedResponse';
import ReportCreateProductsMovementReportRequest from '../model/ReportCreateProductsMovementReportRequest';
import ReportCreateReportResponse from '../model/ReportCreateReportResponse';
import ReportDiscountedInfoRequest from '../model/ReportDiscountedInfoRequest';
import ReportDiscountedInfoResponse from '../model/ReportDiscountedInfoResponse';
import ReportDiscountedListResponse from '../model/ReportDiscountedListResponse';
import ReportReportInfoRequest from '../model/ReportReportInfoRequest';
import ReportReportInfoResponse from '../model/ReportReportInfoResponse';
import ReportReportListRequest from '../model/ReportReportListRequest';
import ReportReportListResponse from '../model/ReportReportListResponse';
import RpcStatus from '../model/RpcStatus';
import V3FinanceCashFlowStatementListRequest from '../model/V3FinanceCashFlowStatementListRequest';
import V3FinanceCashFlowStatementListResponse from '../model/V3FinanceCashFlowStatementListResponse';

/**
* ReportAPI service.
* @module api/ReportAPIApi
* @version 2.1
*/
export default class ReportAPIApi {

    /**
    * Constructs a new ReportAPIApi. 
    * @alias module:api/ReportAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the financeAPIFinanceCashFlowStatementList operation.
     * @callback module:api/ReportAPIApi~financeAPIFinanceCashFlowStatementListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V3FinanceCashFlowStatementListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Финансовый отчёт
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V3FinanceCashFlowStatementListRequest} v3FinanceCashFlowStatementListRequest 
     * @param {module:api/ReportAPIApi~financeAPIFinanceCashFlowStatementListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V3FinanceCashFlowStatementListResponse}
     */
    financeAPIFinanceCashFlowStatementList(clientId, apiKey, v3FinanceCashFlowStatementListRequest, callback) {
      let postBody = v3FinanceCashFlowStatementListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling financeAPIFinanceCashFlowStatementList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling financeAPIFinanceCashFlowStatementList");
      }
      // verify the required parameter 'v3FinanceCashFlowStatementListRequest' is set
      if (v3FinanceCashFlowStatementListRequest === undefined || v3FinanceCashFlowStatementListRequest === null) {
        throw new Error("Missing the required parameter 'v3FinanceCashFlowStatementListRequest' when calling financeAPIFinanceCashFlowStatementList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V3FinanceCashFlowStatementListResponse;
      return this.apiClient.callApi(
        '/v1/finance/cash-flow-statement/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateCompanyFinanceReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateCompanyFinanceReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт о финансах
     * <aside class=\"warning\">С 30 сентября 2022 года метод будет отключён. Для получения информации о финансах используйте метод <a href=\"#operation/FinanceAPI_FinanceCashFlowStatementList\">/v1/finance/cash-flow-statement/list</a>.</aside>  Отчёт по финансам за выбранный период с информацией о балансе на начало и конец периода. Отчёт содержит:   - сумма, полученная за доставленные заказы;   - сумма комиссии за доставленные заказы;   - сумма за возвращённые товары;   - сумма, возвращённая за возвраты;   - сумма оплаты за услуги. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateCompanyFinanceReportRequest} reportCreateCompanyFinanceReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateCompanyFinanceReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateCompanyFinanceReport(clientId, apiKey, reportCreateCompanyFinanceReportRequest, callback) {
      let postBody = reportCreateCompanyFinanceReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateCompanyFinanceReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateCompanyFinanceReport");
      }
      // verify the required parameter 'reportCreateCompanyFinanceReportRequest' is set
      if (reportCreateCompanyFinanceReportRequest === undefined || reportCreateCompanyFinanceReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateCompanyFinanceReportRequest' when calling reportAPICreateCompanyFinanceReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/finance/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateCompanyPostingsReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateCompanyPostingsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт об отправлениях
     * Отчёт об отправлениях с информацией по заказам:   - статусы заказов,   - дата начала обработки,   - номера заказов,   - номера отправлений,   - стоимость отправлений,   - содержимое отправлений. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateCompanyPostingsReportRequest} reportCreateCompanyPostingsReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateCompanyPostingsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateCompanyPostingsReport(clientId, apiKey, reportCreateCompanyPostingsReportRequest, callback) {
      let postBody = reportCreateCompanyPostingsReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateCompanyPostingsReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateCompanyPostingsReport");
      }
      // verify the required parameter 'reportCreateCompanyPostingsReportRequest' is set
      if (reportCreateCompanyPostingsReportRequest === undefined || reportCreateCompanyPostingsReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateCompanyPostingsReportRequest' when calling reportAPICreateCompanyPostingsReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/postings/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateCompanyProductsPricesReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateCompanyProductsPricesReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт по ценам
     * <aside class=\"warning\">С 30 сентября 2022 года метод будет отключён. Для получения информации о ценах используйте метод <a href=\"#operation/ProductAPI_GetProductInfoPricesV4\">/v4/product/info/prices</a>.</aside>  Отчёт по товарам, который содержит:   - цены,   - комиссии,   - информацию о скидках,   - рыночную цену на товар,   - информацию об участии в акциях. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateCompanyProductsPricesReportRequest} reportCreateCompanyProductsPricesReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateCompanyProductsPricesReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateCompanyProductsPricesReport(clientId, apiKey, reportCreateCompanyProductsPricesReportRequest, callback) {
      let postBody = reportCreateCompanyProductsPricesReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateCompanyProductsPricesReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateCompanyProductsPricesReport");
      }
      // verify the required parameter 'reportCreateCompanyProductsPricesReportRequest' is set
      if (reportCreateCompanyProductsPricesReportRequest === undefined || reportCreateCompanyProductsPricesReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateCompanyProductsPricesReportRequest' when calling reportAPICreateCompanyProductsPricesReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/products/prices/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateCompanyProductsReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateCompanyProductsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт по товарам
     * Метод для получения отчёта с данными о товарах. Например, Ozon ID, количества товаров, цен, статуса.  Пояснения к некоторым полям:   - __Ozon Product ID__ — идентификатор товара в нашей системе. Например, если вы продаёте товар со склада Ozon и со своего склада, Ozon Product ID будет для них одинаковым.   - __FBO Ozon SKU ID__ — идентификатор товара, который продаётся со склада Ozon.   - __FBS Ozon SKU ID__ — идентификатор товара, который продаётся с вашего склада.   - __CrossBorder Ozon SKU__ — идентификатор товара, который продаётся из-за границы.   - __Barcode__ — штрихкод товара, который печатается на маркировке.   - __Статус товара__ — можно ли купить товар на Ozon. Если статус «Готов к продаже», товар купить нельзя.   - __Доступно на складе Ozon, шт__ — сколько штук товара на складе доступно для продажи. Это количество не включает зарезервированные товары.   - __Зарезервировано, шт__ — сколько штук товара со статусом «Зарезервировано». Товар зарезервирован с момента получения заказа на Ozon и до упаковки для передачи покупателю.   - __Текущая цена с учётом скидки, руб.__ — цена, по которой товар продаётся сейчас (на момент загрузки отчёта, с учётом скидки). Если товар участвует в акции, указана цена без её учёта.   - __Базовая цена (цена до скидок), руб.__ — цена без учёта скидки.   - __Цена Premium, руб.__ — цена для покупателей с подпиской Ozon Premium.   - __Рекомендованная цена, руб.__ — минимальная цена на товар на другой торговой площадке.   - __Актуальная ссылка на рекомендованную цену__ — ссылка на товар с рекомендованной ценой на другой торговой площадке. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateCompanyProductsReportRequest} reportCreateCompanyProductsReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateCompanyProductsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateCompanyProductsReport(clientId, apiKey, reportCreateCompanyProductsReportRequest, callback) {
      let postBody = reportCreateCompanyProductsReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateCompanyProductsReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateCompanyProductsReport");
      }
      // verify the required parameter 'reportCreateCompanyProductsReportRequest' is set
      if (reportCreateCompanyProductsReportRequest === undefined || reportCreateCompanyProductsReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateCompanyProductsReportRequest' when calling reportAPICreateCompanyProductsReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/products/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateCompanyReturnsReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateCompanyReturnsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт о возвратах
     * Отчёт содержит информацию о возвращённых товарах, которые приняты от покупателя, готовы к получению или переданы продавцу.  Метод подходит только для заказов, которые отправлены со склада продавца.  Пояснения к некоторым полям в отчёте:   - __ID товара в возврате__ — идентификатор товара в возврате.   - __ID отправления__ — идентификатор отправления в нашей системе.   - __Статус__ — статус возврата.   - __Артикул товара__ — ваш артикул товара.   - __Ozon ID__ — идентификатор товара в нашей системе.   - __Причина возврата__ — почему заказ пришлось вернуть или почему от него отказался покупатель.   - __Стоимость размещения__ — стоимость размещения возврата в пункте выдачи.   - __Переход в «Готов к получению»__ — дата, с которой возврат находится в пункте выдачи.   - __Последний день бесплатного размещения__ — последний день, когда возврат размещается в пункте выдачи бесплатно. Со следующего дня размещение становится платным. Подробнее о стоимости размещения в [Базе знаний продавца](https://seller-edu.ozon.ru/docs/prices/fees/kak-schitat-stoimost-razmechenia.html).   - __Дата возврата продавцу__ — когда возврат передали вам.   - __Местоположение__ — название пункта выдачи, в котором находится возврат.   - __Отправление вскрыто__ — если до возвращения заказа покупатель вскрыл его упаковку, в строке будет указано «Да».   - __Процент комиссии__ — ставка комиссии за продажу товара в процентах. Фиксируется в момент создания заказа покупателем. Подробнее о комиссиях в [Базе знаний продавца](https://seller-edu.ozon.ru/docs/prices/fees/comissions-tariffs.html#комиссии-за-продажу).   - __Комиссия (руб.)__ — комиссия Ozon за продажу товара в рублях, рассчитывается от цены товара.   - __Цена без комиссии (руб.)__ — стоимость товара за вычетом комиссии: Цена без комиссии = Стоимость товара − Комиссия.  Статусы возвратов:   - __В пути__ — покупатель передал нам возврат с товарами, которые ему не подошли.   - __В пункте выдачи__ — возврат прибыл в пункт выдачи, откуда вы можете его забрать. Пункт выдачи указан в столбце «Местоположение».   - __Получен__ — возврат передали вам. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateCompanyReturnsReportRequest} reportCreateCompanyReturnsReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateCompanyReturnsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateCompanyReturnsReport(clientId, apiKey, reportCreateCompanyReturnsReportRequest, callback) {
      let postBody = reportCreateCompanyReturnsReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateCompanyReturnsReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateCompanyReturnsReport");
      }
      // verify the required parameter 'reportCreateCompanyReturnsReportRequest' is set
      if (reportCreateCompanyReturnsReportRequest === undefined || reportCreateCompanyReturnsReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateCompanyReturnsReportRequest' when calling reportAPICreateCompanyReturnsReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/returns/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateCompanyStockReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateCompanyStockReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт об остатках
     * Отчёт с информацией о количестве доступных и зарезервированных единиц товара на складе.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateCompanyStockReportRequest} reportCreateCompanyStockReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateCompanyStockReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateCompanyStockReport(clientId, apiKey, reportCreateCompanyStockReportRequest, callback) {
      let postBody = reportCreateCompanyStockReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateCompanyStockReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateCompanyStockReport");
      }
      // verify the required parameter 'reportCreateCompanyStockReportRequest' is set
      if (reportCreateCompanyStockReportRequest === undefined || reportCreateCompanyStockReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateCompanyStockReportRequest' when calling reportAPICreateCompanyStockReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/stock/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateCompanyTransactionsReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateCompanyTransactionsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт по транзакциям
     * <aside class=\"warning\">С 30 сентября 2022 года метод будет отключён. Для получения информации о транзакциях используйте метод <a href=\"#operation/FinanceAPI_FinanceTransactionListV3\">/v3/finance/transaction/list</a>.</aside>  Отчёт по транзакциям с информацией о начислениях за выбранный период:  - дата и тип начисления,  - идентификатор отправления или услуги,  - детали по отправлению или услуге,  - сумма, полученная за продажу или удержанная за возврат,  - комиссия за продажу,  - сумма, удержанная за обработку и доставку,  - сумма, удержанная за возврат и отмену,  - общая сумма. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateCompanyTransactionsReportRequest} reportCreateCompanyTransactionsReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateCompanyTransactionsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateCompanyTransactionsReport(clientId, apiKey, reportCreateCompanyTransactionsReportRequest, callback) {
      let postBody = reportCreateCompanyTransactionsReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateCompanyTransactionsReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateCompanyTransactionsReport");
      }
      // verify the required parameter 'reportCreateCompanyTransactionsReportRequest' is set
      if (reportCreateCompanyTransactionsReportRequest === undefined || reportCreateCompanyTransactionsReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateCompanyTransactionsReportRequest' when calling reportAPICreateCompanyTransactionsReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/transactions/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateDiscountedReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateDiscountedReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateDiscountedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Выпуск отчёта об уценённых товарах
     * Запускает генерацию отчёта по уценённым товарам на складе Ozon. Ozon может сам уценить товар, например, при повреждении.  В результате запроса будет не сам отчёт, а его уникальный идентификатор.  Чтобы получить отчёт, отправьте идентификатор в запросе метода [/v1/report/discounted/info](#operation/ReportAPI_DiscountedReportInfo). 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object.<String, Object>} body 
     * @param {module:api/ReportAPIApi~reportAPICreateDiscountedReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateDiscountedResponse}
     */
    reportAPICreateDiscountedReport(clientId, apiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateDiscountedReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateDiscountedReport");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reportAPICreateDiscountedReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateDiscountedResponse;
      return this.apiClient.callApi(
        '/v1/report/discounted/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPICreateProductsMovementReport operation.
     * @callback module:api/ReportAPIApi~reportAPICreateProductsMovementReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportCreateReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт о перемещении товаров
     * Отчёт с полной информацией по товарам, а также количество единиц товара со статусами:   - товары с браком или на инвентаризации,   - товары в перемещении между фулфилмент-центрами,   - товары в доставке,    - товары, подлежащие реализации. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportCreateProductsMovementReportRequest} reportCreateProductsMovementReportRequest 
     * @param {module:api/ReportAPIApi~reportAPICreateProductsMovementReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportCreateReportResponse}
     */
    reportAPICreateProductsMovementReport(clientId, apiKey, reportCreateProductsMovementReportRequest, callback) {
      let postBody = reportCreateProductsMovementReportRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPICreateProductsMovementReport");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPICreateProductsMovementReport");
      }
      // verify the required parameter 'reportCreateProductsMovementReportRequest' is set
      if (reportCreateProductsMovementReportRequest === undefined || reportCreateProductsMovementReportRequest === null) {
        throw new Error("Missing the required parameter 'reportCreateProductsMovementReportRequest' when calling reportAPICreateProductsMovementReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportCreateReportResponse;
      return this.apiClient.callApi(
        '/v1/report/products/movement/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPIDiscountedReportInfo operation.
     * @callback module:api/ReportAPIApi~reportAPIDiscountedReportInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportDiscountedInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт об уценённых товарах
     * Возвращает информацию о созданном ранее отчёте по его идентификатору.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportDiscountedInfoRequest} reportDiscountedInfoRequest 
     * @param {module:api/ReportAPIApi~reportAPIDiscountedReportInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportDiscountedInfoResponse}
     */
    reportAPIDiscountedReportInfo(clientId, apiKey, reportDiscountedInfoRequest, callback) {
      let postBody = reportDiscountedInfoRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPIDiscountedReportInfo");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPIDiscountedReportInfo");
      }
      // verify the required parameter 'reportDiscountedInfoRequest' is set
      if (reportDiscountedInfoRequest === undefined || reportDiscountedInfoRequest === null) {
        throw new Error("Missing the required parameter 'reportDiscountedInfoRequest' when calling reportAPIDiscountedReportInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportDiscountedInfoResponse;
      return this.apiClient.callApi(
        '/v1/report/discounted/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPIDiscountedReportList operation.
     * @callback module:api/ReportAPIApi~reportAPIDiscountedReportListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportDiscountedListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список отчётов об уценённых товарах
     * Возвращает список отчётов, которые были сформированы раньше.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object.<String, Object>} body 
     * @param {module:api/ReportAPIApi~reportAPIDiscountedReportListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportDiscountedListResponse}
     */
    reportAPIDiscountedReportList(clientId, apiKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPIDiscountedReportList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPIDiscountedReportList");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reportAPIDiscountedReportList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportDiscountedListResponse;
      return this.apiClient.callApi(
        '/v1/report/discounted/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPIReportInfo operation.
     * @callback module:api/ReportAPIApi~reportAPIReportInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportReportInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация об отчёте
     * Возвращает информацию о созданном ранее отчёте по его идентификатору.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportReportInfoRequest} reportReportInfoRequest 
     * @param {module:api/ReportAPIApi~reportAPIReportInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportReportInfoResponse}
     */
    reportAPIReportInfo(clientId, apiKey, reportReportInfoRequest, callback) {
      let postBody = reportReportInfoRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPIReportInfo");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPIReportInfo");
      }
      // verify the required parameter 'reportReportInfoRequest' is set
      if (reportReportInfoRequest === undefined || reportReportInfoRequest === null) {
        throw new Error("Missing the required parameter 'reportReportInfoRequest' when calling reportAPIReportInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportReportInfoResponse;
      return this.apiClient.callApi(
        '/v1/report/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportAPIReportList operation.
     * @callback module:api/ReportAPIApi~reportAPIReportListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportReportListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список отчётов
     * Возвращает список отчётов, которые были сформированы раньше.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ReportReportListRequest} reportReportListRequest 
     * @param {module:api/ReportAPIApi~reportAPIReportListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportReportListResponse}
     */
    reportAPIReportList(clientId, apiKey, reportReportListRequest, callback) {
      let postBody = reportReportListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling reportAPIReportList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling reportAPIReportList");
      }
      // verify the required parameter 'reportReportListRequest' is set
      if (reportReportListRequest === undefined || reportReportListRequest === null) {
        throw new Error("Missing the required parameter 'reportReportListRequest' when calling reportAPIReportList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportReportListResponse;
      return this.apiClient.callApi(
        '/v1/report/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
