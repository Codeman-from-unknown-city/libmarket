/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import PostingBooleanResponse from '../model/PostingBooleanResponse';
import PostingCancelFbsPostingRequest from '../model/PostingCancelFbsPostingRequest';
import PostingCancelReasonListResponse from '../model/PostingCancelReasonListResponse';
import PostingCancelReasonRequest from '../model/PostingCancelReasonRequest';
import PostingCancelReasonResponse from '../model/PostingCancelReasonResponse';
import PostingFbsPostingDeliveredRequest from '../model/PostingFbsPostingDeliveredRequest';
import PostingFbsPostingDeliveringRequest from '../model/PostingFbsPostingDeliveringRequest';
import PostingFbsPostingLastMileRequest from '../model/PostingFbsPostingLastMileRequest';
import PostingFbsPostingMoveStatusResponse from '../model/PostingFbsPostingMoveStatusResponse';
import PostingFbsPostingSentbysellerRequest from '../model/PostingFbsPostingSentbysellerRequest';
import PostingFbsPostingSentbysellerResponse from '../model/PostingFbsPostingSentbysellerResponse';
import PostingFbsPostingTrackingNumberSetRequest from '../model/PostingFbsPostingTrackingNumberSetRequest';
import PostingGetFbsPostingByBarcodeRequest from '../model/PostingGetFbsPostingByBarcodeRequest';
import PostingMovePostingRequest from '../model/PostingMovePostingRequest';
import PostingPostingFBSActCheckStatusRequest from '../model/PostingPostingFBSActCheckStatusRequest';
import PostingPostingFBSActCheckStatusResponse from '../model/PostingPostingFBSActCheckStatusResponse';
import PostingPostingFBSActCreateRequest from '../model/PostingPostingFBSActCreateRequest';
import PostingPostingFBSActCreateResponse from '../model/PostingPostingFBSActCreateResponse';
import PostingPostingFBSActGetContainerLabelsRequest from '../model/PostingPostingFBSActGetContainerLabelsRequest';
import PostingPostingFBSActGetContainerLabelsResponse from '../model/PostingPostingFBSActGetContainerLabelsResponse';
import PostingPostingFBSGetActRequest from '../model/PostingPostingFBSGetActRequest';
import PostingPostingFBSGetActResponse from '../model/PostingPostingFBSGetActResponse';
import PostingPostingFBSPackageLabelRequest from '../model/PostingPostingFBSPackageLabelRequest';
import PostingPostingFBSPackageLabelResponse from '../model/PostingPostingFBSPackageLabelResponse';
import PostingPostingProductCancelRequest from '../model/PostingPostingProductCancelRequest';
import PostingPostingProductCancelResponse from '../model/PostingPostingProductCancelResponse';
import PostingPostingProductChangeRequest from '../model/PostingPostingProductChangeRequest';
import PostingPostingProductChangeResponse from '../model/PostingPostingProductChangeResponse';
import Postingv1GetCarriageAvailableListRequest from '../model/Postingv1GetCarriageAvailableListRequest';
import Postingv1GetCarriageAvailableListResponse from '../model/Postingv1GetCarriageAvailableListResponse';
import Postingv3GetFbsPostingListRequest from '../model/Postingv3GetFbsPostingListRequest';
import Postingv3GetFbsPostingRequest from '../model/Postingv3GetFbsPostingRequest';
import Postingv3GetFbsPostingUnfulfilledListRequest from '../model/Postingv3GetFbsPostingUnfulfilledListRequest';
import Postingv3GetFbsPostingUnfulfilledListResponse from '../model/Postingv3GetFbsPostingUnfulfilledListResponse';
import RpcStatus from '../model/RpcStatus';
import V1GetRestrictionsRequest from '../model/V1GetRestrictionsRequest';
import V1GetRestrictionsResponse from '../model/V1GetRestrictionsResponse';
import V2FbsPostingProductCountryListRequest from '../model/V2FbsPostingProductCountryListRequest';
import V2FbsPostingProductCountryListResponse from '../model/V2FbsPostingProductCountryListResponse';
import V2FbsPostingProductCountrySetRequest from '../model/V2FbsPostingProductCountrySetRequest';
import V2FbsPostingProductCountrySetResponse from '../model/V2FbsPostingProductCountrySetResponse';
import V2FbsPostingResponse from '../model/V2FbsPostingResponse';
import V2PostingFBSActGetPostingsRequest from '../model/V2PostingFBSActGetPostingsRequest';
import V2PostingFBSActGetPostingsResponse from '../model/V2PostingFBSActGetPostingsResponse';
import V2PostingFBSActListRequest from '../model/V2PostingFBSActListRequest';
import V2PostingFBSActListResponse from '../model/V2PostingFBSActListResponse';
import V2PostingFBSDigitalActCheckStatusRequest from '../model/V2PostingFBSDigitalActCheckStatusRequest';
import V2PostingFBSDigitalActCheckStatusResponse from '../model/V2PostingFBSDigitalActCheckStatusResponse';
import V2PostingFBSDigitalActDocumentSignRequest from '../model/V2PostingFBSDigitalActDocumentSignRequest';
import V2PostingFBSDigitalActDocumentSignResponse from '../model/V2PostingFBSDigitalActDocumentSignResponse';
import V2PostingFBSGetDigitalActRequest from '../model/V2PostingFBSGetDigitalActRequest';
import V2PostingFBSGetDigitalActResponse from '../model/V2PostingFBSGetDigitalActResponse';
import V3FbsPostingShipByPackageRequest from '../model/V3FbsPostingShipByPackageRequest';
import V3FbsPostingShipRequest from '../model/V3FbsPostingShipRequest';
import V3FbsPostingShipResponse from '../model/V3FbsPostingShipResponse';
import V3GetFbsPostingListResponseV3 from '../model/V3GetFbsPostingListResponseV3';
import V3GetFbsPostingResponseV3 from '../model/V3GetFbsPostingResponseV3';

/**
* FBS service.
* @module api/FBSApi
* @version 2.1
*/
export default class FBSApi {

    /**
    * Constructs a new FBSApi. 
    * @alias module:api/FBSApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postingAPIActPostingList operation.
     * @callback module:api/FBSApi~postingAPIActPostingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2PostingFBSActGetPostingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список отправлений в акте
     * Возвращает список отправлений в акте по его идентификатору.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V2PostingFBSActGetPostingsRequest} v2PostingFBSActGetPostingsRequest 
     * @param {module:api/FBSApi~postingAPIActPostingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2PostingFBSActGetPostingsResponse}
     */
    postingAPIActPostingList(clientId, apiKey, v2PostingFBSActGetPostingsRequest, callback) {
      let postBody = v2PostingFBSActGetPostingsRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIActPostingList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIActPostingList");
      }
      // verify the required parameter 'v2PostingFBSActGetPostingsRequest' is set
      if (v2PostingFBSActGetPostingsRequest === undefined || v2PostingFBSActGetPostingsRequest === null) {
        throw new Error("Missing the required parameter 'v2PostingFBSActGetPostingsRequest' when calling postingAPIActPostingList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2PostingFBSActGetPostingsResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/act/get-postings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPICancelFbsPosting operation.
     * @callback module:api/FBSApi~postingAPICancelFbsPostingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingBooleanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отменить отправление
     * Меняет статус отправления на `cancelled`.  Если вы используете схему rFBS, у вас доступны следующие идентификаторы причин отмены — `cancel_reason_id`:  - `352` — товара нет в наличии; - `400` — остался только бракованный товар; - `401` — отмена из арбитража; - `402` — другая причина; - `665` — покупатель не забрал заказ; - `666` — отсутствует доставка в данный регион; - `667` — заказ утерян службой доставки.  Для условно-доставленных заказов доступны только 3 последние причины.  Если значение параметра `cancel_reason_id` — 402, заполните поле `cancel_reason_message`. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingCancelFbsPostingRequest} postingCancelFbsPostingRequest 
     * @param {module:api/FBSApi~postingAPICancelFbsPostingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingBooleanResponse}
     */
    postingAPICancelFbsPosting(clientId, apiKey, postingCancelFbsPostingRequest, callback) {
      let postBody = postingCancelFbsPostingRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPICancelFbsPosting");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPICancelFbsPosting");
      }
      // verify the required parameter 'postingCancelFbsPostingRequest' is set
      if (postingCancelFbsPostingRequest === undefined || postingCancelFbsPostingRequest === null) {
        throw new Error("Missing the required parameter 'postingCancelFbsPostingRequest' when calling postingAPICancelFbsPosting");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingBooleanResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPICancelFbsPostingProduct operation.
     * @callback module:api/FBSApi~postingAPICancelFbsPostingProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingPostingProductCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отменить отправку некоторых товаров в отправлении
     * Используйте метод, если вы не можете отправить часть продуктов из отправления.  Идентификаторы причин отмены `cancel_reason_id` при работе по схеме rFBS:  - `352` — товара нет в наличии; - `400` — остался только бракованный товар; - `401` — отмена из арбитража; - `402` — другая причина; - `665` — покупатель не забрал заказ; - `666` — нет доставки в этот регион; - `667` — заказ утерян службой доставки.  Для условно-доставленных заказов доступны только 3 последние причины.  Если значение параметра `cancel_reason_id` — 402, заполните поле `cancel_reason_message`. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostingPostingProductCancelRequest} opts.postingPostingProductCancelRequest 
     * @param {module:api/FBSApi~postingAPICancelFbsPostingProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingPostingProductCancelResponse}
     */
    postingAPICancelFbsPostingProduct(clientId, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['postingPostingProductCancelRequest'];
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPICancelFbsPostingProduct");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPICancelFbsPostingProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingPostingProductCancelResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/product/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIChangeFbsPostingProduct operation.
     * @callback module:api/FBSApi~postingAPIChangeFbsPostingProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingPostingProductChangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить вес для весовых товаров в отправлении
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostingPostingProductChangeRequest} opts.postingPostingProductChangeRequest 
     * @param {module:api/FBSApi~postingAPIChangeFbsPostingProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingPostingProductChangeResponse}
     */
    postingAPIChangeFbsPostingProduct(clientId, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['postingPostingProductChangeRequest'];
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIChangeFbsPostingProduct");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIChangeFbsPostingProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingPostingProductChangeResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/product/change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIDigitalActDocumentSign operation.
     * @callback module:api/FBSApi~postingAPIDigitalActDocumentSignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2PostingFBSDigitalActDocumentSignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Подписать документы по отгрузке
     * Подписывает документы по отгрузке в системе электронных документов Ozon логистики.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V2PostingFBSDigitalActDocumentSignRequest} v2PostingFBSDigitalActDocumentSignRequest 
     * @param {module:api/FBSApi~postingAPIDigitalActDocumentSignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2PostingFBSDigitalActDocumentSignResponse}
     */
    postingAPIDigitalActDocumentSign(clientId, apiKey, v2PostingFBSDigitalActDocumentSignRequest, callback) {
      let postBody = v2PostingFBSDigitalActDocumentSignRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIDigitalActDocumentSign");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIDigitalActDocumentSign");
      }
      // verify the required parameter 'v2PostingFBSDigitalActDocumentSignRequest' is set
      if (v2PostingFBSDigitalActDocumentSignRequest === undefined || v2PostingFBSDigitalActDocumentSignRequest === null) {
        throw new Error("Missing the required parameter 'v2PostingFBSDigitalActDocumentSignRequest' when calling postingAPIDigitalActDocumentSign");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2PostingFBSDigitalActDocumentSignResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/digital/act/document-sign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIFbsActList operation.
     * @callback module:api/FBSApi~postingAPIFbsActListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2PostingFBSActListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список актов по отгрузкам
     * Возвращает список актов по отгрузкам с возможностью отфильтровать отгрузки по периоду, статусу и типу интеграции.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V2PostingFBSActListRequest} v2PostingFBSActListRequest 
     * @param {module:api/FBSApi~postingAPIFbsActListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2PostingFBSActListResponse}
     */
    postingAPIFbsActList(clientId, apiKey, v2PostingFBSActListRequest, callback) {
      let postBody = v2PostingFBSActListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIFbsActList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIFbsActList");
      }
      // verify the required parameter 'v2PostingFBSActListRequest' is set
      if (v2PostingFBSActListRequest === undefined || v2PostingFBSActListRequest === null) {
        throw new Error("Missing the required parameter 'v2PostingFBSActListRequest' when calling postingAPIFbsActList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2PostingFBSActListResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/act/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIFbsPostingDelivered operation.
     * @callback module:api/FBSApi~postingAPIFbsPostingDeliveredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingFbsPostingMoveStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить статус на «Доставлено»
     * Перевести отправление в статус «Доставлено», если используется сторонняя служба доставки.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingFbsPostingDeliveredRequest} postingFbsPostingDeliveredRequest 
     * @param {module:api/FBSApi~postingAPIFbsPostingDeliveredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingFbsPostingMoveStatusResponse}
     */
    postingAPIFbsPostingDelivered(clientId, apiKey, postingFbsPostingDeliveredRequest, callback) {
      let postBody = postingFbsPostingDeliveredRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIFbsPostingDelivered");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIFbsPostingDelivered");
      }
      // verify the required parameter 'postingFbsPostingDeliveredRequest' is set
      if (postingFbsPostingDeliveredRequest === undefined || postingFbsPostingDeliveredRequest === null) {
        throw new Error("Missing the required parameter 'postingFbsPostingDeliveredRequest' when calling postingAPIFbsPostingDelivered");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingFbsPostingMoveStatusResponse;
      return this.apiClient.callApi(
        '/v2/fbs/posting/delivered', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIFbsPostingDelivering operation.
     * @callback module:api/FBSApi~postingAPIFbsPostingDeliveringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingFbsPostingMoveStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить статус на «Доставляется»
     * Перевести отправление в статус «Доставляется», если используется сторонняя служба доставки.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingFbsPostingDeliveringRequest} postingFbsPostingDeliveringRequest 
     * @param {module:api/FBSApi~postingAPIFbsPostingDeliveringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingFbsPostingMoveStatusResponse}
     */
    postingAPIFbsPostingDelivering(clientId, apiKey, postingFbsPostingDeliveringRequest, callback) {
      let postBody = postingFbsPostingDeliveringRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIFbsPostingDelivering");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIFbsPostingDelivering");
      }
      // verify the required parameter 'postingFbsPostingDeliveringRequest' is set
      if (postingFbsPostingDeliveringRequest === undefined || postingFbsPostingDeliveringRequest === null) {
        throw new Error("Missing the required parameter 'postingFbsPostingDeliveringRequest' when calling postingAPIFbsPostingDelivering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingFbsPostingMoveStatusResponse;
      return this.apiClient.callApi(
        '/v2/fbs/posting/delivering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIFbsPostingLastMile operation.
     * @callback module:api/FBSApi~postingAPIFbsPostingLastMileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingFbsPostingMoveStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить статус на «Последняя миля»
     * Перевести отправление в статус «Последняя миля», если используется сторонняя служба доставки.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingFbsPostingLastMileRequest} postingFbsPostingLastMileRequest 
     * @param {module:api/FBSApi~postingAPIFbsPostingLastMileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingFbsPostingMoveStatusResponse}
     */
    postingAPIFbsPostingLastMile(clientId, apiKey, postingFbsPostingLastMileRequest, callback) {
      let postBody = postingFbsPostingLastMileRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIFbsPostingLastMile");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIFbsPostingLastMile");
      }
      // verify the required parameter 'postingFbsPostingLastMileRequest' is set
      if (postingFbsPostingLastMileRequest === undefined || postingFbsPostingLastMileRequest === null) {
        throw new Error("Missing the required parameter 'postingFbsPostingLastMileRequest' when calling postingAPIFbsPostingLastMile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingFbsPostingMoveStatusResponse;
      return this.apiClient.callApi(
        '/v2/fbs/posting/last-mile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIFbsPostingSentbyseller operation.
     * @callback module:api/FBSApi~postingAPIFbsPostingSentbysellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingFbsPostingSentbysellerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить статус на «Отправлено продавцом»
     * Перевести отправление в статус «Отправлено продавцом». Статус доступен только продавцам с первой милей, продающим из-за рубежа.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingFbsPostingSentbysellerRequest} postingFbsPostingSentbysellerRequest 
     * @param {module:api/FBSApi~postingAPIFbsPostingSentbysellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingFbsPostingSentbysellerResponse}
     */
    postingAPIFbsPostingSentbyseller(clientId, apiKey, postingFbsPostingSentbysellerRequest, callback) {
      let postBody = postingFbsPostingSentbysellerRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIFbsPostingSentbyseller");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIFbsPostingSentbyseller");
      }
      // verify the required parameter 'postingFbsPostingSentbysellerRequest' is set
      if (postingFbsPostingSentbysellerRequest === undefined || postingFbsPostingSentbysellerRequest === null) {
        throw new Error("Missing the required parameter 'postingFbsPostingSentbysellerRequest' when calling postingAPIFbsPostingSentbyseller");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingFbsPostingSentbysellerResponse;
      return this.apiClient.callApi(
        '/v2/fbs/posting/sent-by-seller', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIFbsPostingTrackingNumberSet operation.
     * @callback module:api/FBSApi~postingAPIFbsPostingTrackingNumberSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingFbsPostingMoveStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить трек-номера
     * Добавить трек-номера к отправлениям.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingFbsPostingTrackingNumberSetRequest} postingFbsPostingTrackingNumberSetRequest 
     * @param {module:api/FBSApi~postingAPIFbsPostingTrackingNumberSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingFbsPostingMoveStatusResponse}
     */
    postingAPIFbsPostingTrackingNumberSet(clientId, apiKey, postingFbsPostingTrackingNumberSetRequest, callback) {
      let postBody = postingFbsPostingTrackingNumberSetRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIFbsPostingTrackingNumberSet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIFbsPostingTrackingNumberSet");
      }
      // verify the required parameter 'postingFbsPostingTrackingNumberSetRequest' is set
      if (postingFbsPostingTrackingNumberSetRequest === undefined || postingFbsPostingTrackingNumberSetRequest === null) {
        throw new Error("Missing the required parameter 'postingFbsPostingTrackingNumberSetRequest' when calling postingAPIFbsPostingTrackingNumberSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingFbsPostingMoveStatusResponse;
      return this.apiClient.callApi(
        '/v2/fbs/posting/tracking-number/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetCarriageAvailableList operation.
     * @callback module:api/FBSApi~postingAPIGetCarriageAvailableListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Postingv1GetCarriageAvailableListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список доступных перевозок
     * Метод для получения перевозок, для которых нужно распечатать акт приёма-передачи и транспортную накладную.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Postingv1GetCarriageAvailableListRequest} postingv1GetCarriageAvailableListRequest 
     * @param {module:api/FBSApi~postingAPIGetCarriageAvailableListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Postingv1GetCarriageAvailableListResponse}
     */
    postingAPIGetCarriageAvailableList(clientId, apiKey, postingv1GetCarriageAvailableListRequest, callback) {
      let postBody = postingv1GetCarriageAvailableListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetCarriageAvailableList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetCarriageAvailableList");
      }
      // verify the required parameter 'postingv1GetCarriageAvailableListRequest' is set
      if (postingv1GetCarriageAvailableListRequest === undefined || postingv1GetCarriageAvailableListRequest === null) {
        throw new Error("Missing the required parameter 'postingv1GetCarriageAvailableListRequest' when calling postingAPIGetCarriageAvailableList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Postingv1GetCarriageAvailableListResponse;
      return this.apiClient.callApi(
        '/v1/posting/carriage-available/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetFbsPostingByBarcode operation.
     * @callback module:api/FBSApi~postingAPIGetFbsPostingByBarcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2FbsPostingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию об отправлении по штрихкоду
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingGetFbsPostingByBarcodeRequest} postingGetFbsPostingByBarcodeRequest 
     * @param {module:api/FBSApi~postingAPIGetFbsPostingByBarcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2FbsPostingResponse}
     */
    postingAPIGetFbsPostingByBarcode(clientId, apiKey, postingGetFbsPostingByBarcodeRequest, callback) {
      let postBody = postingGetFbsPostingByBarcodeRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetFbsPostingByBarcode");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetFbsPostingByBarcode");
      }
      // verify the required parameter 'postingGetFbsPostingByBarcodeRequest' is set
      if (postingGetFbsPostingByBarcodeRequest === undefined || postingGetFbsPostingByBarcodeRequest === null) {
        throw new Error("Missing the required parameter 'postingGetFbsPostingByBarcodeRequest' when calling postingAPIGetFbsPostingByBarcode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2FbsPostingResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/get-by-barcode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetFbsPostingListV3 operation.
     * @callback module:api/FBSApi~postingAPIGetFbsPostingListV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V3GetFbsPostingListResponseV3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список отправлений (версия 3)
     * Возвращает список отправлений за указанный период времени — он должен быть не больше одного года.  Дополнительно можно отфильтровать отправления по их статусу — список доступных для выдачи статусов указан в описании параметра `filter.status`.  `has_next = true` в ответе может значить, что вернули не весь массив отправлений. Чтобы получить информацию об остальных отправлениях, сделайте новый запрос с другим значением `offset`. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Postingv3GetFbsPostingListRequest} postingv3GetFbsPostingListRequest 
     * @param {module:api/FBSApi~postingAPIGetFbsPostingListV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V3GetFbsPostingListResponseV3}
     */
    postingAPIGetFbsPostingListV3(clientId, apiKey, postingv3GetFbsPostingListRequest, callback) {
      let postBody = postingv3GetFbsPostingListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetFbsPostingListV3");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetFbsPostingListV3");
      }
      // verify the required parameter 'postingv3GetFbsPostingListRequest' is set
      if (postingv3GetFbsPostingListRequest === undefined || postingv3GetFbsPostingListRequest === null) {
        throw new Error("Missing the required parameter 'postingv3GetFbsPostingListRequest' when calling postingAPIGetFbsPostingListV3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V3GetFbsPostingListResponseV3;
      return this.apiClient.callApi(
        '/v3/posting/fbs/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetFbsPostingUnfulfilledList operation.
     * @callback module:api/FBSApi~postingAPIGetFbsPostingUnfulfilledListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Postingv3GetFbsPostingUnfulfilledListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список необработанных отправлений (версия 3)
     * Возвращает список необработанных отправлений за указанный период времени — он должен быть не больше одного года.  Возможные статусы отправлений: - `awaiting_registration` — ожидает регистрации, - `acceptance_in_progress` — идёт приёмка, - `awaiting_approve` — ожидает подтверждения, - `awaiting_packaging` — ожидает упаковки, - `awaiting_deliver` — ожидает отгрузки, - `arbitration` — арбитраж, - `client_arbitration` — клиентский арбитраж доставки, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `delivered` — доставлено, - `cancelled` — отменено, - `not_accepted` — не принят на сортировочном центре, - `sent_by_seller` — отправлено продавцом. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Postingv3GetFbsPostingUnfulfilledListRequest} postingv3GetFbsPostingUnfulfilledListRequest 
     * @param {module:api/FBSApi~postingAPIGetFbsPostingUnfulfilledListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Postingv3GetFbsPostingUnfulfilledListResponse}
     */
    postingAPIGetFbsPostingUnfulfilledList(clientId, apiKey, postingv3GetFbsPostingUnfulfilledListRequest, callback) {
      let postBody = postingv3GetFbsPostingUnfulfilledListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetFbsPostingUnfulfilledList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetFbsPostingUnfulfilledList");
      }
      // verify the required parameter 'postingv3GetFbsPostingUnfulfilledListRequest' is set
      if (postingv3GetFbsPostingUnfulfilledListRequest === undefined || postingv3GetFbsPostingUnfulfilledListRequest === null) {
        throw new Error("Missing the required parameter 'postingv3GetFbsPostingUnfulfilledListRequest' when calling postingAPIGetFbsPostingUnfulfilledList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Postingv3GetFbsPostingUnfulfilledListResponse;
      return this.apiClient.callApi(
        '/v3/posting/fbs/unfulfilled/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetFbsPostingV3 operation.
     * @callback module:api/FBSApi~postingAPIGetFbsPostingV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V3GetFbsPostingResponseV3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию об отправлении по идентификатору
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Postingv3GetFbsPostingRequest} postingv3GetFbsPostingRequest 
     * @param {module:api/FBSApi~postingAPIGetFbsPostingV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V3GetFbsPostingResponseV3}
     */
    postingAPIGetFbsPostingV3(clientId, apiKey, postingv3GetFbsPostingRequest, callback) {
      let postBody = postingv3GetFbsPostingRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetFbsPostingV3");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetFbsPostingV3");
      }
      // verify the required parameter 'postingv3GetFbsPostingRequest' is set
      if (postingv3GetFbsPostingRequest === undefined || postingv3GetFbsPostingRequest === null) {
        throw new Error("Missing the required parameter 'postingv3GetFbsPostingRequest' when calling postingAPIGetFbsPostingV3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V3GetFbsPostingResponseV3;
      return this.apiClient.callApi(
        '/v3/posting/fbs/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetPostingFbsCancelReasonList operation.
     * @callback module:api/FBSApi~postingAPIGetPostingFbsCancelReasonListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingCancelReasonListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Причины отмены отправлений
     * Возвращает список причин отмены для всех отправлений.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:api/FBSApi~postingAPIGetPostingFbsCancelReasonListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingCancelReasonListResponse}
     */
    postingAPIGetPostingFbsCancelReasonList(clientId, apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetPostingFbsCancelReasonList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetPostingFbsCancelReasonList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostingCancelReasonListResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/cancel-reason/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetPostingFbsCancelReasonV1 operation.
     * @callback module:api/FBSApi~postingAPIGetPostingFbsCancelReasonV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingCancelReasonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Причины отмены отправления
     * Возвращает список причин отмены для конкретных отправлений.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingCancelReasonRequest} postingCancelReasonRequest 
     * @param {module:api/FBSApi~postingAPIGetPostingFbsCancelReasonV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingCancelReasonResponse}
     */
    postingAPIGetPostingFbsCancelReasonV1(clientId, apiKey, postingCancelReasonRequest, callback) {
      let postBody = postingCancelReasonRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetPostingFbsCancelReasonV1");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetPostingFbsCancelReasonV1");
      }
      // verify the required parameter 'postingCancelReasonRequest' is set
      if (postingCancelReasonRequest === undefined || postingCancelReasonRequest === null) {
        throw new Error("Missing the required parameter 'postingCancelReasonRequest' when calling postingAPIGetPostingFbsCancelReasonV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingCancelReasonResponse;
      return this.apiClient.callApi(
        '/v1/posting/fbs/cancel-reason', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIGetRestrictions operation.
     * @callback module:api/FBSApi~postingAPIGetRestrictionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetRestrictionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить ограничения пункта приёма
     * Метод для получения габаритных, весовых и прочих ограничений пункта приёма по номеру отправления. Метод применим только для работы по схеме FBS.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1GetRestrictionsRequest} v1GetRestrictionsRequest 
     * @param {module:api/FBSApi~postingAPIGetRestrictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetRestrictionsResponse}
     */
    postingAPIGetRestrictions(clientId, apiKey, v1GetRestrictionsRequest, callback) {
      let postBody = v1GetRestrictionsRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIGetRestrictions");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIGetRestrictions");
      }
      // verify the required parameter 'v1GetRestrictionsRequest' is set
      if (v1GetRestrictionsRequest === undefined || v1GetRestrictionsRequest === null) {
        throw new Error("Missing the required parameter 'v1GetRestrictionsRequest' when calling postingAPIGetRestrictions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetRestrictionsResponse;
      return this.apiClient.callApi(
        '/v1/posting/fbs/restrictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIListCountryProductFbsPostingV2 operation.
     * @callback module:api/FBSApi~postingAPIListCountryProductFbsPostingV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V2FbsPostingProductCountryListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список доступных стран-изготовителей
     * Метод для получения списка доступных стран-изготовителей и их ISO кодов.
     * @param {module:model/V2FbsPostingProductCountryListRequest} v2FbsPostingProductCountryListRequest 
     * @param {module:api/FBSApi~postingAPIListCountryProductFbsPostingV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2FbsPostingProductCountryListResponse}
     */
    postingAPIListCountryProductFbsPostingV2(v2FbsPostingProductCountryListRequest, callback) {
      let postBody = v2FbsPostingProductCountryListRequest;
      // verify the required parameter 'v2FbsPostingProductCountryListRequest' is set
      if (v2FbsPostingProductCountryListRequest === undefined || v2FbsPostingProductCountryListRequest === null) {
        throw new Error("Missing the required parameter 'v2FbsPostingProductCountryListRequest' when calling postingAPIListCountryProductFbsPostingV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2FbsPostingProductCountryListResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/product/country/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIMoveFbsPostingToArbitration operation.
     * @callback module:api/FBSApi~postingAPIMoveFbsPostingToArbitrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingBooleanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Открыть спор по отправлению
     * Если отправление передано в доставку, но не просканировано в сортировочном центре, можно открыть спор. Открытый спор переведёт отправление в статус `arbitration`.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostingMovePostingRequest} opts.postingMovePostingRequest 
     * @param {module:api/FBSApi~postingAPIMoveFbsPostingToArbitrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingBooleanResponse}
     */
    postingAPIMoveFbsPostingToArbitration(clientId, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['postingMovePostingRequest'];
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIMoveFbsPostingToArbitration");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIMoveFbsPostingToArbitration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingBooleanResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/arbitration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIMoveFbsPostingToAwaitingDelivery operation.
     * @callback module:api/FBSApi~postingAPIMoveFbsPostingToAwaitingDeliveryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingBooleanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Передать отправление к отгрузке
     * Передает спорные заказы к отгрузке. Статус отправления изменится на `awaiting_deliver`.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostingMovePostingRequest} opts.postingMovePostingRequest 
     * @param {module:api/FBSApi~postingAPIMoveFbsPostingToAwaitingDeliveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingBooleanResponse}
     */
    postingAPIMoveFbsPostingToAwaitingDelivery(clientId, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['postingMovePostingRequest'];
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIMoveFbsPostingToAwaitingDelivery");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIMoveFbsPostingToAwaitingDelivery");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingBooleanResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/awaiting-delivery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPackageShipFbsPostingV3 operation.
     * @callback module:api/FBSApi~postingAPIPackageShipFbsPostingV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V3FbsPostingShipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Частичная сборка отправления
     * Если в запросе передать часть продуктов из отправления, то в результате обработки запроса первичное отправление разделится на две части. В первичном несобранном отправлении останется часть продуктов, которую не передали в запросе.  Статус изначального отправления изменится только после изменения статуса отправлений, на которые он разделился. 
     * @param {module:model/V3FbsPostingShipByPackageRequest} v3FbsPostingShipByPackageRequest 
     * @param {module:api/FBSApi~postingAPIPackageShipFbsPostingV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V3FbsPostingShipResponse}
     */
    postingAPIPackageShipFbsPostingV3(v3FbsPostingShipByPackageRequest, callback) {
      let postBody = v3FbsPostingShipByPackageRequest;
      // verify the required parameter 'v3FbsPostingShipByPackageRequest' is set
      if (v3FbsPostingShipByPackageRequest === undefined || v3FbsPostingShipByPackageRequest === null) {
        throw new Error("Missing the required parameter 'v3FbsPostingShipByPackageRequest' when calling postingAPIPackageShipFbsPostingV3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V3FbsPostingShipResponse;
      return this.apiClient.callApi(
        '/v3/posting/fbs/ship/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPostingFBSActCheckStatus operation.
     * @callback module:api/FBSApi~postingAPIPostingFBSActCheckStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingPostingFBSActCheckStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Статус акта и накладной
     * Если вы не подключены к электронному документообороту (ЭДО), в ответе вернётся статус формирования акта приёма-передачи и транспортной накладной.  Если вы подключены к ЭДО, в ответе вернётся только статус формирования транспортной накладной. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingPostingFBSActCheckStatusRequest} postingPostingFBSActCheckStatusRequest 
     * @param {module:api/FBSApi~postingAPIPostingFBSActCheckStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingPostingFBSActCheckStatusResponse}
     */
    postingAPIPostingFBSActCheckStatus(clientId, apiKey, postingPostingFBSActCheckStatusRequest, callback) {
      let postBody = postingPostingFBSActCheckStatusRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIPostingFBSActCheckStatus");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIPostingFBSActCheckStatus");
      }
      // verify the required parameter 'postingPostingFBSActCheckStatusRequest' is set
      if (postingPostingFBSActCheckStatusRequest === undefined || postingPostingFBSActCheckStatusRequest === null) {
        throw new Error("Missing the required parameter 'postingPostingFBSActCheckStatusRequest' when calling postingAPIPostingFBSActCheckStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingPostingFBSActCheckStatusResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/act/check-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPostingFBSActCreate operation.
     * @callback module:api/FBSApi~postingAPIPostingFBSActCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingPostingFBSActCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создать акт и накладную
     * Запускает формирование передаточных документов: акта приёма-передачи и транспортной накладной.  Чтобы сформировать и получить передаточные документы, переведите отправление в статус `awaiting_deliver`. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingPostingFBSActCreateRequest} postingPostingFBSActCreateRequest 
     * @param {module:api/FBSApi~postingAPIPostingFBSActCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingPostingFBSActCreateResponse}
     */
    postingAPIPostingFBSActCreate(clientId, apiKey, postingPostingFBSActCreateRequest, callback) {
      let postBody = postingPostingFBSActCreateRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIPostingFBSActCreate");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIPostingFBSActCreate");
      }
      // verify the required parameter 'postingPostingFBSActCreateRequest' is set
      if (postingPostingFBSActCreateRequest === undefined || postingPostingFBSActCreateRequest === null) {
        throw new Error("Missing the required parameter 'postingPostingFBSActCreateRequest' when calling postingAPIPostingFBSActCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingPostingFBSActCreateResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/act/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPostingFBSActGetContainerLabels operation.
     * @callback module:api/FBSApi~postingAPIPostingFBSActGetContainerLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingPostingFBSActGetContainerLabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Этикетки для грузового места
     * Метод создает этикетки для грузового места.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingPostingFBSActGetContainerLabelsRequest} postingPostingFBSActGetContainerLabelsRequest 
     * @param {module:api/FBSApi~postingAPIPostingFBSActGetContainerLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingPostingFBSActGetContainerLabelsResponse}
     */
    postingAPIPostingFBSActGetContainerLabels(clientId, apiKey, postingPostingFBSActGetContainerLabelsRequest, callback) {
      let postBody = postingPostingFBSActGetContainerLabelsRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIPostingFBSActGetContainerLabels");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIPostingFBSActGetContainerLabels");
      }
      // verify the required parameter 'postingPostingFBSActGetContainerLabelsRequest' is set
      if (postingPostingFBSActGetContainerLabelsRequest === undefined || postingPostingFBSActGetContainerLabelsRequest === null) {
        throw new Error("Missing the required parameter 'postingPostingFBSActGetContainerLabelsRequest' when calling postingAPIPostingFBSActGetContainerLabels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingPostingFBSActGetContainerLabelsResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/act/get-container-labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPostingFBSDigitalActCheckStatus operation.
     * @callback module:api/FBSApi~postingAPIPostingFBSDigitalActCheckStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2PostingFBSDigitalActCheckStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Статус электронных акта и накладной
     * <aside class=\"warning\"> Метод доступен только для продавцов, которые подключены к электронному документообороту. </aside>   Получение статуса формирования электронных акта приёма-передачи и транспортной накладной. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V2PostingFBSDigitalActCheckStatusRequest} v2PostingFBSDigitalActCheckStatusRequest 
     * @param {module:api/FBSApi~postingAPIPostingFBSDigitalActCheckStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2PostingFBSDigitalActCheckStatusResponse}
     */
    postingAPIPostingFBSDigitalActCheckStatus(clientId, apiKey, v2PostingFBSDigitalActCheckStatusRequest, callback) {
      let postBody = v2PostingFBSDigitalActCheckStatusRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIPostingFBSDigitalActCheckStatus");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIPostingFBSDigitalActCheckStatus");
      }
      // verify the required parameter 'v2PostingFBSDigitalActCheckStatusRequest' is set
      if (v2PostingFBSDigitalActCheckStatusRequest === undefined || v2PostingFBSDigitalActCheckStatusRequest === null) {
        throw new Error("Missing the required parameter 'v2PostingFBSDigitalActCheckStatusRequest' when calling postingAPIPostingFBSDigitalActCheckStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2PostingFBSDigitalActCheckStatusResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/digital/act/check-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPostingFBSGetAct operation.
     * @callback module:api/FBSApi~postingAPIPostingFBSGetActCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingPostingFBSGetActResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить акт и накладную
     * Получить сформированные передаточные документы в формате PDF: акт приёма-передачи и транспортную накладную.  Если вы не подключены к электронному документообороту (ЭДО), в ответе вернутся акт приёма-передачи и транспортная накладная.  Если вы подключены к ЭДО, в ответе вернётся только транспортная накладная. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingPostingFBSGetActRequest} postingPostingFBSGetActRequest 
     * @param {module:api/FBSApi~postingAPIPostingFBSGetActCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingPostingFBSGetActResponse}
     */
    postingAPIPostingFBSGetAct(clientId, apiKey, postingPostingFBSGetActRequest, callback) {
      let postBody = postingPostingFBSGetActRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIPostingFBSGetAct");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIPostingFBSGetAct");
      }
      // verify the required parameter 'postingPostingFBSGetActRequest' is set
      if (postingPostingFBSGetActRequest === undefined || postingPostingFBSGetActRequest === null) {
        throw new Error("Missing the required parameter 'postingPostingFBSGetActRequest' when calling postingAPIPostingFBSGetAct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostingPostingFBSGetActResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/act/get-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPostingFBSGetDigitalAct operation.
     * @callback module:api/FBSApi~postingAPIPostingFBSGetDigitalActCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2PostingFBSGetDigitalActResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить электронный акт по перевозке
     * <aside class=\"warning\"> Метод доступен только для продавцов, которые подключены к электронному документообороту. </aside>      Вы можете получить электронные документы, если в ответе метода [/v2/posting/fbs/digital/act/check-status](#operation/PostingAPI_PostingFBSDigitalActCheckStatus) был один из статусов: - `FORMED` — акт сформирован успешно, - `CONFIRMED` — акт подписан Ozon, - `CONFIRMED_WITH_MISMATCH` — акт подписан Ozon с расхождениями. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V2PostingFBSGetDigitalActRequest} v2PostingFBSGetDigitalActRequest 
     * @param {module:api/FBSApi~postingAPIPostingFBSGetDigitalActCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2PostingFBSGetDigitalActResponse}
     */
    postingAPIPostingFBSGetDigitalAct(clientId, apiKey, v2PostingFBSGetDigitalActRequest, callback) {
      let postBody = v2PostingFBSGetDigitalActRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIPostingFBSGetDigitalAct");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIPostingFBSGetDigitalAct");
      }
      // verify the required parameter 'v2PostingFBSGetDigitalActRequest' is set
      if (v2PostingFBSGetDigitalActRequest === undefined || v2PostingFBSGetDigitalActRequest === null) {
        throw new Error("Missing the required parameter 'v2PostingFBSGetDigitalActRequest' when calling postingAPIPostingFBSGetDigitalAct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2PostingFBSGetDigitalActResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/digital/act/get-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIPostingFBSPackageLabel operation.
     * @callback module:api/FBSApi~postingAPIPostingFBSPackageLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostingPostingFBSPackageLabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Напечатать этикетку
     *  <aside class=\"warning\">Если вы работаете по схеме rFBS, этикетки для отправлений печатать не нужно.</aside>  Генерирует PDF-файл с этикетками для указанных отправлений. В одном запросе можно передать не больше 20 идентификаторов. Если хотя бы для одного отправления возникнет ошибка, этикетки не будут подготовлены для всех отправлений в запросе.  Рекомендуем запрашивать этикетки через 45–60 секунд после сборки заказа.  Ошибка `The next postings aren't ready` означает, что этикетки ещё не готовы, повторите запрос позднее. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/PostingPostingFBSPackageLabelRequest} postingPostingFBSPackageLabelRequest 
     * @param {module:api/FBSApi~postingAPIPostingFBSPackageLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostingPostingFBSPackageLabelResponse}
     */
    postingAPIPostingFBSPackageLabel(clientId, apiKey, postingPostingFBSPackageLabelRequest, callback) {
      let postBody = postingPostingFBSPackageLabelRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postingAPIPostingFBSPackageLabel");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling postingAPIPostingFBSPackageLabel");
      }
      // verify the required parameter 'postingPostingFBSPackageLabelRequest' is set
      if (postingPostingFBSPackageLabelRequest === undefined || postingPostingFBSPackageLabelRequest === null) {
        throw new Error("Missing the required parameter 'postingPostingFBSPackageLabelRequest' when calling postingAPIPostingFBSPackageLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = PostingPostingFBSPackageLabelResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/package-label', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPISetCountryProductFbsPostingV2 operation.
     * @callback module:api/FBSApi~postingAPISetCountryProductFbsPostingV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V2FbsPostingProductCountrySetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить информацию о стране-изготовителе товара
     * Метод для добавления на продукт атрибута «Страна-изготовитель», если он не был указан.
     * @param {module:model/V2FbsPostingProductCountrySetRequest} v2FbsPostingProductCountrySetRequest 
     * @param {module:api/FBSApi~postingAPISetCountryProductFbsPostingV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2FbsPostingProductCountrySetResponse}
     */
    postingAPISetCountryProductFbsPostingV2(v2FbsPostingProductCountrySetRequest, callback) {
      let postBody = v2FbsPostingProductCountrySetRequest;
      // verify the required parameter 'v2FbsPostingProductCountrySetRequest' is set
      if (v2FbsPostingProductCountrySetRequest === undefined || v2FbsPostingProductCountrySetRequest === null) {
        throw new Error("Missing the required parameter 'v2FbsPostingProductCountrySetRequest' when calling postingAPISetCountryProductFbsPostingV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2FbsPostingProductCountrySetResponse;
      return this.apiClient.callApi(
        '/v2/posting/fbs/product/country/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postingAPIShipFbsPostingV3 operation.
     * @callback module:api/FBSApi~postingAPIShipFbsPostingV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V3FbsPostingShipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Собрать заказ (версия 3)
     * Делит заказ на отправления и переводит его в статус `awaiting_deliver`.  Каждый элемент в `packages` может содержать несколько элементов `products` или отправлений.  Каждый элемент в `products` — это товар, включённый в данное отправление.  Разделить заказ нужно, если:   - товары не помещаются в одну упаковку,   - товары нельзя сложить в одну упаковку.  Отличается от [/v2/posting/fbs/ship](#operation/PostingAPI_ShipFbsPosting) наличием в запросе параметра `exemplar_info`.  При необходимости укажите номер грузовой таможенной декларации в параметре `gtd`. Если его нет, передайте значение `is_gtd_absent = true`. 
     * @param {module:model/V3FbsPostingShipRequest} v3FbsPostingShipRequest 
     * @param {module:api/FBSApi~postingAPIShipFbsPostingV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V3FbsPostingShipResponse}
     */
    postingAPIShipFbsPostingV3(v3FbsPostingShipRequest, callback) {
      let postBody = v3FbsPostingShipRequest;
      // verify the required parameter 'v3FbsPostingShipRequest' is set
      if (v3FbsPostingShipRequest === undefined || v3FbsPostingShipRequest === null) {
        throw new Error("Missing the required parameter 'v3FbsPostingShipRequest' when calling postingAPIShipFbsPostingV3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V3FbsPostingShipResponse;
      return this.apiClient.callApi(
        '/v3/posting/fbs/ship', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
