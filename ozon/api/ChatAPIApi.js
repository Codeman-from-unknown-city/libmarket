/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatChatHistoryRequest from '../model/ChatChatHistoryRequest';
import ChatChatHistoryResponse from '../model/ChatChatHistoryResponse';
import ChatChatListRequest from '../model/ChatChatListRequest';
import ChatChatListResponse from '../model/ChatChatListResponse';
import ChatChatSendFileRequest from '../model/ChatChatSendFileRequest';
import ChatChatSendFileResponse from '../model/ChatChatSendFileResponse';
import ChatChatSendMessageRequest from '../model/ChatChatSendMessageRequest';
import ChatChatSendMessageResponse from '../model/ChatChatSendMessageResponse';
import ChatChatStartRequest from '../model/ChatChatStartRequest';
import ChatChatStartResponse from '../model/ChatChatStartResponse';
import ChatChatUpdatesRequest from '../model/ChatChatUpdatesRequest';
import ChatChatUpdatesResponse from '../model/ChatChatUpdatesResponse';
import ChatHistory from '../model/ChatHistory';
import ChatList from '../model/ChatList';
import ChatRead from '../model/ChatRead';
import RpcStatus from '../model/RpcStatus';
import V2ChatHistoryResponse from '../model/V2ChatHistoryResponse';
import V2ChatListResponse from '../model/V2ChatListResponse';
import V2ChatReadResponse from '../model/V2ChatReadResponse';

/**
* ChatAPI service.
* @module api/ChatAPIApi
* @version 2.1
*/
export default class ChatAPIApi {

    /**
    * Constructs a new ChatAPIApi. 
    * @alias module:api/ChatAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chatAPIChatHistory operation.
     * @callback module:api/ChatAPIApi~chatAPIChatHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatChatHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * История чата
     * Возвращает историю сообщений в чате.  По умолчанию сообщения показываются от старого к новому. Чтобы получить историю сообщений от самого нового сообщения до самого старого, используйте метод [/v1/chat/updates](#operation/ChatAPI_ChatUpdates). У методов [/v1/chat/history](#operation/ChatAPI_ChatHistory) и [/v1/chat/updates](#operation/ChatAPI_ChatUpdates) одинаковая структура запроса и ответа. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatChatHistoryRequest} chatChatHistoryRequest 
     * @param {module:api/ChatAPIApi~chatAPIChatHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatChatHistoryResponse}
     */
    chatAPIChatHistory(clientId, apiKey, chatChatHistoryRequest, callback) {
      let postBody = chatChatHistoryRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatHistory");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatHistory");
      }
      // verify the required parameter 'chatChatHistoryRequest' is set
      if (chatChatHistoryRequest === undefined || chatChatHistoryRequest === null) {
        throw new Error("Missing the required parameter 'chatChatHistoryRequest' when calling chatAPIChatHistory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatChatHistoryResponse;
      return this.apiClient.callApi(
        '/v1/chat/history', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatHistoryV2 operation.
     * @callback module:api/ChatAPIApi~chatAPIChatHistoryV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V2ChatHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * История чата
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatHistory} chatHistory 
     * @param {module:api/ChatAPIApi~chatAPIChatHistoryV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2ChatHistoryResponse}
     */
    chatAPIChatHistoryV2(clientId, apiKey, chatHistory, callback) {
      let postBody = chatHistory;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatHistoryV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatHistoryV2");
      }
      // verify the required parameter 'chatHistory' is set
      if (chatHistory === undefined || chatHistory === null) {
        throw new Error("Missing the required parameter 'chatHistory' when calling chatAPIChatHistoryV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2ChatHistoryResponse;
      return this.apiClient.callApi(
        '/v2/chat/history', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatList operation.
     * @callback module:api/ChatAPIApi~chatAPIChatListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatChatListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список чатов
     * Возвращает информацию о чатах с указанными идентификаторами.  В ответе метода могут быть чаты с `last_message_id = 0` и без сообщений. Это происходит, когда покупатель открыл чат с продавцом, но ничего не написал. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatChatListRequest} chatChatListRequest 
     * @param {module:api/ChatAPIApi~chatAPIChatListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatChatListResponse}
     */
    chatAPIChatList(clientId, apiKey, chatChatListRequest, callback) {
      let postBody = chatChatListRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatList");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatList");
      }
      // verify the required parameter 'chatChatListRequest' is set
      if (chatChatListRequest === undefined || chatChatListRequest === null) {
        throw new Error("Missing the required parameter 'chatChatListRequest' when calling chatAPIChatList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatChatListResponse;
      return this.apiClient.callApi(
        '/v1/chat/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatListV2 operation.
     * @callback module:api/ChatAPIApi~chatAPIChatListV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V2ChatListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список чатов
     * Возвращает информацию о чатах по указанным фильтрам.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatList} chatList 
     * @param {module:api/ChatAPIApi~chatAPIChatListV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2ChatListResponse}
     */
    chatAPIChatListV2(clientId, apiKey, chatList, callback) {
      let postBody = chatList;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatListV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatListV2");
      }
      // verify the required parameter 'chatList' is set
      if (chatList === undefined || chatList === null) {
        throw new Error("Missing the required parameter 'chatList' when calling chatAPIChatListV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2ChatListResponse;
      return this.apiClient.callApi(
        '/v2/chat/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatReadV2 operation.
     * @callback module:api/ChatAPIApi~chatAPIChatReadV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V2ChatReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отметить сообщения как прочитанные
     * Метод для отметки выбранного сообщения и сообщений до него прочитанными.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatRead} chatRead 
     * @param {module:api/ChatAPIApi~chatAPIChatReadV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2ChatReadResponse}
     */
    chatAPIChatReadV2(clientId, apiKey, chatRead, callback) {
      let postBody = chatRead;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatReadV2");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatReadV2");
      }
      // verify the required parameter 'chatRead' is set
      if (chatRead === undefined || chatRead === null) {
        throw new Error("Missing the required parameter 'chatRead' when calling chatAPIChatReadV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2ChatReadResponse;
      return this.apiClient.callApi(
        '/v2/chat/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatSendFile operation.
     * @callback module:api/ChatAPIApi~chatAPIChatSendFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatChatSendFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отправить файл
     * Отправляет файл в существующий чат по его идентификатору.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatChatSendFileRequest} chatChatSendFileRequest 
     * @param {module:api/ChatAPIApi~chatAPIChatSendFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatChatSendFileResponse}
     */
    chatAPIChatSendFile(clientId, apiKey, chatChatSendFileRequest, callback) {
      let postBody = chatChatSendFileRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatSendFile");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatSendFile");
      }
      // verify the required parameter 'chatChatSendFileRequest' is set
      if (chatChatSendFileRequest === undefined || chatChatSendFileRequest === null) {
        throw new Error("Missing the required parameter 'chatChatSendFileRequest' when calling chatAPIChatSendFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatChatSendFileResponse;
      return this.apiClient.callApi(
        '/v1/chat/send/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatSendMessage operation.
     * @callback module:api/ChatAPIApi~chatAPIChatSendMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatChatSendMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отправить сообщение
     * Отправляет сообщение в существующий чат по его идентификатору.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatChatSendMessageRequest} chatChatSendMessageRequest 
     * @param {module:api/ChatAPIApi~chatAPIChatSendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatChatSendMessageResponse}
     */
    chatAPIChatSendMessage(clientId, apiKey, chatChatSendMessageRequest, callback) {
      let postBody = chatChatSendMessageRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatSendMessage");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatSendMessage");
      }
      // verify the required parameter 'chatChatSendMessageRequest' is set
      if (chatChatSendMessageRequest === undefined || chatChatSendMessageRequest === null) {
        throw new Error("Missing the required parameter 'chatChatSendMessageRequest' when calling chatAPIChatSendMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatChatSendMessageResponse;
      return this.apiClient.callApi(
        '/v1/chat/send/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatStart operation.
     * @callback module:api/ChatAPIApi~chatAPIChatStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatChatStartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создать новый чат
     * Создает новый чат с покупателем по отправлению. Например, чтобы уточнить адрес или модель товара.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatChatStartRequest} chatChatStartRequest 
     * @param {module:api/ChatAPIApi~chatAPIChatStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatChatStartResponse}
     */
    chatAPIChatStart(clientId, apiKey, chatChatStartRequest, callback) {
      let postBody = chatChatStartRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatStart");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatStart");
      }
      // verify the required parameter 'chatChatStartRequest' is set
      if (chatChatStartRequest === undefined || chatChatStartRequest === null) {
        throw new Error("Missing the required parameter 'chatChatStartRequest' when calling chatAPIChatStart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatChatStartResponse;
      return this.apiClient.callApi(
        '/v1/chat/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatAPIChatUpdates operation.
     * @callback module:api/ChatAPIApi~chatAPIChatUpdatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatChatUpdatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновить чат
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/ChatChatUpdatesRequest} chatChatUpdatesRequest 
     * @param {module:api/ChatAPIApi~chatAPIChatUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatChatUpdatesResponse}
     */
    chatAPIChatUpdates(clientId, apiKey, chatChatUpdatesRequest, callback) {
      let postBody = chatChatUpdatesRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling chatAPIChatUpdates");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling chatAPIChatUpdates");
      }
      // verify the required parameter 'chatChatUpdatesRequest' is set
      if (chatChatUpdatesRequest === undefined || chatChatUpdatesRequest === null) {
        throw new Error("Missing the required parameter 'chatChatUpdatesRequest' when calling chatAPIChatUpdates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatChatUpdatesResponse;
      return this.apiClient.callApi(
        '/v1/chat/updates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
