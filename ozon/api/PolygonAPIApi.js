/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Polygonv1PolygonBindRequest from '../model/Polygonv1PolygonBindRequest';
import Polygonv1PolygonCreateRequest from '../model/Polygonv1PolygonCreateRequest';
import Polygonv1PolygonCreateResponse from '../model/Polygonv1PolygonCreateResponse';
import Polygonv1PolygonDeleteRequest from '../model/Polygonv1PolygonDeleteRequest';
import RpcStatus from '../model/RpcStatus';
import RpcStatusV1PolygonBind from '../model/RpcStatusV1PolygonBind';
import RpcStatusV1PolygonCreate from '../model/RpcStatusV1PolygonCreate';

/**
* PolygonAPI service.
* @module api/PolygonAPIApi
* @version 2.1
*/
export default class PolygonAPIApi {

    /**
    * Constructs a new PolygonAPIApi. 
    * @alias module:api/PolygonAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the polygonAPIBindPolygon operation.
     * @callback module:api/PolygonAPIApi~polygonAPIBindPolygonCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Свяжите метод доставки с полигоном доставки
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Polygonv1PolygonBindRequest} polygonv1PolygonBindRequest 
     * @param {module:api/PolygonAPIApi~polygonAPIBindPolygonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    polygonAPIBindPolygon(clientId, apiKey, polygonv1PolygonBindRequest, callback) {
      let postBody = polygonv1PolygonBindRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling polygonAPIBindPolygon");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling polygonAPIBindPolygon");
      }
      // verify the required parameter 'polygonv1PolygonBindRequest' is set
      if (polygonv1PolygonBindRequest === undefined || polygonv1PolygonBindRequest === null) {
        throw new Error("Missing the required parameter 'polygonv1PolygonBindRequest' when calling polygonAPIBindPolygon");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/polygon/bind', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the polygonAPICreatePolygon operation.
     * @callback module:api/PolygonAPIApi~polygonAPICreatePolygonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Polygonv1PolygonCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создайте полигон доставки
     * Вы можете добавить полигон к методу доставки.  Создайте полигон, получив его координаты на https://geojson.io: отметьте на карте минимум 3 точки и соедините их линиями. 
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Polygonv1PolygonCreateRequest} polygonv1PolygonCreateRequest 
     * @param {module:api/PolygonAPIApi~polygonAPICreatePolygonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Polygonv1PolygonCreateResponse}
     */
    polygonAPICreatePolygon(clientId, apiKey, polygonv1PolygonCreateRequest, callback) {
      let postBody = polygonv1PolygonCreateRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling polygonAPICreatePolygon");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling polygonAPICreatePolygon");
      }
      // verify the required parameter 'polygonv1PolygonCreateRequest' is set
      if (polygonv1PolygonCreateRequest === undefined || polygonv1PolygonCreateRequest === null) {
        throw new Error("Missing the required parameter 'polygonv1PolygonCreateRequest' when calling polygonAPICreatePolygon");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Polygonv1PolygonCreateResponse;
      return this.apiClient.callApi(
        '/v1/polygon/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the polygonAPIDeletePolygon operation.
     * @callback module:api/PolygonAPIApi~polygonAPIDeletePolygonCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалите полигон
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/Polygonv1PolygonDeleteRequest} polygonv1PolygonDeleteRequest 
     * @param {module:api/PolygonAPIApi~polygonAPIDeletePolygonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    polygonAPIDeletePolygon(clientId, apiKey, polygonv1PolygonDeleteRequest, callback) {
      let postBody = polygonv1PolygonDeleteRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling polygonAPIDeletePolygon");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling polygonAPIDeletePolygon");
      }
      // verify the required parameter 'polygonv1PolygonDeleteRequest' is set
      if (polygonv1PolygonDeleteRequest === undefined || polygonv1PolygonDeleteRequest === null) {
        throw new Error("Missing the required parameter 'polygonv1PolygonDeleteRequest' when calling polygonAPIDeletePolygon");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/polygon/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
