/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalyticsAnalyticsGetDataRequest from '../model/AnalyticsAnalyticsGetDataRequest';
import AnalyticsAnalyticsGetDataResponse from '../model/AnalyticsAnalyticsGetDataResponse';
import AnalyticsAnalyticsGetStockOnWarehousesRequest from '../model/AnalyticsAnalyticsGetStockOnWarehousesRequest';
import AnalyticsAnalyticsGetStockOnWarehousesResponse from '../model/AnalyticsAnalyticsGetStockOnWarehousesResponse';
import RpcStatus from '../model/RpcStatus';
import V1AnalyticsItemTurnoverDataV3Request from '../model/V1AnalyticsItemTurnoverDataV3Request';
import V1AnalyticsItemTurnoverDataV3Response from '../model/V1AnalyticsItemTurnoverDataV3Response';

/**
* AnalyticsAPI service.
* @module api/AnalyticsAPIApi
* @version 2.1
*/
export default class AnalyticsAPIApi {

    /**
    * Constructs a new AnalyticsAPIApi. 
    * @alias module:api/AnalyticsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyticsAPIAnalyticsGetData operation.
     * @callback module:api/AnalyticsAPIApi~analyticsAPIAnalyticsGetDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsAnalyticsGetDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Данные аналитики
     * Уĸажите период и метриĸи, ĸоторые нужно посчитать — в ответе будет аналитиĸа, сгруппированная по параметру `dimensions`.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/AnalyticsAnalyticsGetDataRequest} analyticsAnalyticsGetDataRequest 
     * @param {module:api/AnalyticsAPIApi~analyticsAPIAnalyticsGetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsAnalyticsGetDataResponse}
     */
    analyticsAPIAnalyticsGetData(clientId, apiKey, analyticsAnalyticsGetDataRequest, callback) {
      let postBody = analyticsAnalyticsGetDataRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling analyticsAPIAnalyticsGetData");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling analyticsAPIAnalyticsGetData");
      }
      // verify the required parameter 'analyticsAnalyticsGetDataRequest' is set
      if (analyticsAnalyticsGetDataRequest === undefined || analyticsAnalyticsGetDataRequest === null) {
        throw new Error("Missing the required parameter 'analyticsAnalyticsGetDataRequest' when calling analyticsAPIAnalyticsGetData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyticsAnalyticsGetDataResponse;
      return this.apiClient.callApi(
        '/v1/analytics/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsAPIAnalyticsGetStockOnWarehouses operation.
     * @callback module:api/AnalyticsAPIApi~analyticsAPIAnalyticsGetStockOnWarehousesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsAnalyticsGetStockOnWarehousesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт по остаткам и товарам
     * Отчёт по остаткам и товарам в перемещении по складам Ozon.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/AnalyticsAnalyticsGetStockOnWarehousesRequest} analyticsAnalyticsGetStockOnWarehousesRequest 
     * @param {module:api/AnalyticsAPIApi~analyticsAPIAnalyticsGetStockOnWarehousesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsAnalyticsGetStockOnWarehousesResponse}
     */
    analyticsAPIAnalyticsGetStockOnWarehouses(clientId, apiKey, analyticsAnalyticsGetStockOnWarehousesRequest, callback) {
      let postBody = analyticsAnalyticsGetStockOnWarehousesRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling analyticsAPIAnalyticsGetStockOnWarehouses");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling analyticsAPIAnalyticsGetStockOnWarehouses");
      }
      // verify the required parameter 'analyticsAnalyticsGetStockOnWarehousesRequest' is set
      if (analyticsAnalyticsGetStockOnWarehousesRequest === undefined || analyticsAnalyticsGetStockOnWarehousesRequest === null) {
        throw new Error("Missing the required parameter 'analyticsAnalyticsGetStockOnWarehousesRequest' when calling analyticsAPIAnalyticsGetStockOnWarehouses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyticsAnalyticsGetStockOnWarehousesResponse;
      return this.apiClient.callApi(
        '/v1/analytics/stock_on_warehouses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsAPIAnalyticsItemTurnoverDataV3 operation.
     * @callback module:api/AnalyticsAPIApi~analyticsAPIAnalyticsItemTurnoverDataV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1AnalyticsItemTurnoverDataV3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчёт по оборачиваемости (FBO)
     * Метод для получения отчёта по оборачиваемости (FBO) по категориям за 15 дней.
     * @param {String} clientId Идентификатор клиента.
     * @param {String} apiKey API-ключ.
     * @param {module:model/V1AnalyticsItemTurnoverDataV3Request} v1AnalyticsItemTurnoverDataV3Request 
     * @param {module:api/AnalyticsAPIApi~analyticsAPIAnalyticsItemTurnoverDataV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1AnalyticsItemTurnoverDataV3Response}
     */
    analyticsAPIAnalyticsItemTurnoverDataV3(clientId, apiKey, v1AnalyticsItemTurnoverDataV3Request, callback) {
      let postBody = v1AnalyticsItemTurnoverDataV3Request;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling analyticsAPIAnalyticsItemTurnoverDataV3");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling analyticsAPIAnalyticsItemTurnoverDataV3");
      }
      // verify the required parameter 'v1AnalyticsItemTurnoverDataV3Request' is set
      if (v1AnalyticsItemTurnoverDataV3Request === undefined || v1AnalyticsItemTurnoverDataV3Request === null) {
        throw new Error("Missing the required parameter 'v1AnalyticsItemTurnoverDataV3Request' when calling analyticsAPIAnalyticsItemTurnoverDataV3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Client-Id': clientId,
        'Api-Key': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1AnalyticsItemTurnoverDataV3Response;
      return this.apiClient.callApi(
        '/v1/analytics/item_turnover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
