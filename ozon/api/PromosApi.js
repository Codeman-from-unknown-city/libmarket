/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import SellerApiActivateProductV1Request from '../model/SellerApiActivateProductV1Request';
import SellerApiGetSellerActionsV1Response from '../model/SellerApiGetSellerActionsV1Response';
import SellerApiGetSellerProductV1Request from '../model/SellerApiGetSellerProductV1Request';
import SellerApiGetSellerProductV1Response from '../model/SellerApiGetSellerProductV1Response';
import SellerApiProductIDsV1Request from '../model/SellerApiProductIDsV1Request';
import SellerApiProductV1Response from '../model/SellerApiProductV1Response';
import SellerApiProductV1ResponseDeactivate from '../model/SellerApiProductV1ResponseDeactivate';
import V1ActivateHotSalesProductsRequest from '../model/V1ActivateHotSalesProductsRequest';
import V1ApproveDeclineDiscountTasksResponse from '../model/V1ApproveDeclineDiscountTasksResponse';
import V1ApproveDiscountTasksRequest from '../model/V1ApproveDiscountTasksRequest';
import V1DeactivateHotSalesProductsRequest from '../model/V1DeactivateHotSalesProductsRequest';
import V1DeclineDiscountTasksRequest from '../model/V1DeclineDiscountTasksRequest';
import V1GetDiscountTaskListRequest from '../model/V1GetDiscountTaskListRequest';
import V1GetDiscountTaskListResponse from '../model/V1GetDiscountTaskListResponse';
import V1GetHotSalesListResponse from '../model/V1GetHotSalesListResponse';
import V1GetHotSalesProductsRequest from '../model/V1GetHotSalesProductsRequest';
import V1GetHotSalesProductsResponse from '../model/V1GetHotSalesProductsResponse';
import V1SetActivateHotSaleProductsResult from '../model/V1SetActivateHotSaleProductsResult';
import V1SetDeactivateHotSaleProductsResult from '../model/V1SetDeactivateHotSaleProductsResult';

/**
* Promos service.
* @module api/PromosApi
* @version 2.1
*/
export default class PromosApi {

    /**
    * Constructs a new PromosApi. 
    * @alias module:api/PromosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionsAPIActivateHotSalesProducts operation.
     * @callback module:api/PromosApi~actionsAPIActivateHotSalesProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1SetActivateHotSaleProductsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить товары в акцию Hot Sale
     * @param {module:model/V1ActivateHotSalesProductsRequest} v1ActivateHotSalesProductsRequest 
     * @param {module:api/PromosApi~actionsAPIActivateHotSalesProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1SetActivateHotSaleProductsResult}
     */
    actionsAPIActivateHotSalesProducts(v1ActivateHotSalesProductsRequest, callback) {
      let postBody = v1ActivateHotSalesProductsRequest;
      // verify the required parameter 'v1ActivateHotSalesProductsRequest' is set
      if (v1ActivateHotSalesProductsRequest === undefined || v1ActivateHotSalesProductsRequest === null) {
        throw new Error("Missing the required parameter 'v1ActivateHotSalesProductsRequest' when calling actionsAPIActivateHotSalesProducts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1SetActivateHotSaleProductsResult;
      return this.apiClient.callApi(
        '/v1/actions/hotsales/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAPIDeactivateHotSalesProducts operation.
     * @callback module:api/PromosApi~actionsAPIDeactivateHotSalesProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1SetDeactivateHotSaleProductsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалить товары из акции Hot Sale
     * @param {module:model/V1DeactivateHotSalesProductsRequest} v1DeactivateHotSalesProductsRequest 
     * @param {module:api/PromosApi~actionsAPIDeactivateHotSalesProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1SetDeactivateHotSaleProductsResult}
     */
    actionsAPIDeactivateHotSalesProducts(v1DeactivateHotSalesProductsRequest, callback) {
      let postBody = v1DeactivateHotSalesProductsRequest;
      // verify the required parameter 'v1DeactivateHotSalesProductsRequest' is set
      if (v1DeactivateHotSalesProductsRequest === undefined || v1DeactivateHotSalesProductsRequest === null) {
        throw new Error("Missing the required parameter 'v1DeactivateHotSalesProductsRequest' when calling actionsAPIDeactivateHotSalesProducts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1SetDeactivateHotSaleProductsResult;
      return this.apiClient.callApi(
        '/v1/actions/hotsales/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAPIGetHotSalesList operation.
     * @callback module:api/PromosApi~actionsAPIGetHotSalesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetHotSalesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список доступных акций Hot Sale
     * @param {Object.<String, Object>} body 
     * @param {module:api/PromosApi~actionsAPIGetHotSalesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetHotSalesListResponse}
     */
    actionsAPIGetHotSalesList(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling actionsAPIGetHotSalesList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetHotSalesListResponse;
      return this.apiClient.callApi(
        '/v1/actions/hotsales/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAPIGetHotSalesProducts operation.
     * @callback module:api/PromosApi~actionsAPIGetHotSalesProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetHotSalesProductsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список товаров, которые участвуют в акции Hot Sale
     * Метод для получения списка товаров, которые могут участвовать или уже участвуют в акции Hot Sale.
     * @param {Object} opts Optional parameters
     * @param {module:model/V1GetHotSalesProductsRequest} opts.v1GetHotSalesProductsRequest 
     * @param {module:api/PromosApi~actionsAPIGetHotSalesProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetHotSalesProductsResponse}
     */
    actionsAPIGetHotSalesProducts(opts, callback) {
      opts = opts || {};
      let postBody = opts['v1GetHotSalesProductsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetHotSalesProductsResponse;
      return this.apiClient.callApi(
        '/v1/actions/hotsales/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promos operation.
     * @callback module:api/PromosApi~promosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellerApiGetSellerActionsV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список акций
     * Метод для получения списка акций, в которых можно участвовать.
     * @param {module:api/PromosApi~promosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellerApiGetSellerActionsV1Response}
     */
    promos(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SellerApiGetSellerActionsV1Response;
      return this.apiClient.callApi(
        '/v1/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promosCandidates operation.
     * @callback module:api/PromosApi~promosCandidatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellerApiGetSellerProductV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список доступных для акции товаров
     * Метод для получения списка товаров, которые могут участвовать в акции, по её идентификатору.
     * @param {Object} opts Optional parameters
     * @param {module:model/SellerApiGetSellerProductV1Request} opts.sellerApiGetSellerProductV1Request 
     * @param {module:api/PromosApi~promosCandidatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellerApiGetSellerProductV1Response}
     */
    promosCandidates(opts, callback) {
      opts = opts || {};
      let postBody = opts['sellerApiGetSellerProductV1Request'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellerApiGetSellerProductV1Response;
      return this.apiClient.callApi(
        '/v1/actions/candidates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promosProducts operation.
     * @callback module:api/PromosApi~promosProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellerApiGetSellerProductV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список участвующих в акции товаров
     * Метод для получения списка товаров, участвующих в акции, по её идентификатору.
     * @param {Object} opts Optional parameters
     * @param {module:model/SellerApiGetSellerProductV1Request} opts.sellerApiGetSellerProductV1Request 
     * @param {module:api/PromosApi~promosProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellerApiGetSellerProductV1Response}
     */
    promosProducts(opts, callback) {
      opts = opts || {};
      let postBody = opts['sellerApiGetSellerProductV1Request'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellerApiGetSellerProductV1Response;
      return this.apiClient.callApi(
        '/v1/actions/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promosProductsActivate operation.
     * @callback module:api/PromosApi~promosProductsActivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellerApiProductV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить товар в акцию
     * Метод для добавления товаров в доступную акцию.
     * @param {module:model/SellerApiActivateProductV1Request} sellerApiActivateProductV1Request 
     * @param {module:api/PromosApi~promosProductsActivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellerApiProductV1Response}
     */
    promosProductsActivate(sellerApiActivateProductV1Request, callback) {
      let postBody = sellerApiActivateProductV1Request;
      // verify the required parameter 'sellerApiActivateProductV1Request' is set
      if (sellerApiActivateProductV1Request === undefined || sellerApiActivateProductV1Request === null) {
        throw new Error("Missing the required parameter 'sellerApiActivateProductV1Request' when calling promosProductsActivate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellerApiProductV1Response;
      return this.apiClient.callApi(
        '/v1/actions/products/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promosProductsDeactivate operation.
     * @callback module:api/PromosApi~promosProductsDeactivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellerApiProductV1ResponseDeactivate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалить товары из акции
     * Метод для удаления товаров из акции.
     * @param {module:model/SellerApiProductIDsV1Request} sellerApiProductIDsV1Request 
     * @param {module:api/PromosApi~promosProductsDeactivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellerApiProductV1ResponseDeactivate}
     */
    promosProductsDeactivate(sellerApiProductIDsV1Request, callback) {
      let postBody = sellerApiProductIDsV1Request;
      // verify the required parameter 'sellerApiProductIDsV1Request' is set
      if (sellerApiProductIDsV1Request === undefined || sellerApiProductIDsV1Request === null) {
        throw new Error("Missing the required parameter 'sellerApiProductIDsV1Request' when calling promosProductsDeactivate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellerApiProductV1ResponseDeactivate;
      return this.apiClient.callApi(
        '/v1/actions/products/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promosTaskApprove operation.
     * @callback module:api/PromosApi~promosTaskApproveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ApproveDeclineDiscountTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Согласовать заявку на скидку
     * Вы можете согласовывать заявки в статусах: `NEW` — новые, `SEEN` — просмотренные. 
     * @param {module:model/V1ApproveDiscountTasksRequest} v1ApproveDiscountTasksRequest 
     * @param {module:api/PromosApi~promosTaskApproveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ApproveDeclineDiscountTasksResponse}
     */
    promosTaskApprove(v1ApproveDiscountTasksRequest, callback) {
      let postBody = v1ApproveDiscountTasksRequest;
      // verify the required parameter 'v1ApproveDiscountTasksRequest' is set
      if (v1ApproveDiscountTasksRequest === undefined || v1ApproveDiscountTasksRequest === null) {
        throw new Error("Missing the required parameter 'v1ApproveDiscountTasksRequest' when calling promosTaskApprove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ApproveDeclineDiscountTasksResponse;
      return this.apiClient.callApi(
        '/v1/actions/discounts-task/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promosTaskDecline operation.
     * @callback module:api/PromosApi~promosTaskDeclineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ApproveDeclineDiscountTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отклонить заявку на скидку
     * Вы можете отклонить заявки в статусах: `NEW` — новые, `SEEN` — просмотренные. 
     * @param {module:model/V1DeclineDiscountTasksRequest} v1DeclineDiscountTasksRequest 
     * @param {module:api/PromosApi~promosTaskDeclineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ApproveDeclineDiscountTasksResponse}
     */
    promosTaskDecline(v1DeclineDiscountTasksRequest, callback) {
      let postBody = v1DeclineDiscountTasksRequest;
      // verify the required parameter 'v1DeclineDiscountTasksRequest' is set
      if (v1DeclineDiscountTasksRequest === undefined || v1DeclineDiscountTasksRequest === null) {
        throw new Error("Missing the required parameter 'v1DeclineDiscountTasksRequest' when calling promosTaskDecline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ApproveDeclineDiscountTasksResponse;
      return this.apiClient.callApi(
        '/v1/actions/discounts-task/decline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promosTaskList operation.
     * @callback module:api/PromosApi~promosTaskListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetDiscountTaskListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список заявок на скидку
     * Метод для получения списка товаров, которые покупатели хотят купить со скидкой.
     * @param {module:model/V1GetDiscountTaskListRequest} v1GetDiscountTaskListRequest 
     * @param {module:api/PromosApi~promosTaskListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetDiscountTaskListResponse}
     */
    promosTaskList(v1GetDiscountTaskListRequest, callback) {
      let postBody = v1GetDiscountTaskListRequest;
      // verify the required parameter 'v1GetDiscountTaskListRequest' is set
      if (v1GetDiscountTaskListRequest === undefined || v1GetDiscountTaskListRequest === null) {
        throw new Error("Missing the required parameter 'v1GetDiscountTaskListRequest' when calling promosTaskList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetDiscountTaskListResponse;
      return this.apiClient.callApi(
        '/v1/actions/discounts-task/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
