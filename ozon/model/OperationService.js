/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OperationService model module.
 * @module model/OperationService
 * @version 2.1
 */
class OperationService {
    /**
     * Constructs a new <code>OperationService</code>.
     * @alias module:model/OperationService
     */
    constructor() { 
        
        OperationService.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperationService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationService} obj Optional instance to populate.
     * @return {module:model/OperationService} The populated <code>OperationService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationService();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationService</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Название услуги:   - `MarketplaceNotDeliveredCostItem` — возврат невостребованного товара от покупателя на склад.   - `MarketplaceReturnAfterDeliveryCostItem` — возврат от покупателя на склад после доставки.   - `MarketplaceDeliveryCostItem` — доставка товара до покупателя.   - `MarketplaceSaleReviewsItem` — приобретение отзывов на платформе.   - `ItemAdvertisementForSupplierLogistic` — доставка товаров на склад Ozon — кросс-докинг.   - `MarketplaceServiceStorageItem` — размещения товаров.   - `MarketplaceMarketingActionCostItem` — продвижение товаров.   - `MarketplaceServiceItemInstallment` — продвижениe и продажа в рассрочку.   - `MarketplaceServiceItemMarkingItems` — обязательная маркировка товаров.   - `MarketplaceServiceItemFlexiblePaymentSchedule` — гибкий график выплат.   - `MarketplaceServiceItemReturnFromStock` — комплектация товаров для вывоза продавцом.   - `ItemAdvertisementForSupplierLogisticSeller` — транспортно-экспедиционные услуги.   - `MarketplaceServiceItemDelivToCustomer` — последняя миля.   - `MarketplaceServiceItemDirectFlowTrans` — магистраль.   - `MarketplaceServiceItemDropoffFF` — обработка отправления.   - `MarketplaceServiceItemDropoffPVZ` — обработка отправления.   - `MarketplaceServiceItemDropoffSC` — обработка отправления.   - `MarketplaceServiceItemFulfillment` — сборка заказа.   - `MarketplaceServiceItemPickup` — выезд транспортного средства по адресу продавца для забора отправлений — Pick-up.   - `MarketplaceServiceItemReturnAfterDelivToCustomer` — обработка возврата.   - `MarketplaceServiceItemReturnFlowTrans` — обратная магистраль.   - `MarketplaceServiceItemReturnNotDelivToCustomer` — обработка отмен.   - `MarketplaceServiceItemReturnPartGoodsCustomer` — обработка невыкупа.   - `MarketplaceRedistributionOfAcquiringOperation` — оплата эквайринга.   - `MarketplaceReturnStorageServiceAtThePickupPointFbsItem` — краткосрочное размещение возврата FBS.   - `MarketplaceReturnStorageServiceInTheWarehouseFbsItem` — долгосрочное размещение возврата FBS.   - `MarketplaceServiceItemDeliveryKGT` — доставка крупногабаритного товара (КГТ).   - `MarketplaceServiceItemDirectFlowLogistic` — логистика.   - `MarketplaceServiceItemReturnFlowLogistic` — обратная логистика.   - `MarketplaceServicePremiumCashbackIndividualPoints` — услуга продвижения «Бонусы продавца».   - `MarketplaceServicePremiumPromotion` — услуга продвижение Premium, фиксированная комиссия.   - `OperationMarketplaceWithHoldingForUndeliverableGoods` — удержание за недовложение товара. 
 * @member {String} name
 */
OperationService.prototype['name'] = undefined;

/**
 * Цена.
 * @member {Number} price
 */
OperationService.prototype['price'] = undefined;






export default OperationService;

