/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V3FbsPostingRequirementsV3 model module.
 * @module model/V3FbsPostingRequirementsV3
 * @version 2.1
 */
class V3FbsPostingRequirementsV3 {
    /**
     * Constructs a new <code>V3FbsPostingRequirementsV3</code>.
     * Cписок продуктов, для которых нужно передать страну-изготовителя, номер грузовой таможенной декларации (ГТД), регистрационный номер партии товара (РНПТ) или маркировку «Честный ЗНАК», чтобы перевести отправление в следующий статус.
     * @alias module:model/V3FbsPostingRequirementsV3
     */
    constructor() { 
        
        V3FbsPostingRequirementsV3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V3FbsPostingRequirementsV3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V3FbsPostingRequirementsV3} obj Optional instance to populate.
     * @return {module:model/V3FbsPostingRequirementsV3} The populated <code>V3FbsPostingRequirementsV3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V3FbsPostingRequirementsV3();

            if (data.hasOwnProperty('products_requiring_gtd')) {
                obj['products_requiring_gtd'] = ApiClient.convertToType(data['products_requiring_gtd'], ['String']);
            }
            if (data.hasOwnProperty('products_requiring_country')) {
                obj['products_requiring_country'] = ApiClient.convertToType(data['products_requiring_country'], ['String']);
            }
            if (data.hasOwnProperty('products_requiring_mandatory_mark')) {
                obj['products_requiring_mandatory_mark'] = ApiClient.convertToType(data['products_requiring_mandatory_mark'], ['String']);
            }
            if (data.hasOwnProperty('products_requiring_rnpt')) {
                obj['products_requiring_rnpt'] = ApiClient.convertToType(data['products_requiring_rnpt'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V3FbsPostingRequirementsV3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V3FbsPostingRequirementsV3</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['products_requiring_gtd'])) {
            throw new Error("Expected the field `products_requiring_gtd` to be an array in the JSON data but got " + data['products_requiring_gtd']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products_requiring_country'])) {
            throw new Error("Expected the field `products_requiring_country` to be an array in the JSON data but got " + data['products_requiring_country']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products_requiring_mandatory_mark'])) {
            throw new Error("Expected the field `products_requiring_mandatory_mark` to be an array in the JSON data but got " + data['products_requiring_mandatory_mark']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products_requiring_rnpt'])) {
            throw new Error("Expected the field `products_requiring_rnpt` to be an array in the JSON data but got " + data['products_requiring_rnpt']);
        }

        return true;
    }


}



/**
 * Список идентификаторов товаров (SKU), для которых нужно передать номера таможенной декларации (ГТД).  Для сборки отправления передайте для всех перечисленных товаров номер таможенной декларации или информацию о том, что номера нет, с помощью метода [/v3/posting/fbs/ship/package](#operation/PostingAPI_PackageShipFbsPostingV3) или [/v3/posting/fbs/ship](#operation/PostingAPI_ShipFbsPostingV3). 
 * @member {Array.<String>} products_requiring_gtd
 */
V3FbsPostingRequirementsV3.prototype['products_requiring_gtd'] = undefined;

/**
 * Список идентификаторов товаров (SKU), для которых нужно передать информацию о стране-изготовителе.  Для сборки отправления передайте информацию о стране-изготовителе для всех перечисленных товаров с помощью метода [/v2/posting/fbs/product/country/set](#operation/PostingAPI_SetCountryProductFbsPostingV2). 
 * @member {Array.<String>} products_requiring_country
 */
V3FbsPostingRequirementsV3.prototype['products_requiring_country'] = undefined;

/**
 * Список идентификаторов товаров (SKU), для которых нужно передать маркировку «Честный ЗНАК». 
 * @member {Array.<String>} products_requiring_mandatory_mark
 */
V3FbsPostingRequirementsV3.prototype['products_requiring_mandatory_mark'] = undefined;

/**
 * Список идентификаторов товаров (SKU), для которых нужно передать регистрационный номер партии товара (РНПТ). 
 * @member {Array.<String>} products_requiring_rnpt
 */
V3FbsPostingRequirementsV3.prototype['products_requiring_rnpt'] = undefined;






export default V3FbsPostingRequirementsV3;

