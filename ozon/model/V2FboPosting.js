/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FboPostingFboPostingAnalyticsData from './FboPostingFboPostingAnalyticsData';
import V2AdditionalDataItem from './V2AdditionalDataItem';
import V2PostingFinancialData from './V2PostingFinancialData';
import V2PostingProduct from './V2PostingProduct';

/**
 * The V2FboPosting model module.
 * @module model/V2FboPosting
 * @version 2.1
 */
class V2FboPosting {
    /**
     * Constructs a new <code>V2FboPosting</code>.
     * Результат запроса.
     * @alias module:model/V2FboPosting
     */
    constructor() { 
        
        V2FboPosting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V2FboPosting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V2FboPosting} obj Optional instance to populate.
     * @return {module:model/V2FboPosting} The populated <code>V2FboPosting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2FboPosting();

            if (data.hasOwnProperty('additional_data')) {
                obj['additional_data'] = ApiClient.convertToType(data['additional_data'], [V2AdditionalDataItem]);
            }
            if (data.hasOwnProperty('analytics_data')) {
                obj['analytics_data'] = FboPostingFboPostingAnalyticsData.constructFromObject(data['analytics_data']);
            }
            if (data.hasOwnProperty('cancel_reason_id')) {
                obj['cancel_reason_id'] = ApiClient.convertToType(data['cancel_reason_id'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('financial_data')) {
                obj['financial_data'] = V2PostingFinancialData.constructFromObject(data['financial_data']);
            }
            if (data.hasOwnProperty('in_process_at')) {
                obj['in_process_at'] = ApiClient.convertToType(data['in_process_at'], 'Date');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'Number');
            }
            if (data.hasOwnProperty('order_number')) {
                obj['order_number'] = ApiClient.convertToType(data['order_number'], 'String');
            }
            if (data.hasOwnProperty('posting_number')) {
                obj['posting_number'] = ApiClient.convertToType(data['posting_number'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [V2PostingProduct]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V2FboPosting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V2FboPosting</code>.
     */
    static validateJSON(data) {
        if (data['additional_data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_data'])) {
                throw new Error("Expected the field `additional_data` to be an array in the JSON data but got " + data['additional_data']);
            }
            // validate the optional field `additional_data` (array)
            for (const item of data['additional_data']) {
                V2AdditionalDataItem.validateJsonObject(item);
            };
        }
        // validate the optional field `analytics_data`
        if (data['analytics_data']) { // data not null
          FboPostingFboPostingAnalyticsData.validateJSON(data['analytics_data']);
        }
        // validate the optional field `financial_data`
        if (data['financial_data']) { // data not null
          V2PostingFinancialData.validateJSON(data['financial_data']);
        }
        // ensure the json data is a string
        if (data['order_number'] && !(typeof data['order_number'] === 'string' || data['order_number'] instanceof String)) {
            throw new Error("Expected the field `order_number` to be a primitive type in the JSON string but got " + data['order_number']);
        }
        // ensure the json data is a string
        if (data['posting_number'] && !(typeof data['posting_number'] === 'string' || data['posting_number'] instanceof String)) {
            throw new Error("Expected the field `posting_number` to be a primitive type in the JSON string but got " + data['posting_number']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                V2PostingProduct.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/V2AdditionalDataItem>} additional_data
 */
V2FboPosting.prototype['additional_data'] = undefined;

/**
 * @member {module:model/FboPostingFboPostingAnalyticsData} analytics_data
 */
V2FboPosting.prototype['analytics_data'] = undefined;

/**
 * Идентификатор причины отмены отправления.
 * @member {Number} cancel_reason_id
 */
V2FboPosting.prototype['cancel_reason_id'] = undefined;

/**
 * Дата и время создания отправления.
 * @member {Date} created_at
 */
V2FboPosting.prototype['created_at'] = undefined;

/**
 * @member {module:model/V2PostingFinancialData} financial_data
 */
V2FboPosting.prototype['financial_data'] = undefined;

/**
 * Дата и время начала обработки отправления.
 * @member {Date} in_process_at
 */
V2FboPosting.prototype['in_process_at'] = undefined;

/**
 * Идентификатор заказа, к которому относится отправление.
 * @member {Number} order_id
 */
V2FboPosting.prototype['order_id'] = undefined;

/**
 * Номер заказа, к которому относится отправление.
 * @member {String} order_number
 */
V2FboPosting.prototype['order_number'] = undefined;

/**
 * Номер отправления.
 * @member {String} posting_number
 */
V2FboPosting.prototype['posting_number'] = undefined;

/**
 * Список товаров в отправлении.
 * @member {Array.<module:model/V2PostingProduct>} products
 */
V2FboPosting.prototype['products'] = undefined;

/**
 * Статус отправления:   - `awaiting_packaging` — ожидает упаковки,   - `awaiting_deliver` — ожидает отгрузки,   - `delivering` — доставляется,   - `delivered` — доставлено,   - `cancelled` — отменено. 
 * @member {String} status
 */
V2FboPosting.prototype['status'] = undefined;






export default V2FboPosting;

