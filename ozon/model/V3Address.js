/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V3Address model module.
 * @module model/V3Address
 * @version 2.1
 */
class V3Address {
    /**
     * Constructs a new <code>V3Address</code>.
     * Информация об адресе доставки.
     * @alias module:model/V3Address
     */
    constructor() { 
        
        V3Address.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V3Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V3Address} obj Optional instance to populate.
     * @return {module:model/V3Address} The populated <code>V3Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V3Address();

            if (data.hasOwnProperty('address_tail')) {
                obj['address_tail'] = ApiClient.convertToType(data['address_tail'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('provider_pvz_code')) {
                obj['provider_pvz_code'] = ApiClient.convertToType(data['provider_pvz_code'], 'String');
            }
            if (data.hasOwnProperty('pvz_code')) {
                obj['pvz_code'] = ApiClient.convertToType(data['pvz_code'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('zip_code')) {
                obj['zip_code'] = ApiClient.convertToType(data['zip_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V3Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V3Address</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address_tail'] && !(typeof data['address_tail'] === 'string' || data['address_tail'] instanceof String)) {
            throw new Error("Expected the field `address_tail` to be a primitive type in the JSON string but got " + data['address_tail']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['provider_pvz_code'] && !(typeof data['provider_pvz_code'] === 'string' || data['provider_pvz_code'] instanceof String)) {
            throw new Error("Expected the field `provider_pvz_code` to be a primitive type in the JSON string but got " + data['provider_pvz_code']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['zip_code'] && !(typeof data['zip_code'] === 'string' || data['zip_code'] instanceof String)) {
            throw new Error("Expected the field `zip_code` to be a primitive type in the JSON string but got " + data['zip_code']);
        }

        return true;
    }


}



/**
 * Адрес в текстовом формате.
 * @member {String} address_tail
 */
V3Address.prototype['address_tail'] = undefined;

/**
 * Город доставки.
 * @member {String} city
 */
V3Address.prototype['city'] = undefined;

/**
 * Комментарий к заказу.
 * @member {String} comment
 */
V3Address.prototype['comment'] = undefined;

/**
 * Страна доставки.
 * @member {String} country
 */
V3Address.prototype['country'] = undefined;

/**
 * Район доставки.
 * @member {String} district
 */
V3Address.prototype['district'] = undefined;

/**
 * Широта.
 * @member {Number} latitude
 */
V3Address.prototype['latitude'] = undefined;

/**
 * Долгота.
 * @member {Number} longitude
 */
V3Address.prototype['longitude'] = undefined;

/**
 * Код пункта выдачи заказов 3PL провайдера.
 * @member {String} provider_pvz_code
 */
V3Address.prototype['provider_pvz_code'] = undefined;

/**
 * Код пункта выдачи заказов.
 * @member {Number} pvz_code
 */
V3Address.prototype['pvz_code'] = undefined;

/**
 * Регион доставки.
 * @member {String} region
 */
V3Address.prototype['region'] = undefined;

/**
 * Почтовый индекс получателя.
 * @member {String} zip_code
 */
V3Address.prototype['zip_code'] = undefined;






export default V3Address;

