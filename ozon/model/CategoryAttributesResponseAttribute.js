/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CategoryAttributesResponseAttribute model module.
 * @module model/CategoryAttributesResponseAttribute
 * @version 2.1
 */
class CategoryAttributesResponseAttribute {
    /**
     * Constructs a new <code>CategoryAttributesResponseAttribute</code>.
     * @alias module:model/CategoryAttributesResponseAttribute
     */
    constructor() { 
        
        CategoryAttributesResponseAttribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CategoryAttributesResponseAttribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryAttributesResponseAttribute} obj Optional instance to populate.
     * @return {module:model/CategoryAttributesResponseAttribute} The populated <code>CategoryAttributesResponseAttribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryAttributesResponseAttribute();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dictionary_id')) {
                obj['dictionary_id'] = ApiClient.convertToType(data['dictionary_id'], 'Number');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('group_name')) {
                obj['group_name'] = ApiClient.convertToType(data['group_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_aspect')) {
                obj['is_aspect'] = ApiClient.convertToType(data['is_aspect'], 'Boolean');
            }
            if (data.hasOwnProperty('is_collection')) {
                obj['is_collection'] = ApiClient.convertToType(data['is_collection'], 'Boolean');
            }
            if (data.hasOwnProperty('is_required')) {
                obj['is_required'] = ApiClient.convertToType(data['is_required'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryAttributesResponseAttribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryAttributesResponseAttribute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['group_name'] && !(typeof data['group_name'] === 'string' || data['group_name'] instanceof String)) {
            throw new Error("Expected the field `group_name` to be a primitive type in the JSON string but got " + data['group_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Описание характеристики.
 * @member {String} description
 */
CategoryAttributesResponseAttribute.prototype['description'] = undefined;

/**
 * Идентификатор справочника.
 * @member {Number} dictionary_id
 */
CategoryAttributesResponseAttribute.prototype['dictionary_id'] = undefined;

/**
 * Идентификатор группы характеристик.
 * @member {Number} group_id
 */
CategoryAttributesResponseAttribute.prototype['group_id'] = undefined;

/**
 * Название группы характеристик.
 * @member {String} group_name
 */
CategoryAttributesResponseAttribute.prototype['group_name'] = undefined;

/**
 * Номер задания на формирование документов.
 * @member {Number} id
 */
CategoryAttributesResponseAttribute.prototype['id'] = undefined;

/**
 * Признак аспектного атрибута. Аспектный атрибут — характиристика, по которой отличаются товары одной модели.   Например, у одежды и обуви одной модели могут быть разные расцветки и размеры. То есть цвет и размер — это аспектные атрибуты.  Значения поля:   - `true` — атрибут аспектный и его нельзя изменить после поставки товара на склад или продажи со своего склада.   - `false` — атрибут не аспектный, можно изменить в любое время. 
 * @member {Boolean} is_aspect
 */
CategoryAttributesResponseAttribute.prototype['is_aspect'] = undefined;

/**
 * Признак, что характеристика — набор значений:   - `true` — характеристика — набор значений,   - `false` — характеристика состоит из одного значения. 
 * @member {Boolean} is_collection
 */
CategoryAttributesResponseAttribute.prototype['is_collection'] = undefined;

/**
 * Признак обязательной характеристики:   - `true` — обязательная характеристика,   - `false` — характеристику можно не указывать. 
 * @member {Boolean} is_required
 */
CategoryAttributesResponseAttribute.prototype['is_required'] = undefined;

/**
 * Название.
 * @member {String} name
 */
CategoryAttributesResponseAttribute.prototype['name'] = undefined;

/**
 * Тип характеристики.
 * @member {String} type
 */
CategoryAttributesResponseAttribute.prototype['type'] = undefined;






export default CategoryAttributesResponseAttribute;

