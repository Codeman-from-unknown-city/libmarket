/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResultError from './ResultError';

/**
 * The GetCarriageAvailableListResponseResult model module.
 * @module model/GetCarriageAvailableListResponseResult
 * @version 2.1
 */
class GetCarriageAvailableListResponseResult {
    /**
     * Constructs a new <code>GetCarriageAvailableListResponseResult</code>.
     * @alias module:model/GetCarriageAvailableListResponseResult
     */
    constructor() { 
        
        GetCarriageAvailableListResponseResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetCarriageAvailableListResponseResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetCarriageAvailableListResponseResult} obj Optional instance to populate.
     * @return {module:model/GetCarriageAvailableListResponseResult} The populated <code>GetCarriageAvailableListResponseResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetCarriageAvailableListResponseResult();

            if (data.hasOwnProperty('carriage_id')) {
                obj['carriage_id'] = ApiClient.convertToType(data['carriage_id'], 'Number');
            }
            if (data.hasOwnProperty('carriage_postings_count')) {
                obj['carriage_postings_count'] = ApiClient.convertToType(data['carriage_postings_count'], 'Number');
            }
            if (data.hasOwnProperty('carriage_status')) {
                obj['carriage_status'] = ApiClient.convertToType(data['carriage_status'], 'String');
            }
            if (data.hasOwnProperty('cutoff_at')) {
                obj['cutoff_at'] = ApiClient.convertToType(data['cutoff_at'], 'Date');
            }
            if (data.hasOwnProperty('delivery_method_id')) {
                obj['delivery_method_id'] = ApiClient.convertToType(data['delivery_method_id'], 'Number');
            }
            if (data.hasOwnProperty('delivery_method_name')) {
                obj['delivery_method_name'] = ApiClient.convertToType(data['delivery_method_name'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ResultError]);
            }
            if (data.hasOwnProperty('first_mile_type')) {
                obj['first_mile_type'] = ApiClient.convertToType(data['first_mile_type'], 'String');
            }
            if (data.hasOwnProperty('has_entrusted_acceptance')) {
                obj['has_entrusted_acceptance'] = ApiClient.convertToType(data['has_entrusted_acceptance'], 'Boolean');
            }
            if (data.hasOwnProperty('mandatory_postings_count')) {
                obj['mandatory_postings_count'] = ApiClient.convertToType(data['mandatory_postings_count'], 'Number');
            }
            if (data.hasOwnProperty('mandatory_packaged_count')) {
                obj['mandatory_packaged_count'] = ApiClient.convertToType(data['mandatory_packaged_count'], 'Number');
            }
            if (data.hasOwnProperty('tpl_provider_icon_url')) {
                obj['tpl_provider_icon_url'] = ApiClient.convertToType(data['tpl_provider_icon_url'], 'String');
            }
            if (data.hasOwnProperty('tpl_provider_name')) {
                obj['tpl_provider_name'] = ApiClient.convertToType(data['tpl_provider_name'], 'String');
            }
            if (data.hasOwnProperty('warehouse_city')) {
                obj['warehouse_city'] = ApiClient.convertToType(data['warehouse_city'], 'String');
            }
            if (data.hasOwnProperty('warehouse_id')) {
                obj['warehouse_id'] = ApiClient.convertToType(data['warehouse_id'], 'Number');
            }
            if (data.hasOwnProperty('warehouse_name')) {
                obj['warehouse_name'] = ApiClient.convertToType(data['warehouse_name'], 'String');
            }
            if (data.hasOwnProperty('warehouse_timezone')) {
                obj['warehouse_timezone'] = ApiClient.convertToType(data['warehouse_timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetCarriageAvailableListResponseResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetCarriageAvailableListResponseResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carriage_status'] && !(typeof data['carriage_status'] === 'string' || data['carriage_status'] instanceof String)) {
            throw new Error("Expected the field `carriage_status` to be a primitive type in the JSON string but got " + data['carriage_status']);
        }
        // ensure the json data is a string
        if (data['delivery_method_name'] && !(typeof data['delivery_method_name'] === 'string' || data['delivery_method_name'] instanceof String)) {
            throw new Error("Expected the field `delivery_method_name` to be a primitive type in the JSON string but got " + data['delivery_method_name']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ResultError.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['first_mile_type'] && !(typeof data['first_mile_type'] === 'string' || data['first_mile_type'] instanceof String)) {
            throw new Error("Expected the field `first_mile_type` to be a primitive type in the JSON string but got " + data['first_mile_type']);
        }
        // ensure the json data is a string
        if (data['tpl_provider_icon_url'] && !(typeof data['tpl_provider_icon_url'] === 'string' || data['tpl_provider_icon_url'] instanceof String)) {
            throw new Error("Expected the field `tpl_provider_icon_url` to be a primitive type in the JSON string but got " + data['tpl_provider_icon_url']);
        }
        // ensure the json data is a string
        if (data['tpl_provider_name'] && !(typeof data['tpl_provider_name'] === 'string' || data['tpl_provider_name'] instanceof String)) {
            throw new Error("Expected the field `tpl_provider_name` to be a primitive type in the JSON string but got " + data['tpl_provider_name']);
        }
        // ensure the json data is a string
        if (data['warehouse_city'] && !(typeof data['warehouse_city'] === 'string' || data['warehouse_city'] instanceof String)) {
            throw new Error("Expected the field `warehouse_city` to be a primitive type in the JSON string but got " + data['warehouse_city']);
        }
        // ensure the json data is a string
        if (data['warehouse_name'] && !(typeof data['warehouse_name'] === 'string' || data['warehouse_name'] instanceof String)) {
            throw new Error("Expected the field `warehouse_name` to be a primitive type in the JSON string but got " + data['warehouse_name']);
        }
        // ensure the json data is a string
        if (data['warehouse_timezone'] && !(typeof data['warehouse_timezone'] === 'string' || data['warehouse_timezone'] instanceof String)) {
            throw new Error("Expected the field `warehouse_timezone` to be a primitive type in the JSON string but got " + data['warehouse_timezone']);
        }

        return true;
    }


}



/**
 * Идентификатор перевозки (также номер задания на формирование документов).
 * @member {Number} carriage_id
 */
GetCarriageAvailableListResponseResult.prototype['carriage_id'] = undefined;

/**
 * Количество отправлений в перевозке.
 * @member {Number} carriage_postings_count
 */
GetCarriageAvailableListResponseResult.prototype['carriage_postings_count'] = undefined;

/**
 * Статус перевозки для запрашиваемого метода доставки и даты отгрузки.
 * @member {String} carriage_status
 */
GetCarriageAvailableListResponseResult.prototype['carriage_status'] = undefined;

/**
 * Дата и время, до которых нужно собрать отправление.
 * @member {Date} cutoff_at
 */
GetCarriageAvailableListResponseResult.prototype['cutoff_at'] = undefined;

/**
 * Идентификатор метода доставки.
 * @member {Number} delivery_method_id
 */
GetCarriageAvailableListResponseResult.prototype['delivery_method_id'] = undefined;

/**
 * Название метода доставки.
 * @member {String} delivery_method_name
 */
GetCarriageAvailableListResponseResult.prototype['delivery_method_name'] = undefined;

/**
 * Список ошибок.
 * @member {Array.<module:model/ResultError>} errors
 */
GetCarriageAvailableListResponseResult.prototype['errors'] = undefined;

/**
 * Тип первой мили.
 * @member {String} first_mile_type
 */
GetCarriageAvailableListResponseResult.prototype['first_mile_type'] = undefined;

/**
 * Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.
 * @member {Boolean} has_entrusted_acceptance
 */
GetCarriageAvailableListResponseResult.prototype['has_entrusted_acceptance'] = undefined;

/**
 * Количество отправлений, которые нужно собрать.
 * @member {Number} mandatory_postings_count
 */
GetCarriageAvailableListResponseResult.prototype['mandatory_postings_count'] = undefined;

/**
 * Количество собранных отправлений.
 * @member {Number} mandatory_packaged_count
 */
GetCarriageAvailableListResponseResult.prototype['mandatory_packaged_count'] = undefined;

/**
 * Ссылка на иконку службы доставки.
 * @member {String} tpl_provider_icon_url
 */
GetCarriageAvailableListResponseResult.prototype['tpl_provider_icon_url'] = undefined;

/**
 * Название службы доставки.
 * @member {String} tpl_provider_name
 */
GetCarriageAvailableListResponseResult.prototype['tpl_provider_name'] = undefined;

/**
 * Город склада.
 * @member {String} warehouse_city
 */
GetCarriageAvailableListResponseResult.prototype['warehouse_city'] = undefined;

/**
 * Идентификатор склада.
 * @member {Number} warehouse_id
 */
GetCarriageAvailableListResponseResult.prototype['warehouse_id'] = undefined;

/**
 * Название склада.
 * @member {String} warehouse_name
 */
GetCarriageAvailableListResponseResult.prototype['warehouse_name'] = undefined;

/**
 * Часовой пояс, в котором находится склад.
 * @member {String} warehouse_timezone
 */
GetCarriageAvailableListResponseResult.prototype['warehouse_timezone'] = undefined;






export default GetCarriageAvailableListResponseResult;

