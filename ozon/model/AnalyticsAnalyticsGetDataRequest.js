/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsFilter from './AnalyticsFilter';
import AnalyticsSorting from './AnalyticsSorting';

/**
 * The AnalyticsAnalyticsGetDataRequest model module.
 * @module model/AnalyticsAnalyticsGetDataRequest
 * @version 2.1
 */
class AnalyticsAnalyticsGetDataRequest {
    /**
     * Constructs a new <code>AnalyticsAnalyticsGetDataRequest</code>.
     * @alias module:model/AnalyticsAnalyticsGetDataRequest
     */
    constructor() { 
        
        AnalyticsAnalyticsGetDataRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyticsAnalyticsGetDataRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyticsAnalyticsGetDataRequest} obj Optional instance to populate.
     * @return {module:model/AnalyticsAnalyticsGetDataRequest} The populated <code>AnalyticsAnalyticsGetDataRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyticsAnalyticsGetDataRequest();

            if (data.hasOwnProperty('date_from')) {
                obj['date_from'] = ApiClient.convertToType(data['date_from'], 'String');
            }
            if (data.hasOwnProperty('date_to')) {
                obj['date_to'] = ApiClient.convertToType(data['date_to'], 'String');
            }
            if (data.hasOwnProperty('dimension')) {
                obj['dimension'] = ApiClient.convertToType(data['dimension'], ['String']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [AnalyticsFilter]);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], ['String']);
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], [AnalyticsSorting]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyticsAnalyticsGetDataRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyticsAnalyticsGetDataRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['date_from'] && !(typeof data['date_from'] === 'string' || data['date_from'] instanceof String)) {
            throw new Error("Expected the field `date_from` to be a primitive type in the JSON string but got " + data['date_from']);
        }
        // ensure the json data is a string
        if (data['date_to'] && !(typeof data['date_to'] === 'string' || data['date_to'] instanceof String)) {
            throw new Error("Expected the field `date_to` to be a primitive type in the JSON string but got " + data['date_to']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dimension'])) {
            throw new Error("Expected the field `dimension` to be an array in the JSON data but got " + data['dimension']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                AnalyticsFilter.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metrics'])) {
            throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
        }
        if (data['sort']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sort'])) {
                throw new Error("Expected the field `sort` to be an array in the JSON data but got " + data['sort']);
            }
            // validate the optional field `sort` (array)
            for (const item of data['sort']) {
                AnalyticsSorting.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * Дата, с которой будут данные в отчёте.
 * @member {String} date_from
 */
AnalyticsAnalyticsGetDataRequest.prototype['date_from'] = undefined;

/**
 * Дата, по которую будут данные в отчёте.
 * @member {String} date_to
 */
AnalyticsAnalyticsGetDataRequest.prototype['date_to'] = undefined;

/**
 * Группировка данных в отчёте:   - `unknownDimension` — неизвестное измерение,   - `sku` — идентификатор товара,   - `spu` — идентификатор товара,   - `day` — день,   - `week` — неделя,   - `month` — месяц,   - `year` — год,   - `category1` — категория первого уровня,   - `category2` — категория второго уровня,   - `category3` — категория третьего уровня,   - `category4` — категория четвертого уровня,   - `brand` — бренд,   - `modelID` — модель. 
 * @member {Array.<String>} dimension
 */
AnalyticsAnalyticsGetDataRequest.prototype['dimension'] = undefined;

/**
 * Фильтры.
 * @member {Array.<module:model/AnalyticsFilter>} filters
 */
AnalyticsAnalyticsGetDataRequest.prototype['filters'] = undefined;

/**
 * Количество значений в ответе:   - максимум — 1000,   - минимум — 1. 
 * @member {Number} limit
 */
AnalyticsAnalyticsGetDataRequest.prototype['limit'] = undefined;

/**
 * Укажите до 14 метрик. Если их будет больше, вы получите ошибку с кодом `InvalidArgument`.  Список метриĸ, по ĸоторым будет сформирован отчёт:   - `unknown_metric` — неизвестная метрика,   - `hits_view_search` — показы в поиске и в категории,   - `hits_view_pdp` — показы на карточке товара,   - `hits_view` — всего показов,   - `hits_tocart_search` — в корзину из поиска или категории,   - `hits_tocart_pdp` — в корзину из карточки товара,   - `hits_tocart` — всего добавлено в корзину,   - `session_view_search` — сессии с показом в поиске или в категории,   - `session_view_pdp` — сессии с показом на карточке товара,   - `session_view` — всего сессий,   - `conv_tocart_search` — конверсия в корзину из поиска или категории,   - `conv_tocart_pdp` — конверсия в корзину из карточки товара,   - `conv_tocart` — общая конверсия в корзину,   - `revenue` — заказано на сумму,   - `returns` — возвращено товаров,   - `cancellations` — отменено товаров,   - `ordered_units` — заказано товаров,   - `delivered_units` — доставлено товаров,   - `adv_view_pdp` — показы на карточке товара, спонсорские товары,   - `adv_view_search_category` — показы в поиске и в категории, спонсорские товары,   - `adv_view_all` — показы всего, спонсорские товары,   - `adv_sum_all` — всего расходов на рекламу,   - `position_category` — позиция в поиске и категории,   - `postings` — отправления,   - `postings_premium` — отправления с подпиской Premium. 
 * @member {Array.<String>} metrics
 */
AnalyticsAnalyticsGetDataRequest.prototype['metrics'] = undefined;

/**
 * Количество элементов, которое будет пропущено в ответе. Например, если `offset = 10`, то ответ начнётся с 11-го найденного элемента.
 * @member {Number} offset
 */
AnalyticsAnalyticsGetDataRequest.prototype['offset'] = undefined;

/**
 * Настройки сортировки отчёта.
 * @member {Array.<module:model/AnalyticsSorting>} sort
 */
AnalyticsAnalyticsGetDataRequest.prototype['sort'] = undefined;






export default AnalyticsAnalyticsGetDataRequest;

