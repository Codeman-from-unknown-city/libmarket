/**
 * Документация Ozon Seller API
 * По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru) 
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V2PostingFBSActListRelatedDocs from './V2PostingFBSActListRelatedDocs';

/**
 * The V2PostingFBSActListResult model module.
 * @module model/V2PostingFBSActListResult
 * @version 2.1
 */
class V2PostingFBSActListResult {
    /**
     * Constructs a new <code>V2PostingFBSActListResult</code>.
     * @alias module:model/V2PostingFBSActListResult
     */
    constructor() { 
        
        V2PostingFBSActListResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V2PostingFBSActListResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V2PostingFBSActListResult} obj Optional instance to populate.
     * @return {module:model/V2PostingFBSActListResult} The populated <code>V2PostingFBSActListResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2PostingFBSActListResult();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('delivery_method_id')) {
                obj['delivery_method_id'] = ApiClient.convertToType(data['delivery_method_id'], 'Number');
            }
            if (data.hasOwnProperty('delivery_method_name')) {
                obj['delivery_method_name'] = ApiClient.convertToType(data['delivery_method_name'], 'String');
            }
            if (data.hasOwnProperty('integration_type')) {
                obj['integration_type'] = ApiClient.convertToType(data['integration_type'], 'String');
            }
            if (data.hasOwnProperty('containers_count')) {
                obj['containers_count'] = ApiClient.convertToType(data['containers_count'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('act_type')) {
                obj['act_type'] = ApiClient.convertToType(data['act_type'], 'String');
            }
            if (data.hasOwnProperty('is_partial')) {
                obj['is_partial'] = ApiClient.convertToType(data['is_partial'], 'Boolean');
            }
            if (data.hasOwnProperty('has_postings_for_next_carriage')) {
                obj['has_postings_for_next_carriage'] = ApiClient.convertToType(data['has_postings_for_next_carriage'], 'Boolean');
            }
            if (data.hasOwnProperty('partial_num')) {
                obj['partial_num'] = ApiClient.convertToType(data['partial_num'], 'Number');
            }
            if (data.hasOwnProperty('related_docs')) {
                obj['related_docs'] = V2PostingFBSActListRelatedDocs.constructFromObject(data['related_docs']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V2PostingFBSActListResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V2PostingFBSActListResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delivery_method_name'] && !(typeof data['delivery_method_name'] === 'string' || data['delivery_method_name'] instanceof String)) {
            throw new Error("Expected the field `delivery_method_name` to be a primitive type in the JSON string but got " + data['delivery_method_name']);
        }
        // ensure the json data is a string
        if (data['integration_type'] && !(typeof data['integration_type'] === 'string' || data['integration_type'] instanceof String)) {
            throw new Error("Expected the field `integration_type` to be a primitive type in the JSON string but got " + data['integration_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['departure_date'] && !(typeof data['departure_date'] === 'string' || data['departure_date'] instanceof String)) {
            throw new Error("Expected the field `departure_date` to be a primitive type in the JSON string but got " + data['departure_date']);
        }
        // ensure the json data is a string
        if (data['act_type'] && !(typeof data['act_type'] === 'string' || data['act_type'] instanceof String)) {
            throw new Error("Expected the field `act_type` to be a primitive type in the JSON string but got " + data['act_type']);
        }
        // validate the optional field `related_docs`
        if (data['related_docs']) { // data not null
          V2PostingFBSActListRelatedDocs.validateJSON(data['related_docs']);
        }

        return true;
    }


}



/**
 * Идентификатор отгрузки.
 * @member {Number} id
 */
V2PostingFBSActListResult.prototype['id'] = undefined;

/**
 * Идентификатор метода доставки.
 * @member {Number} delivery_method_id
 */
V2PostingFBSActListResult.prototype['delivery_method_id'] = undefined;

/**
 * Название метода доставки.
 * @member {String} delivery_method_name
 */
V2PostingFBSActListResult.prototype['delivery_method_name'] = undefined;

/**
 * Тип интеграции со службой доставки:   - `ozon` — доставка через Ozon логистику.   - `3pl` — доставка внешней службой, продавец регистрирует заказ. 
 * @member {String} integration_type
 */
V2PostingFBSActListResult.prototype['integration_type'] = undefined;

/**
 * Число грузовых мест.
 * @member {Number} containers_count
 */
V2PostingFBSActListResult.prototype['containers_count'] = undefined;

/**
 * Статус отгрузки.
 * @member {String} status
 */
V2PostingFBSActListResult.prototype['status'] = undefined;

/**
 * Дата отгрузки.
 * @member {String} departure_date
 */
V2PostingFBSActListResult.prototype['departure_date'] = undefined;

/**
 * Дата создания записи об отгрузке.
 * @member {Date} created_at
 */
V2PostingFBSActListResult.prototype['created_at'] = undefined;

/**
 * Дата обновления записи об отгрузке.
 * @member {Date} updated_at
 */
V2PostingFBSActListResult.prototype['updated_at'] = undefined;

/**
 * Тип акта приёма-передачи для FBS продавцов.
 * @member {String} act_type
 */
V2PostingFBSActListResult.prototype['act_type'] = undefined;

/**
 * Признак частичной перевозки. `true`, если перевозка частичная.  Частичная перевозка значит, что отгрузка была разделена на несколько частей и по каждой из частей формируются отдельные акты. 
 * @member {Boolean} is_partial
 */
V2PostingFBSActListResult.prototype['is_partial'] = undefined;

/**
 * Признак наличия подлежащих отгрузке отправлений, которые не попали в текущую перевозку. `true`, если такие отправления есть.
 * @member {Boolean} has_postings_for_next_carriage
 */
V2PostingFBSActListResult.prototype['has_postings_for_next_carriage'] = undefined;

/**
 * Порядковый номер частичной перевозки.
 * @member {Number} partial_num
 */
V2PostingFBSActListResult.prototype['partial_num'] = undefined;

/**
 * @member {module:model/V2PostingFBSActListRelatedDocs} related_docs
 */
V2PostingFBSActListResult.prototype['related_docs'] = undefined;






export default V2PostingFBSActListResult;

